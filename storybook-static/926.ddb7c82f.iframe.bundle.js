"use strict";(self.webpackChunkmy_storybook_nextjs=self.webpackChunkmy_storybook_nextjs||[]).push([[926],{"./node_modules/graphql/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BREAK:()=>BREAK,BreakingChangeType:()=>BreakingChangeType,DEFAULT_DEPRECATION_REASON:()=>DEFAULT_DEPRECATION_REASON,DangerousChangeType:()=>DangerousChangeType,DirectiveLocation:()=>DirectiveLocation,ExecutableDefinitionsRule:()=>ExecutableDefinitionsRule,FieldsOnCorrectTypeRule:()=>FieldsOnCorrectTypeRule,FragmentsOnCompositeTypesRule:()=>FragmentsOnCompositeTypesRule,GRAPHQL_MAX_INT:()=>GRAPHQL_MAX_INT,GRAPHQL_MIN_INT:()=>GRAPHQL_MIN_INT,GraphQLBoolean:()=>GraphQLBoolean,GraphQLDeprecatedDirective:()=>GraphQLDeprecatedDirective,GraphQLDirective:()=>GraphQLDirective,GraphQLEnumType:()=>GraphQLEnumType,GraphQLError:()=>GraphQLError,GraphQLFloat:()=>GraphQLFloat,GraphQLID:()=>GraphQLID,GraphQLIncludeDirective:()=>GraphQLIncludeDirective,GraphQLInputObjectType:()=>GraphQLInputObjectType,GraphQLInt:()=>GraphQLInt,GraphQLInterfaceType:()=>GraphQLInterfaceType,GraphQLList:()=>GraphQLList,GraphQLNonNull:()=>GraphQLNonNull,GraphQLObjectType:()=>GraphQLObjectType,GraphQLOneOfDirective:()=>GraphQLOneOfDirective,GraphQLScalarType:()=>GraphQLScalarType,GraphQLSchema:()=>GraphQLSchema,GraphQLSkipDirective:()=>GraphQLSkipDirective,GraphQLSpecifiedByDirective:()=>GraphQLSpecifiedByDirective,GraphQLString:()=>GraphQLString,GraphQLUnionType:()=>GraphQLUnionType,Kind:()=>Kind,KnownArgumentNamesRule:()=>KnownArgumentNamesRule,KnownDirectivesRule:()=>KnownDirectivesRule,KnownFragmentNamesRule:()=>KnownFragmentNamesRule,KnownTypeNamesRule:()=>KnownTypeNamesRule,Lexer:()=>Lexer,Location:()=>Location,LoneAnonymousOperationRule:()=>LoneAnonymousOperationRule,LoneSchemaDefinitionRule:()=>LoneSchemaDefinitionRule,MaxIntrospectionDepthRule:()=>MaxIntrospectionDepthRule,NoDeprecatedCustomRule:()=>NoDeprecatedCustomRule,NoFragmentCyclesRule:()=>NoFragmentCyclesRule,NoSchemaIntrospectionCustomRule:()=>NoSchemaIntrospectionCustomRule,NoUndefinedVariablesRule:()=>NoUndefinedVariablesRule,NoUnusedFragmentsRule:()=>NoUnusedFragmentsRule,NoUnusedVariablesRule:()=>NoUnusedVariablesRule,OperationTypeNode:()=>OperationTypeNode,OverlappingFieldsCanBeMergedRule:()=>OverlappingFieldsCanBeMergedRule,PossibleFragmentSpreadsRule:()=>PossibleFragmentSpreadsRule,PossibleTypeExtensionsRule:()=>PossibleTypeExtensionsRule,ProvidedRequiredArgumentsRule:()=>ProvidedRequiredArgumentsRule,ScalarLeafsRule:()=>ScalarLeafsRule,SchemaMetaFieldDef:()=>SchemaMetaFieldDef,SingleFieldSubscriptionsRule:()=>SingleFieldSubscriptionsRule,Source:()=>Source,Token:()=>Token,TokenKind:()=>TokenKind,TypeInfo:()=>TypeInfo,TypeKind:()=>TypeKind,TypeMetaFieldDef:()=>TypeMetaFieldDef,TypeNameMetaFieldDef:()=>TypeNameMetaFieldDef,UniqueArgumentDefinitionNamesRule:()=>UniqueArgumentDefinitionNamesRule,UniqueArgumentNamesRule:()=>UniqueArgumentNamesRule,UniqueDirectiveNamesRule:()=>UniqueDirectiveNamesRule,UniqueDirectivesPerLocationRule:()=>UniqueDirectivesPerLocationRule,UniqueEnumValueNamesRule:()=>UniqueEnumValueNamesRule,UniqueFieldDefinitionNamesRule:()=>UniqueFieldDefinitionNamesRule,UniqueFragmentNamesRule:()=>UniqueFragmentNamesRule,UniqueInputFieldNamesRule:()=>UniqueInputFieldNamesRule,UniqueOperationNamesRule:()=>UniqueOperationNamesRule,UniqueOperationTypesRule:()=>UniqueOperationTypesRule,UniqueTypeNamesRule:()=>UniqueTypeNamesRule,UniqueVariableNamesRule:()=>UniqueVariableNamesRule,ValidationContext:()=>ValidationContext,ValuesOfCorrectTypeRule:()=>ValuesOfCorrectTypeRule,VariablesAreInputTypesRule:()=>VariablesAreInputTypesRule,VariablesInAllowedPositionRule:()=>VariablesInAllowedPositionRule,__Directive:()=>__Directive,__DirectiveLocation:()=>__DirectiveLocation,__EnumValue:()=>__EnumValue,__Field:()=>__Field,__InputValue:()=>__InputValue,__Schema:()=>__Schema,__Type:()=>__Type,__TypeKind:()=>__TypeKind,assertAbstractType:()=>assertAbstractType,assertCompositeType:()=>assertCompositeType,assertDirective:()=>assertDirective,assertEnumType:()=>assertEnumType,assertEnumValueName:()=>assertEnumValueName,assertInputObjectType:()=>assertInputObjectType,assertInputType:()=>assertInputType,assertInterfaceType:()=>assertInterfaceType,assertLeafType:()=>assertLeafType,assertListType:()=>assertListType,assertName:()=>assertName,assertNamedType:()=>assertNamedType,assertNonNullType:()=>assertNonNullType,assertNullableType:()=>assertNullableType,assertObjectType:()=>assertObjectType,assertOutputType:()=>assertOutputType,assertScalarType:()=>assertScalarType,assertSchema:()=>assertSchema,assertType:()=>assertType,assertUnionType:()=>assertUnionType,assertValidName:()=>assertValidName,assertValidSchema:()=>assertValidSchema,assertWrappingType:()=>assertWrappingType,astFromValue:()=>astFromValue,buildASTSchema:()=>buildASTSchema,buildClientSchema:()=>buildClientSchema,buildSchema:()=>buildSchema,coerceInputValue:()=>coerceInputValue,concatAST:()=>concatAST,createSourceEventStream:()=>createSourceEventStream,defaultFieldResolver:()=>defaultFieldResolver,defaultTypeResolver:()=>defaultTypeResolver,doTypesOverlap:()=>doTypesOverlap,execute:()=>execute,executeSync:()=>executeSync,extendSchema:()=>extendSchema,findBreakingChanges:()=>findBreakingChanges,findDangerousChanges:()=>findDangerousChanges,formatError:()=>formatError,getArgumentValues:()=>getArgumentValues,getDirectiveValues:()=>getDirectiveValues,getEnterLeaveForKind:()=>getEnterLeaveForKind,getIntrospectionQuery:()=>getIntrospectionQuery,getLocation:()=>getLocation,getNamedType:()=>getNamedType,getNullableType:()=>getNullableType,getOperationAST:()=>getOperationAST,getOperationRootType:()=>getOperationRootType,getVariableValues:()=>getVariableValues,getVisitFn:()=>getVisitFn,graphql:()=>graphql,graphqlSync:()=>graphqlSync,introspectionFromSchema:()=>introspectionFromSchema,introspectionTypes:()=>introspectionTypes,isAbstractType:()=>isAbstractType,isCompositeType:()=>isCompositeType,isConstValueNode:()=>isConstValueNode,isDefinitionNode:()=>isDefinitionNode,isDirective:()=>isDirective,isEnumType:()=>isEnumType,isEqualType:()=>isEqualType,isExecutableDefinitionNode:()=>isExecutableDefinitionNode,isInputObjectType:()=>isInputObjectType,isInputType:()=>isInputType,isInterfaceType:()=>isInterfaceType,isIntrospectionType:()=>isIntrospectionType,isLeafType:()=>isLeafType,isListType:()=>isListType,isNamedType:()=>isNamedType,isNonNullType:()=>isNonNullType,isNullableType:()=>isNullableType,isObjectType:()=>isObjectType,isOutputType:()=>isOutputType,isRequiredArgument:()=>isRequiredArgument,isRequiredInputField:()=>isRequiredInputField,isScalarType:()=>isScalarType,isSchema:()=>isSchema,isSelectionNode:()=>isSelectionNode,isSpecifiedDirective:()=>isSpecifiedDirective,isSpecifiedScalarType:()=>isSpecifiedScalarType,isType:()=>isType,isTypeDefinitionNode:()=>isTypeDefinitionNode,isTypeExtensionNode:()=>isTypeExtensionNode,isTypeNode:()=>isTypeNode,isTypeSubTypeOf:()=>isTypeSubTypeOf,isTypeSystemDefinitionNode:()=>isTypeSystemDefinitionNode,isTypeSystemExtensionNode:()=>isTypeSystemExtensionNode,isUnionType:()=>isUnionType,isValidNameError:()=>isValidNameError,isValueNode:()=>isValueNode,isWrappingType:()=>isWrappingType,lexicographicSortSchema:()=>lexicographicSortSchema,locatedError:()=>locatedError,parse:()=>parse,parseConstValue:()=>parseConstValue,parseType:()=>parseType,parseValue:()=>parseValue,print:()=>print,printError:()=>printError,printIntrospectionSchema:()=>printIntrospectionSchema,printLocation:()=>printLocation,printSchema:()=>printSchema,printSourceLocation:()=>printSourceLocation,printType:()=>printType,recommendedRules:()=>recommendedRules,resolveObjMapThunk:()=>resolveObjMapThunk,resolveReadonlyArrayThunk:()=>resolveReadonlyArrayThunk,responsePathAsArray:()=>pathToArray,separateOperations:()=>separateOperations,specifiedDirectives:()=>specifiedDirectives,specifiedRules:()=>specifiedRules,specifiedScalarTypes:()=>specifiedScalarTypes,stripIgnoredCharacters:()=>stripIgnoredCharacters,subscribe:()=>subscribe,syntaxError:()=>syntaxError,typeFromAST:()=>typeFromAST,validate:()=>validate,validateSchema:()=>validateSchema,valueFromAST:()=>valueFromAST,valueFromASTUntyped:()=>valueFromASTUntyped,version:()=>version,versionInfo:()=>versionInfo,visit:()=>visit,visitInParallel:()=>visitInParallel,visitWithTypeInfo:()=>visitWithTypeInfo});const version="16.9.0",versionInfo=Object.freeze({major:16,minor:9,patch:0,preReleaseTag:null});function devAssert(condition,message){if(!Boolean(condition))throw new Error(message)}function isPromise(value){return"function"==typeof(null==value?void 0:value.then)}function isObjectLike(value){return"object"==typeof value&&null!==value}function invariant(condition,message){if(!Boolean(condition))throw new Error(null!=message?message:"Unexpected invariant triggered.")}const LineRegExp=/\r\n|[\n\r]/g;function getLocation(source,position){let lastLineStart=0,line=1;for(const match of source.body.matchAll(LineRegExp)){if("number"==typeof match.index||invariant(!1),match.index>=position)break;lastLineStart=match.index+match[0].length,line+=1}return{line,column:position+1-lastLineStart}}function printLocation(location){return printSourceLocation(location.source,getLocation(location.source,location.start))}function printSourceLocation(source,sourceLocation){const firstLineColumnOffset=source.locationOffset.column-1,body="".padStart(firstLineColumnOffset)+source.body,lineIndex=sourceLocation.line-1,lineOffset=source.locationOffset.line-1,lineNum=sourceLocation.line+lineOffset,columnOffset=1===sourceLocation.line?firstLineColumnOffset:0,columnNum=sourceLocation.column+columnOffset,locationStr=`${source.name}:${lineNum}:${columnNum}\n`,lines=body.split(/\r\n|[\n\r]/g),locationLine=lines[lineIndex];if(locationLine.length>120){const subLineIndex=Math.floor(columnNum/80),subLineColumnNum=columnNum%80,subLines=[];for(let i=0;i<locationLine.length;i+=80)subLines.push(locationLine.slice(i,i+80));return locationStr+printPrefixedLines([[`${lineNum} |`,subLines[0]],...subLines.slice(1,subLineIndex+1).map((subLine=>["|",subLine])),["|","^".padStart(subLineColumnNum)],["|",subLines[subLineIndex+1]]])}return locationStr+printPrefixedLines([[lineNum-1+" |",lines[lineIndex-1]],[`${lineNum} |`,locationLine],["|","^".padStart(columnNum)],[`${lineNum+1} |`,lines[lineIndex+1]]])}function printPrefixedLines(lines){const existingLines=lines.filter((([_,line])=>void 0!==line)),padLen=Math.max(...existingLines.map((([prefix])=>prefix.length)));return existingLines.map((([prefix,line])=>prefix.padStart(padLen)+(line?" "+line:""))).join("\n")}class GraphQLError extends Error{constructor(message,...rawArgs){var _this$nodes,_nodeLocations$,_ref;const{nodes,source,positions,path,originalError,extensions}=function toNormalizedOptions(args){const firstArg=args[0];return null==firstArg||"kind"in firstArg||"length"in firstArg?{nodes:firstArg,source:args[1],positions:args[2],path:args[3],originalError:args[4],extensions:args[5]}:firstArg}(rawArgs);super(message),this.name="GraphQLError",this.path=null!=path?path:void 0,this.originalError=null!=originalError?originalError:void 0,this.nodes=undefinedIfEmpty(Array.isArray(nodes)?nodes:nodes?[nodes]:void 0);const nodeLocations=undefinedIfEmpty(null===(_this$nodes=this.nodes)||void 0===_this$nodes?void 0:_this$nodes.map((node=>node.loc)).filter((loc=>null!=loc)));this.source=null!=source?source:null==nodeLocations||null===(_nodeLocations$=nodeLocations[0])||void 0===_nodeLocations$?void 0:_nodeLocations$.source,this.positions=null!=positions?positions:null==nodeLocations?void 0:nodeLocations.map((loc=>loc.start)),this.locations=positions&&source?positions.map((pos=>getLocation(source,pos))):null==nodeLocations?void 0:nodeLocations.map((loc=>getLocation(loc.source,loc.start)));const originalExtensions=isObjectLike(null==originalError?void 0:originalError.extensions)?null==originalError?void 0:originalError.extensions:void 0;this.extensions=null!==(_ref=null!=extensions?extensions:originalExtensions)&&void 0!==_ref?_ref:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=originalError&&originalError.stack?Object.defineProperty(this,"stack",{value:originalError.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,GraphQLError):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let output=this.message;if(this.nodes)for(const node of this.nodes)node.loc&&(output+="\n\n"+printLocation(node.loc));else if(this.source&&this.locations)for(const location of this.locations)output+="\n\n"+printSourceLocation(this.source,location);return output}toJSON(){const formattedError={message:this.message};return null!=this.locations&&(formattedError.locations=this.locations),null!=this.path&&(formattedError.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(formattedError.extensions=this.extensions),formattedError}}function undefinedIfEmpty(array){return void 0===array||0===array.length?void 0:array}function printError(error){return error.toString()}function formatError(error){return error.toJSON()}function syntaxError(source,position,description){return new GraphQLError(`Syntax Error: ${description}`,{source,positions:[position]})}class Location{constructor(startToken,endToken,source){this.start=startToken.start,this.end=endToken.end,this.startToken=startToken,this.endToken=endToken,this.source=source}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class Token{constructor(kind,start,end,line,column,value){this.kind=kind,this.start=start,this.end=end,this.line=line,this.column=column,this.value=value,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}const QueryDocumentKeys={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},kindValues=new Set(Object.keys(QueryDocumentKeys));function isNode(maybeNode){const maybeKind=null==maybeNode?void 0:maybeNode.kind;return"string"==typeof maybeKind&&kindValues.has(maybeKind)}var OperationTypeNode,DirectiveLocation,Kind,TokenKind;function isWhiteSpace(code){return 9===code||32===code}function isDigit(code){return code>=48&&code<=57}function isLetter(code){return code>=97&&code<=122||code>=65&&code<=90}function isNameStart(code){return isLetter(code)||95===code}function isNameContinue(code){return isLetter(code)||isDigit(code)||95===code}function dedentBlockStringLines(lines){var _firstNonEmptyLine2;let commonIndent=Number.MAX_SAFE_INTEGER,firstNonEmptyLine=null,lastNonEmptyLine=-1;for(let i=0;i<lines.length;++i){var _firstNonEmptyLine;const line=lines[i],indent=leadingWhitespace(line);indent!==line.length&&(firstNonEmptyLine=null!==(_firstNonEmptyLine=firstNonEmptyLine)&&void 0!==_firstNonEmptyLine?_firstNonEmptyLine:i,lastNonEmptyLine=i,0!==i&&indent<commonIndent&&(commonIndent=indent))}return lines.map(((line,i)=>0===i?line:line.slice(commonIndent))).slice(null!==(_firstNonEmptyLine2=firstNonEmptyLine)&&void 0!==_firstNonEmptyLine2?_firstNonEmptyLine2:0,lastNonEmptyLine+1)}function leadingWhitespace(str){let i=0;for(;i<str.length&&isWhiteSpace(str.charCodeAt(i));)++i;return i}function isPrintableAsBlockString(value){if(""===value)return!0;let isEmptyLine=!0,hasIndent=!1,hasCommonIndent=!0,seenNonEmptyLine=!1;for(let i=0;i<value.length;++i)switch(value.codePointAt(i)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:case 13:return!1;case 10:if(isEmptyLine&&!seenNonEmptyLine)return!1;seenNonEmptyLine=!0,isEmptyLine=!0,hasIndent=!1;break;case 9:case 32:hasIndent||(hasIndent=isEmptyLine);break;default:hasCommonIndent&&(hasCommonIndent=hasIndent),isEmptyLine=!1}return!isEmptyLine&&(!hasCommonIndent||!seenNonEmptyLine)}function printBlockString(value,options){const escapedValue=value.replace(/"""/g,'\\"""'),lines=escapedValue.split(/\r\n|[\n\r]/g),isSingleLine=1===lines.length,forceLeadingNewLine=lines.length>1&&lines.slice(1).every((line=>0===line.length||isWhiteSpace(line.charCodeAt(0)))),hasTrailingTripleQuotes=escapedValue.endsWith('\\"""'),hasTrailingQuote=value.endsWith('"')&&!hasTrailingTripleQuotes,hasTrailingSlash=value.endsWith("\\"),forceTrailingNewline=hasTrailingQuote||hasTrailingSlash,printAsMultipleLines=!(null!=options&&options.minimize)&&(!isSingleLine||value.length>70||forceTrailingNewline||forceLeadingNewLine||hasTrailingTripleQuotes);let result="";const skipLeadingNewLine=isSingleLine&&isWhiteSpace(value.charCodeAt(0));return(printAsMultipleLines&&!skipLeadingNewLine||forceLeadingNewLine)&&(result+="\n"),result+=escapedValue,(printAsMultipleLines||forceTrailingNewline)&&(result+="\n"),'"""'+result+'"""'}!function(OperationTypeNode){OperationTypeNode.QUERY="query",OperationTypeNode.MUTATION="mutation",OperationTypeNode.SUBSCRIPTION="subscription"}(OperationTypeNode||(OperationTypeNode={})),function(DirectiveLocation){DirectiveLocation.QUERY="QUERY",DirectiveLocation.MUTATION="MUTATION",DirectiveLocation.SUBSCRIPTION="SUBSCRIPTION",DirectiveLocation.FIELD="FIELD",DirectiveLocation.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",DirectiveLocation.FRAGMENT_SPREAD="FRAGMENT_SPREAD",DirectiveLocation.INLINE_FRAGMENT="INLINE_FRAGMENT",DirectiveLocation.VARIABLE_DEFINITION="VARIABLE_DEFINITION",DirectiveLocation.SCHEMA="SCHEMA",DirectiveLocation.SCALAR="SCALAR",DirectiveLocation.OBJECT="OBJECT",DirectiveLocation.FIELD_DEFINITION="FIELD_DEFINITION",DirectiveLocation.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",DirectiveLocation.INTERFACE="INTERFACE",DirectiveLocation.UNION="UNION",DirectiveLocation.ENUM="ENUM",DirectiveLocation.ENUM_VALUE="ENUM_VALUE",DirectiveLocation.INPUT_OBJECT="INPUT_OBJECT",DirectiveLocation.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(DirectiveLocation||(DirectiveLocation={})),function(Kind){Kind.NAME="Name",Kind.DOCUMENT="Document",Kind.OPERATION_DEFINITION="OperationDefinition",Kind.VARIABLE_DEFINITION="VariableDefinition",Kind.SELECTION_SET="SelectionSet",Kind.FIELD="Field",Kind.ARGUMENT="Argument",Kind.FRAGMENT_SPREAD="FragmentSpread",Kind.INLINE_FRAGMENT="InlineFragment",Kind.FRAGMENT_DEFINITION="FragmentDefinition",Kind.VARIABLE="Variable",Kind.INT="IntValue",Kind.FLOAT="FloatValue",Kind.STRING="StringValue",Kind.BOOLEAN="BooleanValue",Kind.NULL="NullValue",Kind.ENUM="EnumValue",Kind.LIST="ListValue",Kind.OBJECT="ObjectValue",Kind.OBJECT_FIELD="ObjectField",Kind.DIRECTIVE="Directive",Kind.NAMED_TYPE="NamedType",Kind.LIST_TYPE="ListType",Kind.NON_NULL_TYPE="NonNullType",Kind.SCHEMA_DEFINITION="SchemaDefinition",Kind.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",Kind.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",Kind.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",Kind.FIELD_DEFINITION="FieldDefinition",Kind.INPUT_VALUE_DEFINITION="InputValueDefinition",Kind.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",Kind.UNION_TYPE_DEFINITION="UnionTypeDefinition",Kind.ENUM_TYPE_DEFINITION="EnumTypeDefinition",Kind.ENUM_VALUE_DEFINITION="EnumValueDefinition",Kind.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",Kind.DIRECTIVE_DEFINITION="DirectiveDefinition",Kind.SCHEMA_EXTENSION="SchemaExtension",Kind.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",Kind.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",Kind.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",Kind.UNION_TYPE_EXTENSION="UnionTypeExtension",Kind.ENUM_TYPE_EXTENSION="EnumTypeExtension",Kind.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"}(Kind||(Kind={})),function(TokenKind){TokenKind.SOF="<SOF>",TokenKind.EOF="<EOF>",TokenKind.BANG="!",TokenKind.DOLLAR="$",TokenKind.AMP="&",TokenKind.PAREN_L="(",TokenKind.PAREN_R=")",TokenKind.SPREAD="...",TokenKind.COLON=":",TokenKind.EQUALS="=",TokenKind.AT="@",TokenKind.BRACKET_L="[",TokenKind.BRACKET_R="]",TokenKind.BRACE_L="{",TokenKind.PIPE="|",TokenKind.BRACE_R="}",TokenKind.NAME="Name",TokenKind.INT="Int",TokenKind.FLOAT="Float",TokenKind.STRING="String",TokenKind.BLOCK_STRING="BlockString",TokenKind.COMMENT="Comment"}(TokenKind||(TokenKind={}));class Lexer{constructor(source){const startOfFileToken=new Token(TokenKind.SOF,0,0,0,0);this.source=source,this.lastToken=startOfFileToken,this.token=startOfFileToken,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){this.lastToken=this.token;return this.token=this.lookahead()}lookahead(){let token=this.token;if(token.kind!==TokenKind.EOF)do{if(token.next)token=token.next;else{const nextToken=readNextToken(this,token.end);token.next=nextToken,nextToken.prev=token,token=nextToken}}while(token.kind===TokenKind.COMMENT);return token}}function isPunctuatorTokenKind(kind){return kind===TokenKind.BANG||kind===TokenKind.DOLLAR||kind===TokenKind.AMP||kind===TokenKind.PAREN_L||kind===TokenKind.PAREN_R||kind===TokenKind.SPREAD||kind===TokenKind.COLON||kind===TokenKind.EQUALS||kind===TokenKind.AT||kind===TokenKind.BRACKET_L||kind===TokenKind.BRACKET_R||kind===TokenKind.BRACE_L||kind===TokenKind.PIPE||kind===TokenKind.BRACE_R}function isUnicodeScalarValue(code){return code>=0&&code<=55295||code>=57344&&code<=1114111}function isSupplementaryCodePoint(body,location){return isLeadingSurrogate(body.charCodeAt(location))&&isTrailingSurrogate(body.charCodeAt(location+1))}function isLeadingSurrogate(code){return code>=55296&&code<=56319}function isTrailingSurrogate(code){return code>=56320&&code<=57343}function printCodePointAt(lexer,location){const code=lexer.source.body.codePointAt(location);if(void 0===code)return TokenKind.EOF;if(code>=32&&code<=126){const char=String.fromCodePoint(code);return'"'===char?"'\"'":`"${char}"`}return"U+"+code.toString(16).toUpperCase().padStart(4,"0")}function createToken(lexer,kind,start,end,value){const line=lexer.line,col=1+start-lexer.lineStart;return new Token(kind,start,end,line,col,value)}function readNextToken(lexer,start){const body=lexer.source.body,bodyLength=body.length;let position=start;for(;position<bodyLength;){const code=body.charCodeAt(position);switch(code){case 65279:case 9:case 32:case 44:++position;continue;case 10:++position,++lexer.line,lexer.lineStart=position;continue;case 13:10===body.charCodeAt(position+1)?position+=2:++position,++lexer.line,lexer.lineStart=position;continue;case 35:return readComment(lexer,position);case 33:return createToken(lexer,TokenKind.BANG,position,position+1);case 36:return createToken(lexer,TokenKind.DOLLAR,position,position+1);case 38:return createToken(lexer,TokenKind.AMP,position,position+1);case 40:return createToken(lexer,TokenKind.PAREN_L,position,position+1);case 41:return createToken(lexer,TokenKind.PAREN_R,position,position+1);case 46:if(46===body.charCodeAt(position+1)&&46===body.charCodeAt(position+2))return createToken(lexer,TokenKind.SPREAD,position,position+3);break;case 58:return createToken(lexer,TokenKind.COLON,position,position+1);case 61:return createToken(lexer,TokenKind.EQUALS,position,position+1);case 64:return createToken(lexer,TokenKind.AT,position,position+1);case 91:return createToken(lexer,TokenKind.BRACKET_L,position,position+1);case 93:return createToken(lexer,TokenKind.BRACKET_R,position,position+1);case 123:return createToken(lexer,TokenKind.BRACE_L,position,position+1);case 124:return createToken(lexer,TokenKind.PIPE,position,position+1);case 125:return createToken(lexer,TokenKind.BRACE_R,position,position+1);case 34:return 34===body.charCodeAt(position+1)&&34===body.charCodeAt(position+2)?readBlockString(lexer,position):readString(lexer,position)}if(isDigit(code)||45===code)return readNumber(lexer,position,code);if(isNameStart(code))return readName(lexer,position);throw syntaxError(lexer.source,position,39===code?"Unexpected single quote character ('), did you mean to use a double quote (\")?":isUnicodeScalarValue(code)||isSupplementaryCodePoint(body,position)?`Unexpected character: ${printCodePointAt(lexer,position)}.`:`Invalid character: ${printCodePointAt(lexer,position)}.`)}return createToken(lexer,TokenKind.EOF,bodyLength,bodyLength)}function readComment(lexer,start){const body=lexer.source.body,bodyLength=body.length;let position=start+1;for(;position<bodyLength;){const code=body.charCodeAt(position);if(10===code||13===code)break;if(isUnicodeScalarValue(code))++position;else{if(!isSupplementaryCodePoint(body,position))break;position+=2}}return createToken(lexer,TokenKind.COMMENT,start,position,body.slice(start+1,position))}function readNumber(lexer,start,firstCode){const body=lexer.source.body;let position=start,code=firstCode,isFloat=!1;if(45===code&&(code=body.charCodeAt(++position)),48===code){if(code=body.charCodeAt(++position),isDigit(code))throw syntaxError(lexer.source,position,`Invalid number, unexpected digit after 0: ${printCodePointAt(lexer,position)}.`)}else position=readDigits(lexer,position,code),code=body.charCodeAt(position);if(46===code&&(isFloat=!0,code=body.charCodeAt(++position),position=readDigits(lexer,position,code),code=body.charCodeAt(position)),69!==code&&101!==code||(isFloat=!0,code=body.charCodeAt(++position),43!==code&&45!==code||(code=body.charCodeAt(++position)),position=readDigits(lexer,position,code),code=body.charCodeAt(position)),46===code||isNameStart(code))throw syntaxError(lexer.source,position,`Invalid number, expected digit but got: ${printCodePointAt(lexer,position)}.`);return createToken(lexer,isFloat?TokenKind.FLOAT:TokenKind.INT,start,position,body.slice(start,position))}function readDigits(lexer,start,firstCode){if(!isDigit(firstCode))throw syntaxError(lexer.source,start,`Invalid number, expected digit but got: ${printCodePointAt(lexer,start)}.`);const body=lexer.source.body;let position=start+1;for(;isDigit(body.charCodeAt(position));)++position;return position}function readString(lexer,start){const body=lexer.source.body,bodyLength=body.length;let position=start+1,chunkStart=position,value="";for(;position<bodyLength;){const code=body.charCodeAt(position);if(34===code)return value+=body.slice(chunkStart,position),createToken(lexer,TokenKind.STRING,start,position+1,value);if(92!==code){if(10===code||13===code)break;if(isUnicodeScalarValue(code))++position;else{if(!isSupplementaryCodePoint(body,position))throw syntaxError(lexer.source,position,`Invalid character within String: ${printCodePointAt(lexer,position)}.`);position+=2}}else{value+=body.slice(chunkStart,position);const escape=117===body.charCodeAt(position+1)?123===body.charCodeAt(position+2)?readEscapedUnicodeVariableWidth(lexer,position):readEscapedUnicodeFixedWidth(lexer,position):readEscapedCharacter(lexer,position);value+=escape.value,position+=escape.size,chunkStart=position}}throw syntaxError(lexer.source,position,"Unterminated string.")}function readEscapedUnicodeVariableWidth(lexer,position){const body=lexer.source.body;let point=0,size=3;for(;size<12;){const code=body.charCodeAt(position+size++);if(125===code){if(size<5||!isUnicodeScalarValue(point))break;return{value:String.fromCodePoint(point),size}}if(point=point<<4|readHexDigit(code),point<0)break}throw syntaxError(lexer.source,position,`Invalid Unicode escape sequence: "${body.slice(position,position+size)}".`)}function readEscapedUnicodeFixedWidth(lexer,position){const body=lexer.source.body,code=read16BitHexCode(body,position+2);if(isUnicodeScalarValue(code))return{value:String.fromCodePoint(code),size:6};if(isLeadingSurrogate(code)&&92===body.charCodeAt(position+6)&&117===body.charCodeAt(position+7)){const trailingCode=read16BitHexCode(body,position+8);if(isTrailingSurrogate(trailingCode))return{value:String.fromCodePoint(code,trailingCode),size:12}}throw syntaxError(lexer.source,position,`Invalid Unicode escape sequence: "${body.slice(position,position+6)}".`)}function read16BitHexCode(body,position){return readHexDigit(body.charCodeAt(position))<<12|readHexDigit(body.charCodeAt(position+1))<<8|readHexDigit(body.charCodeAt(position+2))<<4|readHexDigit(body.charCodeAt(position+3))}function readHexDigit(code){return code>=48&&code<=57?code-48:code>=65&&code<=70?code-55:code>=97&&code<=102?code-87:-1}function readEscapedCharacter(lexer,position){const body=lexer.source.body;switch(body.charCodeAt(position+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw syntaxError(lexer.source,position,`Invalid character escape sequence: "${body.slice(position,position+2)}".`)}function readBlockString(lexer,start){const body=lexer.source.body,bodyLength=body.length;let lineStart=lexer.lineStart,position=start+3,chunkStart=position,currentLine="";const blockLines=[];for(;position<bodyLength;){const code=body.charCodeAt(position);if(34===code&&34===body.charCodeAt(position+1)&&34===body.charCodeAt(position+2)){currentLine+=body.slice(chunkStart,position),blockLines.push(currentLine);const token=createToken(lexer,TokenKind.BLOCK_STRING,start,position+3,dedentBlockStringLines(blockLines).join("\n"));return lexer.line+=blockLines.length-1,lexer.lineStart=lineStart,token}if(92!==code||34!==body.charCodeAt(position+1)||34!==body.charCodeAt(position+2)||34!==body.charCodeAt(position+3))if(10!==code&&13!==code)if(isUnicodeScalarValue(code))++position;else{if(!isSupplementaryCodePoint(body,position))throw syntaxError(lexer.source,position,`Invalid character within String: ${printCodePointAt(lexer,position)}.`);position+=2}else currentLine+=body.slice(chunkStart,position),blockLines.push(currentLine),13===code&&10===body.charCodeAt(position+1)?position+=2:++position,currentLine="",chunkStart=position,lineStart=position;else currentLine+=body.slice(chunkStart,position),chunkStart=position+1,position+=4}throw syntaxError(lexer.source,position,"Unterminated string.")}function readName(lexer,start){const body=lexer.source.body,bodyLength=body.length;let position=start+1;for(;position<bodyLength;){if(!isNameContinue(body.charCodeAt(position)))break;++position}return createToken(lexer,TokenKind.NAME,start,position,body.slice(start,position))}const MAX_ARRAY_LENGTH=10,MAX_RECURSIVE_DEPTH=2;function inspect(value){return formatValue(value,[])}function formatValue(value,seenValues){switch(typeof value){case"string":return JSON.stringify(value);case"function":return value.name?`[function ${value.name}]`:"[function]";case"object":return function formatObjectValue(value,previouslySeenValues){if(null===value)return"null";if(previouslySeenValues.includes(value))return"[Circular]";const seenValues=[...previouslySeenValues,value];if(function isJSONable(value){return"function"==typeof value.toJSON}(value)){const jsonValue=value.toJSON();if(jsonValue!==value)return"string"==typeof jsonValue?jsonValue:formatValue(jsonValue,seenValues)}else if(Array.isArray(value))return function formatArray(array,seenValues){if(0===array.length)return"[]";if(seenValues.length>MAX_RECURSIVE_DEPTH)return"[Array]";const len=Math.min(MAX_ARRAY_LENGTH,array.length),remaining=array.length-len,items=[];for(let i=0;i<len;++i)items.push(formatValue(array[i],seenValues));1===remaining?items.push("... 1 more item"):remaining>1&&items.push(`... ${remaining} more items`);return"["+items.join(", ")+"]"}(value,seenValues);return function formatObject(object,seenValues){const entries=Object.entries(object);if(0===entries.length)return"{}";if(seenValues.length>MAX_RECURSIVE_DEPTH)return"["+function getObjectTag(object){const tag=Object.prototype.toString.call(object).replace(/^\[object /,"").replace(/]$/,"");if("Object"===tag&&"function"==typeof object.constructor){const name=object.constructor.name;if("string"==typeof name&&""!==name)return name}return tag}(object)+"]";const properties=entries.map((([key,value])=>key+": "+formatValue(value,seenValues)));return"{ "+properties.join(", ")+" }"}(value,seenValues)}(value,seenValues);default:return String(value)}}const instanceOf=globalThis.process&&!0?function instanceOf(value,constructor){return value instanceof constructor}:function instanceOf(value,constructor){if(value instanceof constructor)return!0;if("object"==typeof value&&null!==value){var _value$constructor;const className=constructor.prototype[Symbol.toStringTag];if(className===(Symbol.toStringTag in value?value[Symbol.toStringTag]:null===(_value$constructor=value.constructor)||void 0===_value$constructor?void 0:_value$constructor.name)){const stringifiedValue=inspect(value);throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`)}}return!1};class Source{constructor(body,name="GraphQL request",locationOffset={line:1,column:1}){"string"==typeof body||devAssert(!1,`Body must be a string. Received: ${inspect(body)}.`),this.body=body,this.name=name,this.locationOffset=locationOffset,this.locationOffset.line>0||devAssert(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||devAssert(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}function isSource(source){return instanceOf(source,Source)}function parse(source,options){return new Parser(source,options).parseDocument()}function parseValue(source,options){const parser=new Parser(source,options);parser.expectToken(TokenKind.SOF);const value=parser.parseValueLiteral(!1);return parser.expectToken(TokenKind.EOF),value}function parseConstValue(source,options){const parser=new Parser(source,options);parser.expectToken(TokenKind.SOF);const value=parser.parseConstValueLiteral();return parser.expectToken(TokenKind.EOF),value}function parseType(source,options){const parser=new Parser(source,options);parser.expectToken(TokenKind.SOF);const type=parser.parseTypeReference();return parser.expectToken(TokenKind.EOF),type}class Parser{constructor(source,options={}){const sourceObj=isSource(source)?source:new Source(source);this._lexer=new Lexer(sourceObj),this._options=options,this._tokenCounter=0}parseName(){const token=this.expectToken(TokenKind.NAME);return this.node(token,{kind:Kind.NAME,value:token.value})}parseDocument(){return this.node(this._lexer.token,{kind:Kind.DOCUMENT,definitions:this.many(TokenKind.SOF,this.parseDefinition,TokenKind.EOF)})}parseDefinition(){if(this.peek(TokenKind.BRACE_L))return this.parseOperationDefinition();const hasDescription=this.peekDescription(),keywordToken=hasDescription?this._lexer.lookahead():this._lexer.token;if(keywordToken.kind===TokenKind.NAME){switch(keywordToken.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(hasDescription)throw syntaxError(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(keywordToken.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(keywordToken)}parseOperationDefinition(){const start=this._lexer.token;if(this.peek(TokenKind.BRACE_L))return this.node(start,{kind:Kind.OPERATION_DEFINITION,operation:OperationTypeNode.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const operation=this.parseOperationType();let name;return this.peek(TokenKind.NAME)&&(name=this.parseName()),this.node(start,{kind:Kind.OPERATION_DEFINITION,operation,name,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const operationToken=this.expectToken(TokenKind.NAME);switch(operationToken.value){case"query":return OperationTypeNode.QUERY;case"mutation":return OperationTypeNode.MUTATION;case"subscription":return OperationTypeNode.SUBSCRIPTION}throw this.unexpected(operationToken)}parseVariableDefinitions(){return this.optionalMany(TokenKind.PAREN_L,this.parseVariableDefinition,TokenKind.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:Kind.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(TokenKind.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(TokenKind.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const start=this._lexer.token;return this.expectToken(TokenKind.DOLLAR),this.node(start,{kind:Kind.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:Kind.SELECTION_SET,selections:this.many(TokenKind.BRACE_L,this.parseSelection,TokenKind.BRACE_R)})}parseSelection(){return this.peek(TokenKind.SPREAD)?this.parseFragment():this.parseField()}parseField(){const start=this._lexer.token,nameOrAlias=this.parseName();let alias,name;return this.expectOptionalToken(TokenKind.COLON)?(alias=nameOrAlias,name=this.parseName()):name=nameOrAlias,this.node(start,{kind:Kind.FIELD,alias,name,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(TokenKind.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(isConst){const item=isConst?this.parseConstArgument:this.parseArgument;return this.optionalMany(TokenKind.PAREN_L,item,TokenKind.PAREN_R)}parseArgument(isConst=!1){const start=this._lexer.token,name=this.parseName();return this.expectToken(TokenKind.COLON),this.node(start,{kind:Kind.ARGUMENT,name,value:this.parseValueLiteral(isConst)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const start=this._lexer.token;this.expectToken(TokenKind.SPREAD);const hasTypeCondition=this.expectOptionalKeyword("on");return!hasTypeCondition&&this.peek(TokenKind.NAME)?this.node(start,{kind:Kind.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(start,{kind:Kind.INLINE_FRAGMENT,typeCondition:hasTypeCondition?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const start=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(start,{kind:Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(start,{kind:Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}parseValueLiteral(isConst){const token=this._lexer.token;switch(token.kind){case TokenKind.BRACKET_L:return this.parseList(isConst);case TokenKind.BRACE_L:return this.parseObject(isConst);case TokenKind.INT:return this.advanceLexer(),this.node(token,{kind:Kind.INT,value:token.value});case TokenKind.FLOAT:return this.advanceLexer(),this.node(token,{kind:Kind.FLOAT,value:token.value});case TokenKind.STRING:case TokenKind.BLOCK_STRING:return this.parseStringLiteral();case TokenKind.NAME:switch(this.advanceLexer(),token.value){case"true":return this.node(token,{kind:Kind.BOOLEAN,value:!0});case"false":return this.node(token,{kind:Kind.BOOLEAN,value:!1});case"null":return this.node(token,{kind:Kind.NULL});default:return this.node(token,{kind:Kind.ENUM,value:token.value})}case TokenKind.DOLLAR:if(isConst){if(this.expectToken(TokenKind.DOLLAR),this._lexer.token.kind===TokenKind.NAME){const varName=this._lexer.token.value;throw syntaxError(this._lexer.source,token.start,`Unexpected variable "$${varName}" in constant value.`)}throw this.unexpected(token)}return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const token=this._lexer.token;return this.advanceLexer(),this.node(token,{kind:Kind.STRING,value:token.value,block:token.kind===TokenKind.BLOCK_STRING})}parseList(isConst){return this.node(this._lexer.token,{kind:Kind.LIST,values:this.any(TokenKind.BRACKET_L,(()=>this.parseValueLiteral(isConst)),TokenKind.BRACKET_R)})}parseObject(isConst){return this.node(this._lexer.token,{kind:Kind.OBJECT,fields:this.any(TokenKind.BRACE_L,(()=>this.parseObjectField(isConst)),TokenKind.BRACE_R)})}parseObjectField(isConst){const start=this._lexer.token,name=this.parseName();return this.expectToken(TokenKind.COLON),this.node(start,{kind:Kind.OBJECT_FIELD,name,value:this.parseValueLiteral(isConst)})}parseDirectives(isConst){const directives=[];for(;this.peek(TokenKind.AT);)directives.push(this.parseDirective(isConst));return directives}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(isConst){const start=this._lexer.token;return this.expectToken(TokenKind.AT),this.node(start,{kind:Kind.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(isConst)})}parseTypeReference(){const start=this._lexer.token;let type;if(this.expectOptionalToken(TokenKind.BRACKET_L)){const innerType=this.parseTypeReference();this.expectToken(TokenKind.BRACKET_R),type=this.node(start,{kind:Kind.LIST_TYPE,type:innerType})}else type=this.parseNamedType();return this.expectOptionalToken(TokenKind.BANG)?this.node(start,{kind:Kind.NON_NULL_TYPE,type}):type}parseNamedType(){return this.node(this._lexer.token,{kind:Kind.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(TokenKind.STRING)||this.peek(TokenKind.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("schema");const directives=this.parseConstDirectives(),operationTypes=this.many(TokenKind.BRACE_L,this.parseOperationTypeDefinition,TokenKind.BRACE_R);return this.node(start,{kind:Kind.SCHEMA_DEFINITION,description,directives,operationTypes})}parseOperationTypeDefinition(){const start=this._lexer.token,operation=this.parseOperationType();this.expectToken(TokenKind.COLON);const type=this.parseNamedType();return this.node(start,{kind:Kind.OPERATION_TYPE_DEFINITION,operation,type})}parseScalarTypeDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("scalar");const name=this.parseName(),directives=this.parseConstDirectives();return this.node(start,{kind:Kind.SCALAR_TYPE_DEFINITION,description,name,directives})}parseObjectTypeDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("type");const name=this.parseName(),interfaces=this.parseImplementsInterfaces(),directives=this.parseConstDirectives(),fields=this.parseFieldsDefinition();return this.node(start,{kind:Kind.OBJECT_TYPE_DEFINITION,description,name,interfaces,directives,fields})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(TokenKind.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(TokenKind.BRACE_L,this.parseFieldDefinition,TokenKind.BRACE_R)}parseFieldDefinition(){const start=this._lexer.token,description=this.parseDescription(),name=this.parseName(),args=this.parseArgumentDefs();this.expectToken(TokenKind.COLON);const type=this.parseTypeReference(),directives=this.parseConstDirectives();return this.node(start,{kind:Kind.FIELD_DEFINITION,description,name,arguments:args,type,directives})}parseArgumentDefs(){return this.optionalMany(TokenKind.PAREN_L,this.parseInputValueDef,TokenKind.PAREN_R)}parseInputValueDef(){const start=this._lexer.token,description=this.parseDescription(),name=this.parseName();this.expectToken(TokenKind.COLON);const type=this.parseTypeReference();let defaultValue;this.expectOptionalToken(TokenKind.EQUALS)&&(defaultValue=this.parseConstValueLiteral());const directives=this.parseConstDirectives();return this.node(start,{kind:Kind.INPUT_VALUE_DEFINITION,description,name,type,defaultValue,directives})}parseInterfaceTypeDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("interface");const name=this.parseName(),interfaces=this.parseImplementsInterfaces(),directives=this.parseConstDirectives(),fields=this.parseFieldsDefinition();return this.node(start,{kind:Kind.INTERFACE_TYPE_DEFINITION,description,name,interfaces,directives,fields})}parseUnionTypeDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("union");const name=this.parseName(),directives=this.parseConstDirectives(),types=this.parseUnionMemberTypes();return this.node(start,{kind:Kind.UNION_TYPE_DEFINITION,description,name,directives,types})}parseUnionMemberTypes(){return this.expectOptionalToken(TokenKind.EQUALS)?this.delimitedMany(TokenKind.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("enum");const name=this.parseName(),directives=this.parseConstDirectives(),values=this.parseEnumValuesDefinition();return this.node(start,{kind:Kind.ENUM_TYPE_DEFINITION,description,name,directives,values})}parseEnumValuesDefinition(){return this.optionalMany(TokenKind.BRACE_L,this.parseEnumValueDefinition,TokenKind.BRACE_R)}parseEnumValueDefinition(){const start=this._lexer.token,description=this.parseDescription(),name=this.parseEnumValueName(),directives=this.parseConstDirectives();return this.node(start,{kind:Kind.ENUM_VALUE_DEFINITION,description,name,directives})}parseEnumValueName(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw syntaxError(this._lexer.source,this._lexer.token.start,`${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("input");const name=this.parseName(),directives=this.parseConstDirectives(),fields=this.parseInputFieldsDefinition();return this.node(start,{kind:Kind.INPUT_OBJECT_TYPE_DEFINITION,description,name,directives,fields})}parseInputFieldsDefinition(){return this.optionalMany(TokenKind.BRACE_L,this.parseInputValueDef,TokenKind.BRACE_R)}parseTypeSystemExtension(){const keywordToken=this._lexer.lookahead();if(keywordToken.kind===TokenKind.NAME)switch(keywordToken.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(keywordToken)}parseSchemaExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const directives=this.parseConstDirectives(),operationTypes=this.optionalMany(TokenKind.BRACE_L,this.parseOperationTypeDefinition,TokenKind.BRACE_R);if(0===directives.length&&0===operationTypes.length)throw this.unexpected();return this.node(start,{kind:Kind.SCHEMA_EXTENSION,directives,operationTypes})}parseScalarTypeExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const name=this.parseName(),directives=this.parseConstDirectives();if(0===directives.length)throw this.unexpected();return this.node(start,{kind:Kind.SCALAR_TYPE_EXTENSION,name,directives})}parseObjectTypeExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const name=this.parseName(),interfaces=this.parseImplementsInterfaces(),directives=this.parseConstDirectives(),fields=this.parseFieldsDefinition();if(0===interfaces.length&&0===directives.length&&0===fields.length)throw this.unexpected();return this.node(start,{kind:Kind.OBJECT_TYPE_EXTENSION,name,interfaces,directives,fields})}parseInterfaceTypeExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const name=this.parseName(),interfaces=this.parseImplementsInterfaces(),directives=this.parseConstDirectives(),fields=this.parseFieldsDefinition();if(0===interfaces.length&&0===directives.length&&0===fields.length)throw this.unexpected();return this.node(start,{kind:Kind.INTERFACE_TYPE_EXTENSION,name,interfaces,directives,fields})}parseUnionTypeExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const name=this.parseName(),directives=this.parseConstDirectives(),types=this.parseUnionMemberTypes();if(0===directives.length&&0===types.length)throw this.unexpected();return this.node(start,{kind:Kind.UNION_TYPE_EXTENSION,name,directives,types})}parseEnumTypeExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const name=this.parseName(),directives=this.parseConstDirectives(),values=this.parseEnumValuesDefinition();if(0===directives.length&&0===values.length)throw this.unexpected();return this.node(start,{kind:Kind.ENUM_TYPE_EXTENSION,name,directives,values})}parseInputObjectTypeExtension(){const start=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const name=this.parseName(),directives=this.parseConstDirectives(),fields=this.parseInputFieldsDefinition();if(0===directives.length&&0===fields.length)throw this.unexpected();return this.node(start,{kind:Kind.INPUT_OBJECT_TYPE_EXTENSION,name,directives,fields})}parseDirectiveDefinition(){const start=this._lexer.token,description=this.parseDescription();this.expectKeyword("directive"),this.expectToken(TokenKind.AT);const name=this.parseName(),args=this.parseArgumentDefs(),repeatable=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const locations=this.parseDirectiveLocations();return this.node(start,{kind:Kind.DIRECTIVE_DEFINITION,description,name,arguments:args,repeatable,locations})}parseDirectiveLocations(){return this.delimitedMany(TokenKind.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const start=this._lexer.token,name=this.parseName();if(Object.prototype.hasOwnProperty.call(DirectiveLocation,name.value))return name;throw this.unexpected(start)}node(startToken,node){return!0!==this._options.noLocation&&(node.loc=new Location(startToken,this._lexer.lastToken,this._lexer.source)),node}peek(kind){return this._lexer.token.kind===kind}expectToken(kind){const token=this._lexer.token;if(token.kind===kind)return this.advanceLexer(),token;throw syntaxError(this._lexer.source,token.start,`Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`)}expectOptionalToken(kind){return this._lexer.token.kind===kind&&(this.advanceLexer(),!0)}expectKeyword(value){const token=this._lexer.token;if(token.kind!==TokenKind.NAME||token.value!==value)throw syntaxError(this._lexer.source,token.start,`Expected "${value}", found ${getTokenDesc(token)}.`);this.advanceLexer()}expectOptionalKeyword(value){const token=this._lexer.token;return token.kind===TokenKind.NAME&&token.value===value&&(this.advanceLexer(),!0)}unexpected(atToken){const token=null!=atToken?atToken:this._lexer.token;return syntaxError(this._lexer.source,token.start,`Unexpected ${getTokenDesc(token)}.`)}any(openKind,parseFn,closeKind){this.expectToken(openKind);const nodes=[];for(;!this.expectOptionalToken(closeKind);)nodes.push(parseFn.call(this));return nodes}optionalMany(openKind,parseFn,closeKind){if(this.expectOptionalToken(openKind)){const nodes=[];do{nodes.push(parseFn.call(this))}while(!this.expectOptionalToken(closeKind));return nodes}return[]}many(openKind,parseFn,closeKind){this.expectToken(openKind);const nodes=[];do{nodes.push(parseFn.call(this))}while(!this.expectOptionalToken(closeKind));return nodes}delimitedMany(delimiterKind,parseFn){this.expectOptionalToken(delimiterKind);const nodes=[];do{nodes.push(parseFn.call(this))}while(this.expectOptionalToken(delimiterKind));return nodes}advanceLexer(){const{maxTokens}=this._options,token=this._lexer.advance();if(void 0!==maxTokens&&token.kind!==TokenKind.EOF&&(++this._tokenCounter,this._tokenCounter>maxTokens))throw syntaxError(this._lexer.source,token.start,`Document contains more that ${maxTokens} tokens. Parsing aborted.`)}}function getTokenDesc(token){const value=token.value;return getTokenKindDesc(token.kind)+(null!=value?` "${value}"`:"")}function getTokenKindDesc(kind){return isPunctuatorTokenKind(kind)?`"${kind}"`:kind}const MAX_SUGGESTIONS=5;function didYouMean(firstArg,secondArg){const[subMessage,suggestionsArg]=secondArg?[firstArg,secondArg]:[void 0,firstArg];let message=" Did you mean ";subMessage&&(message+=subMessage+" ");const suggestions=suggestionsArg.map((x=>`"${x}"`));switch(suggestions.length){case 0:return"";case 1:return message+suggestions[0]+"?";case 2:return message+suggestions[0]+" or "+suggestions[1]+"?"}const selected=suggestions.slice(0,MAX_SUGGESTIONS),lastItem=selected.pop();return message+selected.join(", ")+", or "+lastItem+"?"}function identityFunc(x){return x}function keyMap(list,keyFn){const result=Object.create(null);for(const item of list)result[keyFn(item)]=item;return result}function keyValMap(list,keyFn,valFn){const result=Object.create(null);for(const item of list)result[keyFn(item)]=valFn(item);return result}function mapValue(map,fn){const result=Object.create(null);for(const key of Object.keys(map))result[key]=fn(map[key],key);return result}function naturalCompare(aStr,bStr){let aIndex=0,bIndex=0;for(;aIndex<aStr.length&&bIndex<bStr.length;){let aChar=aStr.charCodeAt(aIndex),bChar=bStr.charCodeAt(bIndex);if(naturalCompare_isDigit(aChar)&&naturalCompare_isDigit(bChar)){let aNum=0;do{++aIndex,aNum=10*aNum+aChar-DIGIT_0,aChar=aStr.charCodeAt(aIndex)}while(naturalCompare_isDigit(aChar)&&aNum>0);let bNum=0;do{++bIndex,bNum=10*bNum+bChar-DIGIT_0,bChar=bStr.charCodeAt(bIndex)}while(naturalCompare_isDigit(bChar)&&bNum>0);if(aNum<bNum)return-1;if(aNum>bNum)return 1}else{if(aChar<bChar)return-1;if(aChar>bChar)return 1;++aIndex,++bIndex}}return aStr.length-bStr.length}const DIGIT_0=48,DIGIT_9=57;function naturalCompare_isDigit(code){return!isNaN(code)&&DIGIT_0<=code&&code<=DIGIT_9}function suggestionList(input,options){const optionsByDistance=Object.create(null),lexicalDistance=new LexicalDistance(input),threshold=Math.floor(.4*input.length)+1;for(const option of options){const distance=lexicalDistance.measure(option,threshold);void 0!==distance&&(optionsByDistance[option]=distance)}return Object.keys(optionsByDistance).sort(((a,b)=>{const distanceDiff=optionsByDistance[a]-optionsByDistance[b];return 0!==distanceDiff?distanceDiff:naturalCompare(a,b)}))}class LexicalDistance{constructor(input){this._input=input,this._inputLowerCase=input.toLowerCase(),this._inputArray=stringToArray(this._inputLowerCase),this._rows=[new Array(input.length+1).fill(0),new Array(input.length+1).fill(0),new Array(input.length+1).fill(0)]}measure(option,threshold){if(this._input===option)return 0;const optionLowerCase=option.toLowerCase();if(this._inputLowerCase===optionLowerCase)return 1;let a=stringToArray(optionLowerCase),b=this._inputArray;if(a.length<b.length){const tmp=a;a=b,b=tmp}const aLength=a.length,bLength=b.length;if(aLength-bLength>threshold)return;const rows=this._rows;for(let j=0;j<=bLength;j++)rows[0][j]=j;for(let i=1;i<=aLength;i++){const upRow=rows[(i-1)%3],currentRow=rows[i%3];let smallestCell=currentRow[0]=i;for(let j=1;j<=bLength;j++){const cost=a[i-1]===b[j-1]?0:1;let currentCell=Math.min(upRow[j]+1,currentRow[j-1]+1,upRow[j-1]+cost);if(i>1&&j>1&&a[i-1]===b[j-2]&&a[i-2]===b[j-1]){const doubleDiagonalCell=rows[(i-2)%3][j-2];currentCell=Math.min(currentCell,doubleDiagonalCell+1)}currentCell<smallestCell&&(smallestCell=currentCell),currentRow[j]=currentCell}if(smallestCell>threshold)return}const distance=rows[aLength%3][bLength];return distance<=threshold?distance:void 0}}function stringToArray(str){const strLength=str.length,array=new Array(strLength);for(let i=0;i<strLength;++i)array[i]=str.charCodeAt(i);return array}function toObjMap(obj){if(null==obj)return Object.create(null);if(null===Object.getPrototypeOf(obj))return obj;const map=Object.create(null);for(const[key,value]of Object.entries(obj))map[key]=value;return map}const escapedRegExp=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function escapedReplacer(str){return escapeSequences[str.charCodeAt(0)]}const escapeSequences=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"],BREAK=Object.freeze({});function visit(root,visitor,visitorKeys=QueryDocumentKeys){const enterLeaveMap=new Map;for(const kind of Object.values(Kind))enterLeaveMap.set(kind,getEnterLeaveForKind(visitor,kind));let stack,key,parent,inArray=Array.isArray(root),keys=[root],index=-1,edits=[],node=root;const path=[],ancestors=[];do{index++;const isLeaving=index===keys.length,isEdited=isLeaving&&0!==edits.length;if(isLeaving){if(key=0===ancestors.length?void 0:path[path.length-1],node=parent,parent=ancestors.pop(),isEdited)if(inArray){node=node.slice();let editOffset=0;for(const[editKey,editValue]of edits){const arrayKey=editKey-editOffset;null===editValue?(node.splice(arrayKey,1),editOffset++):node[arrayKey]=editValue}}else{node=Object.defineProperties({},Object.getOwnPropertyDescriptors(node));for(const[editKey,editValue]of edits)node[editKey]=editValue}index=stack.index,keys=stack.keys,edits=stack.edits,inArray=stack.inArray,stack=stack.prev}else if(parent){if(key=inArray?index:keys[index],node=parent[key],null==node)continue;path.push(key)}let result;if(!Array.isArray(node)){var _enterLeaveMap$get,_enterLeaveMap$get2;isNode(node)||devAssert(!1,`Invalid AST Node: ${inspect(node)}.`);const visitFn=isLeaving?null===(_enterLeaveMap$get=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get?void 0:_enterLeaveMap$get.leave:null===(_enterLeaveMap$get2=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get2?void 0:_enterLeaveMap$get2.enter;if(result=null==visitFn?void 0:visitFn.call(visitor,node,key,parent,path,ancestors),result===BREAK)break;if(!1===result){if(!isLeaving){path.pop();continue}}else if(void 0!==result&&(edits.push([key,result]),!isLeaving)){if(!isNode(result)){path.pop();continue}node=result}}var _node$kind;if(void 0===result&&isEdited&&edits.push([key,node]),isLeaving)path.pop();else stack={inArray,index,keys,edits,prev:stack},inArray=Array.isArray(node),keys=inArray?node:null!==(_node$kind=visitorKeys[node.kind])&&void 0!==_node$kind?_node$kind:[],index=-1,edits=[],parent&&ancestors.push(parent),parent=node}while(void 0!==stack);return 0!==edits.length?edits[edits.length-1][1]:root}function visitInParallel(visitors){const skipping=new Array(visitors.length).fill(null),mergedVisitor=Object.create(null);for(const kind of Object.values(Kind)){let hasVisitor=!1;const enterList=new Array(visitors.length).fill(void 0),leaveList=new Array(visitors.length).fill(void 0);for(let i=0;i<visitors.length;++i){const{enter,leave}=getEnterLeaveForKind(visitors[i],kind);hasVisitor||(hasVisitor=null!=enter||null!=leave),enterList[i]=enter,leaveList[i]=leave}if(!hasVisitor)continue;const mergedEnterLeave={enter(...args){const node=args[0];for(let i=0;i<visitors.length;i++)if(null===skipping[i]){var _enterList$i;const result=null===(_enterList$i=enterList[i])||void 0===_enterList$i?void 0:_enterList$i.apply(visitors[i],args);if(!1===result)skipping[i]=node;else if(result===BREAK)skipping[i]=BREAK;else if(void 0!==result)return result}},leave(...args){const node=args[0];for(let i=0;i<visitors.length;i++)if(null===skipping[i]){var _leaveList$i;const result=null===(_leaveList$i=leaveList[i])||void 0===_leaveList$i?void 0:_leaveList$i.apply(visitors[i],args);if(result===BREAK)skipping[i]=BREAK;else if(void 0!==result&&!1!==result)return result}else skipping[i]===node&&(skipping[i]=null)}};mergedVisitor[kind]=mergedEnterLeave}return mergedVisitor}function getEnterLeaveForKind(visitor,kind){const kindVisitor=visitor[kind];return"object"==typeof kindVisitor?kindVisitor:"function"==typeof kindVisitor?{enter:kindVisitor,leave:void 0}:{enter:visitor.enter,leave:visitor.leave}}function getVisitFn(visitor,kind,isLeaving){const{enter,leave}=getEnterLeaveForKind(visitor,kind);return isLeaving?leave:enter}function print(ast){return visit(ast,printDocASTReducer)}const printDocASTReducer={Name:{leave:node=>node.value},Variable:{leave:node=>"$"+node.name},Document:{leave:node=>join(node.definitions,"\n\n")},OperationDefinition:{leave(node){const varDefs=wrap("(",join(node.variableDefinitions,", "),")"),prefix=join([node.operation,join([node.name,varDefs]),join(node.directives," ")]," ");return("query"===prefix?"":prefix+" ")+node.selectionSet}},VariableDefinition:{leave:({variable,type,defaultValue,directives})=>variable+": "+type+wrap(" = ",defaultValue)+wrap(" ",join(directives," "))},SelectionSet:{leave:({selections})=>block(selections)},Field:{leave({alias,name,arguments:args,directives,selectionSet}){const prefix=wrap("",alias,": ")+name;let argsLine=prefix+wrap("(",join(args,", "),")");return argsLine.length>80&&(argsLine=prefix+wrap("(\n",indent(join(args,"\n")),"\n)")),join([argsLine,join(directives," "),selectionSet]," ")}},Argument:{leave:({name,value})=>name+": "+value},FragmentSpread:{leave:({name,directives})=>"..."+name+wrap(" ",join(directives," "))},InlineFragment:{leave:({typeCondition,directives,selectionSet})=>join(["...",wrap("on ",typeCondition),join(directives," "),selectionSet]," ")},FragmentDefinition:{leave:({name,typeCondition,variableDefinitions,directives,selectionSet})=>`fragment ${name}${wrap("(",join(variableDefinitions,", "),")")} on ${typeCondition} ${wrap("",join(directives," ")," ")}`+selectionSet},IntValue:{leave:({value})=>value},FloatValue:{leave:({value})=>value},StringValue:{leave:({value,block:isBlockString})=>isBlockString?printBlockString(value):function printString(str){return`"${str.replace(escapedRegExp,escapedReplacer)}"`}(value)},BooleanValue:{leave:({value})=>value?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value})=>value},ListValue:{leave:({values})=>"["+join(values,", ")+"]"},ObjectValue:{leave:({fields})=>"{"+join(fields,", ")+"}"},ObjectField:{leave:({name,value})=>name+": "+value},Directive:{leave:({name,arguments:args})=>"@"+name+wrap("(",join(args,", "),")")},NamedType:{leave:({name})=>name},ListType:{leave:({type})=>"["+type+"]"},NonNullType:{leave:({type})=>type+"!"},SchemaDefinition:{leave:({description,directives,operationTypes})=>wrap("",description,"\n")+join(["schema",join(directives," "),block(operationTypes)]," ")},OperationTypeDefinition:{leave:({operation,type})=>operation+": "+type},ScalarTypeDefinition:{leave:({description,name,directives})=>wrap("",description,"\n")+join(["scalar",name,join(directives," ")]," ")},ObjectTypeDefinition:{leave:({description,name,interfaces,directives,fields})=>wrap("",description,"\n")+join(["type",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},FieldDefinition:{leave:({description,name,arguments:args,type,directives})=>wrap("",description,"\n")+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+": "+type+wrap(" ",join(directives," "))},InputValueDefinition:{leave:({description,name,type,defaultValue,directives})=>wrap("",description,"\n")+join([name+": "+type,wrap("= ",defaultValue),join(directives," ")]," ")},InterfaceTypeDefinition:{leave:({description,name,interfaces,directives,fields})=>wrap("",description,"\n")+join(["interface",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},UnionTypeDefinition:{leave:({description,name,directives,types})=>wrap("",description,"\n")+join(["union",name,join(directives," "),wrap("= ",join(types," | "))]," ")},EnumTypeDefinition:{leave:({description,name,directives,values})=>wrap("",description,"\n")+join(["enum",name,join(directives," "),block(values)]," ")},EnumValueDefinition:{leave:({description,name,directives})=>wrap("",description,"\n")+join([name,join(directives," ")]," ")},InputObjectTypeDefinition:{leave:({description,name,directives,fields})=>wrap("",description,"\n")+join(["input",name,join(directives," "),block(fields)]," ")},DirectiveDefinition:{leave:({description,name,arguments:args,repeatable,locations})=>wrap("",description,"\n")+"directive @"+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+(repeatable?" repeatable":"")+" on "+join(locations," | ")},SchemaExtension:{leave:({directives,operationTypes})=>join(["extend schema",join(directives," "),block(operationTypes)]," ")},ScalarTypeExtension:{leave:({name,directives})=>join(["extend scalar",name,join(directives," ")]," ")},ObjectTypeExtension:{leave:({name,interfaces,directives,fields})=>join(["extend type",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},InterfaceTypeExtension:{leave:({name,interfaces,directives,fields})=>join(["extend interface",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},UnionTypeExtension:{leave:({name,directives,types})=>join(["extend union",name,join(directives," "),wrap("= ",join(types," | "))]," ")},EnumTypeExtension:{leave:({name,directives,values})=>join(["extend enum",name,join(directives," "),block(values)]," ")},InputObjectTypeExtension:{leave:({name,directives,fields})=>join(["extend input",name,join(directives," "),block(fields)]," ")}};function join(maybeArray,separator=""){var _maybeArray$filter$jo;return null!==(_maybeArray$filter$jo=null==maybeArray?void 0:maybeArray.filter((x=>x)).join(separator))&&void 0!==_maybeArray$filter$jo?_maybeArray$filter$jo:""}function block(array){return wrap("{\n",indent(join(array,"\n")),"\n}")}function wrap(start,maybeString,end=""){return null!=maybeString&&""!==maybeString?start+maybeString+end:""}function indent(str){return wrap("  ",str.replace(/\n/g,"\n  "))}function hasMultilineItems(maybeArray){var _maybeArray$some;return null!==(_maybeArray$some=null==maybeArray?void 0:maybeArray.some((str=>str.includes("\n"))))&&void 0!==_maybeArray$some&&_maybeArray$some}function valueFromASTUntyped(valueNode,variables){switch(valueNode.kind){case Kind.NULL:return null;case Kind.INT:return parseInt(valueNode.value,10);case Kind.FLOAT:return parseFloat(valueNode.value);case Kind.STRING:case Kind.ENUM:case Kind.BOOLEAN:return valueNode.value;case Kind.LIST:return valueNode.values.map((node=>valueFromASTUntyped(node,variables)));case Kind.OBJECT:return keyValMap(valueNode.fields,(field=>field.name.value),(field=>valueFromASTUntyped(field.value,variables)));case Kind.VARIABLE:return null==variables?void 0:variables[valueNode.name.value]}}function assertName(name){if(null!=name||devAssert(!1,"Must provide name."),"string"==typeof name||devAssert(!1,"Expected name to be a string."),0===name.length)throw new GraphQLError("Expected name to be a non-empty string.");for(let i=1;i<name.length;++i)if(!isNameContinue(name.charCodeAt(i)))throw new GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${name}" does not.`);if(!isNameStart(name.charCodeAt(0)))throw new GraphQLError(`Names must start with [_a-zA-Z] but "${name}" does not.`);return name}function assertEnumValueName(name){if("true"===name||"false"===name||"null"===name)throw new GraphQLError(`Enum values cannot be named: ${name}`);return assertName(name)}function isType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isInputObjectType(type)||isListType(type)||isNonNullType(type)}function assertType(type){if(!isType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);return type}function isScalarType(type){return instanceOf(type,GraphQLScalarType)}function assertScalarType(type){if(!isScalarType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);return type}function isObjectType(type){return instanceOf(type,GraphQLObjectType)}function assertObjectType(type){if(!isObjectType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);return type}function isInterfaceType(type){return instanceOf(type,GraphQLInterfaceType)}function assertInterfaceType(type){if(!isInterfaceType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Interface type.`);return type}function isUnionType(type){return instanceOf(type,GraphQLUnionType)}function assertUnionType(type){if(!isUnionType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);return type}function isEnumType(type){return instanceOf(type,GraphQLEnumType)}function assertEnumType(type){if(!isEnumType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);return type}function isInputObjectType(type){return instanceOf(type,GraphQLInputObjectType)}function assertInputObjectType(type){if(!isInputObjectType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Input Object type.`);return type}function isListType(type){return instanceOf(type,GraphQLList)}function assertListType(type){if(!isListType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);return type}function isNonNullType(type){return instanceOf(type,GraphQLNonNull)}function assertNonNullType(type){if(!isNonNullType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);return type}function isInputType(type){return isScalarType(type)||isEnumType(type)||isInputObjectType(type)||isWrappingType(type)&&isInputType(type.ofType)}function assertInputType(type){if(!isInputType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);return type}function isOutputType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isWrappingType(type)&&isOutputType(type.ofType)}function assertOutputType(type){if(!isOutputType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);return type}function isLeafType(type){return isScalarType(type)||isEnumType(type)}function assertLeafType(type){if(!isLeafType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);return type}function isCompositeType(type){return isObjectType(type)||isInterfaceType(type)||isUnionType(type)}function assertCompositeType(type){if(!isCompositeType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL composite type.`);return type}function isAbstractType(type){return isInterfaceType(type)||isUnionType(type)}function assertAbstractType(type){if(!isAbstractType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);return type}class GraphQLList{constructor(ofType){isType(ofType)||devAssert(!1,`Expected ${inspect(ofType)} to be a GraphQL type.`),this.ofType=ofType}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class GraphQLNonNull{constructor(ofType){isNullableType(ofType)||devAssert(!1,`Expected ${inspect(ofType)} to be a GraphQL nullable type.`),this.ofType=ofType}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function isWrappingType(type){return isListType(type)||isNonNullType(type)}function assertWrappingType(type){if(!isWrappingType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);return type}function isNullableType(type){return isType(type)&&!isNonNullType(type)}function assertNullableType(type){if(!isNullableType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);return type}function getNullableType(type){if(type)return isNonNullType(type)?type.ofType:type}function isNamedType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isInputObjectType(type)}function assertNamedType(type){if(!isNamedType(type))throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);return type}function getNamedType(type){if(type){let unwrappedType=type;for(;isWrappingType(unwrappedType);)unwrappedType=unwrappedType.ofType;return unwrappedType}}function resolveReadonlyArrayThunk(thunk){return"function"==typeof thunk?thunk():thunk}function resolveObjMapThunk(thunk){return"function"==typeof thunk?thunk():thunk}class GraphQLScalarType{constructor(config){var _config$parseValue,_config$serialize,_config$parseLiteral,_config$extensionASTN;const parseValue=null!==(_config$parseValue=config.parseValue)&&void 0!==_config$parseValue?_config$parseValue:identityFunc;this.name=assertName(config.name),this.description=config.description,this.specifiedByURL=config.specifiedByURL,this.serialize=null!==(_config$serialize=config.serialize)&&void 0!==_config$serialize?_config$serialize:identityFunc,this.parseValue=parseValue,this.parseLiteral=null!==(_config$parseLiteral=config.parseLiteral)&&void 0!==_config$parseLiteral?_config$parseLiteral:(node,variables)=>parseValue(valueFromASTUntyped(node,variables)),this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN=config.extensionASTNodes)&&void 0!==_config$extensionASTN?_config$extensionASTN:[],null==config.specifiedByURL||"string"==typeof config.specifiedByURL||devAssert(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${inspect(config.specifiedByURL)}.`),null==config.serialize||"function"==typeof config.serialize||devAssert(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),config.parseLiteral&&("function"==typeof config.parseValue&&"function"==typeof config.parseLiteral||devAssert(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class GraphQLObjectType{constructor(config){var _config$extensionASTN2;this.name=assertName(config.name),this.description=config.description,this.isTypeOf=config.isTypeOf,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN2=config.extensionASTNodes)&&void 0!==_config$extensionASTN2?_config$extensionASTN2:[],this._fields=()=>defineFieldMap(config),this._interfaces=()=>defineInterfaces(config),null==config.isTypeOf||"function"==typeof config.isTypeOf||devAssert(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${inspect(config.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineInterfaces(config){var _config$interfaces;const interfaces=resolveReadonlyArrayThunk(null!==(_config$interfaces=config.interfaces)&&void 0!==_config$interfaces?_config$interfaces:[]);return Array.isArray(interfaces)||devAssert(!1,`${config.name} interfaces must be an Array or a function which returns an Array.`),interfaces}function defineFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);return isPlainObj(fieldMap)||devAssert(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(fieldMap,((fieldConfig,fieldName)=>{var _fieldConfig$args;isPlainObj(fieldConfig)||devAssert(!1,`${config.name}.${fieldName} field config must be an object.`),null==fieldConfig.resolve||"function"==typeof fieldConfig.resolve||devAssert(!1,`${config.name}.${fieldName} field resolver must be a function if provided, but got: ${inspect(fieldConfig.resolve)}.`);const argsConfig=null!==(_fieldConfig$args=fieldConfig.args)&&void 0!==_fieldConfig$args?_fieldConfig$args:{};return isPlainObj(argsConfig)||devAssert(!1,`${config.name}.${fieldName} args must be an object with argument names as keys.`),{name:assertName(fieldName),description:fieldConfig.description,type:fieldConfig.type,args:defineArguments(argsConfig),resolve:fieldConfig.resolve,subscribe:fieldConfig.subscribe,deprecationReason:fieldConfig.deprecationReason,extensions:toObjMap(fieldConfig.extensions),astNode:fieldConfig.astNode}}))}function defineArguments(config){return Object.entries(config).map((([argName,argConfig])=>({name:assertName(argName),description:argConfig.description,type:argConfig.type,defaultValue:argConfig.defaultValue,deprecationReason:argConfig.deprecationReason,extensions:toObjMap(argConfig.extensions),astNode:argConfig.astNode})))}function isPlainObj(obj){return isObjectLike(obj)&&!Array.isArray(obj)}function fieldsToFieldsConfig(fields){return mapValue(fields,(field=>({description:field.description,type:field.type,args:argsToArgsConfig(field.args),resolve:field.resolve,subscribe:field.subscribe,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode})))}function argsToArgsConfig(args){return keyValMap(args,(arg=>arg.name),(arg=>({description:arg.description,type:arg.type,defaultValue:arg.defaultValue,deprecationReason:arg.deprecationReason,extensions:arg.extensions,astNode:arg.astNode})))}function isRequiredArgument(arg){return isNonNullType(arg.type)&&void 0===arg.defaultValue}class GraphQLInterfaceType{constructor(config){var _config$extensionASTN3;this.name=assertName(config.name),this.description=config.description,this.resolveType=config.resolveType,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN3=config.extensionASTNodes)&&void 0!==_config$extensionASTN3?_config$extensionASTN3:[],this._fields=defineFieldMap.bind(void 0,config),this._interfaces=defineInterfaces.bind(void 0,config),null==config.resolveType||"function"==typeof config.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class GraphQLUnionType{constructor(config){var _config$extensionASTN4;this.name=assertName(config.name),this.description=config.description,this.resolveType=config.resolveType,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN4=config.extensionASTNodes)&&void 0!==_config$extensionASTN4?_config$extensionASTN4:[],this._types=defineTypes.bind(void 0,config),null==config.resolveType||"function"==typeof config.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineTypes(config){const types=resolveReadonlyArrayThunk(config.types);return Array.isArray(types)||devAssert(!1,`Must provide Array of types or a function which returns such an array for Union ${config.name}.`),types}class GraphQLEnumType{constructor(config){var _config$extensionASTN5;this.name=assertName(config.name),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN5=config.extensionASTNodes)&&void 0!==_config$extensionASTN5?_config$extensionASTN5:[],this._values="function"==typeof config.values?config.values:defineEnumValues(this.name,config.values),this._valueLookup=null,this._nameLookup=null}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return"function"==typeof this._values&&(this._values=defineEnumValues(this.name,this._values())),this._values}getValue(name){return null===this._nameLookup&&(this._nameLookup=keyMap(this.getValues(),(value=>value.name))),this._nameLookup[name]}serialize(outputValue){null===this._valueLookup&&(this._valueLookup=new Map(this.getValues().map((enumValue=>[enumValue.value,enumValue]))));const enumValue=this._valueLookup.get(outputValue);if(void 0===enumValue)throw new GraphQLError(`Enum "${this.name}" cannot represent value: ${inspect(outputValue)}`);return enumValue.name}parseValue(inputValue){if("string"!=typeof inputValue){const valueStr=inspect(inputValue);throw new GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${valueStr}.`+didYouMeanEnumValue(this,valueStr))}const enumValue=this.getValue(inputValue);if(null==enumValue)throw new GraphQLError(`Value "${inputValue}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,inputValue));return enumValue.value}parseLiteral(valueNode,_variables){if(valueNode.kind!==Kind.ENUM){const valueStr=print(valueNode);throw new GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${valueStr}.`+didYouMeanEnumValue(this,valueStr),{nodes:valueNode})}const enumValue=this.getValue(valueNode.value);if(null==enumValue){const valueStr=print(valueNode);throw new GraphQLError(`Value "${valueStr}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,valueStr),{nodes:valueNode})}return enumValue.value}toConfig(){const values=keyValMap(this.getValues(),(value=>value.name),(value=>({description:value.description,value:value.value,deprecationReason:value.deprecationReason,extensions:value.extensions,astNode:value.astNode})));return{name:this.name,description:this.description,values,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function didYouMeanEnumValue(enumType,unknownValueStr){return didYouMean("the enum value",suggestionList(unknownValueStr,enumType.getValues().map((value=>value.name))))}function defineEnumValues(typeName,valueMap){return isPlainObj(valueMap)||devAssert(!1,`${typeName} values must be an object with value names as keys.`),Object.entries(valueMap).map((([valueName,valueConfig])=>(isPlainObj(valueConfig)||devAssert(!1,`${typeName}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${inspect(valueConfig)}.`),{name:assertEnumValueName(valueName),description:valueConfig.description,value:void 0!==valueConfig.value?valueConfig.value:valueName,deprecationReason:valueConfig.deprecationReason,extensions:toObjMap(valueConfig.extensions),astNode:valueConfig.astNode})))}class GraphQLInputObjectType{constructor(config){var _config$extensionASTN6,_config$isOneOf;this.name=assertName(config.name),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN6=config.extensionASTNodes)&&void 0!==_config$extensionASTN6?_config$extensionASTN6:[],this.isOneOf=null!==(_config$isOneOf=config.isOneOf)&&void 0!==_config$isOneOf&&_config$isOneOf,this._fields=defineInputFieldMap.bind(void 0,config)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const fields=mapValue(this.getFields(),(field=>({description:field.description,type:field.type,defaultValue:field.defaultValue,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode})));return{name:this.name,description:this.description,fields,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,isOneOf:this.isOneOf}}toString(){return this.name}toJSON(){return this.toString()}}function defineInputFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);return isPlainObj(fieldMap)||devAssert(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(fieldMap,((fieldConfig,fieldName)=>(!("resolve"in fieldConfig)||devAssert(!1,`${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`),{name:assertName(fieldName),description:fieldConfig.description,type:fieldConfig.type,defaultValue:fieldConfig.defaultValue,deprecationReason:fieldConfig.deprecationReason,extensions:toObjMap(fieldConfig.extensions),astNode:fieldConfig.astNode})))}function isRequiredInputField(field){return isNonNullType(field.type)&&void 0===field.defaultValue}function isEqualType(typeA,typeB){return typeA===typeB||(isNonNullType(typeA)&&isNonNullType(typeB)||!(!isListType(typeA)||!isListType(typeB)))&&isEqualType(typeA.ofType,typeB.ofType)}function isTypeSubTypeOf(schema,maybeSubType,superType){return maybeSubType===superType||(isNonNullType(superType)?!!isNonNullType(maybeSubType)&&isTypeSubTypeOf(schema,maybeSubType.ofType,superType.ofType):isNonNullType(maybeSubType)?isTypeSubTypeOf(schema,maybeSubType.ofType,superType):isListType(superType)?!!isListType(maybeSubType)&&isTypeSubTypeOf(schema,maybeSubType.ofType,superType.ofType):!isListType(maybeSubType)&&(isAbstractType(superType)&&(isInterfaceType(maybeSubType)||isObjectType(maybeSubType))&&schema.isSubType(superType,maybeSubType)))}function doTypesOverlap(schema,typeA,typeB){return typeA===typeB||(isAbstractType(typeA)?isAbstractType(typeB)?schema.getPossibleTypes(typeA).some((type=>schema.isSubType(typeB,type))):schema.isSubType(typeA,typeB):!!isAbstractType(typeB)&&schema.isSubType(typeB,typeA))}const GRAPHQL_MAX_INT=2147483647,GRAPHQL_MIN_INT=-2147483648,GraphQLInt=new GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue?1:0;let num=coercedValue;if("string"==typeof coercedValue&&""!==coercedValue&&(num=Number(coercedValue)),"number"!=typeof num||!Number.isInteger(num))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(coercedValue)}`);if(num>GRAPHQL_MAX_INT||num<GRAPHQL_MIN_INT)throw new GraphQLError("Int cannot represent non 32-bit signed integer value: "+inspect(coercedValue));return num},parseValue(inputValue){if("number"!=typeof inputValue||!Number.isInteger(inputValue))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(inputValue)}`);if(inputValue>GRAPHQL_MAX_INT||inputValue<GRAPHQL_MIN_INT)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.INT)throw new GraphQLError(`Int cannot represent non-integer value: ${print(valueNode)}`,{nodes:valueNode});const num=parseInt(valueNode.value,10);if(num>GRAPHQL_MAX_INT||num<GRAPHQL_MIN_INT)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,{nodes:valueNode});return num}}),GraphQLFloat=new GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue?1:0;let num=coercedValue;if("string"==typeof coercedValue&&""!==coercedValue&&(num=Number(coercedValue)),"number"!=typeof num||!Number.isFinite(num))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(coercedValue)}`);return num},parseValue(inputValue){if("number"!=typeof inputValue||!Number.isFinite(inputValue))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.FLOAT&&valueNode.kind!==Kind.INT)throw new GraphQLError(`Float cannot represent non numeric value: ${print(valueNode)}`,valueNode);return parseFloat(valueNode.value)}}),GraphQLString=new GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"==typeof coercedValue)return coercedValue;if("boolean"==typeof coercedValue)return coercedValue?"true":"false";if("number"==typeof coercedValue&&Number.isFinite(coercedValue))return coercedValue.toString();throw new GraphQLError(`String cannot represent value: ${inspect(outputValue)}`)},parseValue(inputValue){if("string"!=typeof inputValue)throw new GraphQLError(`String cannot represent a non string value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.STRING)throw new GraphQLError(`String cannot represent a non string value: ${print(valueNode)}`,{nodes:valueNode});return valueNode.value}}),GraphQLBoolean=new GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue;if(Number.isFinite(coercedValue))return 0!==coercedValue;throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`)},parseValue(inputValue){if("boolean"!=typeof inputValue)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.BOOLEAN)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${print(valueNode)}`,{nodes:valueNode});return valueNode.value}}),GraphQLID=new GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"==typeof coercedValue)return coercedValue;if(Number.isInteger(coercedValue))return String(coercedValue);throw new GraphQLError(`ID cannot represent value: ${inspect(outputValue)}`)},parseValue(inputValue){if("string"==typeof inputValue)return inputValue;if("number"==typeof inputValue&&Number.isInteger(inputValue))return inputValue.toString();throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`)},parseLiteral(valueNode){if(valueNode.kind!==Kind.STRING&&valueNode.kind!==Kind.INT)throw new GraphQLError("ID cannot represent a non-string and non-integer value: "+print(valueNode),{nodes:valueNode});return valueNode.value}}),specifiedScalarTypes=Object.freeze([GraphQLString,GraphQLInt,GraphQLFloat,GraphQLBoolean,GraphQLID]);function isSpecifiedScalarType(type){return specifiedScalarTypes.some((({name})=>type.name===name))}function serializeObject(outputValue){if(isObjectLike(outputValue)){if("function"==typeof outputValue.valueOf){const valueOfResult=outputValue.valueOf();if(!isObjectLike(valueOfResult))return valueOfResult}if("function"==typeof outputValue.toJSON)return outputValue.toJSON()}return outputValue}function isDirective(directive){return instanceOf(directive,GraphQLDirective)}function assertDirective(directive){if(!isDirective(directive))throw new Error(`Expected ${inspect(directive)} to be a GraphQL directive.`);return directive}class GraphQLDirective{constructor(config){var _config$isRepeatable,_config$args;this.name=assertName(config.name),this.description=config.description,this.locations=config.locations,this.isRepeatable=null!==(_config$isRepeatable=config.isRepeatable)&&void 0!==_config$isRepeatable&&_config$isRepeatable,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,Array.isArray(config.locations)||devAssert(!1,`@${config.name} locations must be an Array.`);const args=null!==(_config$args=config.args)&&void 0!==_config$args?_config$args:{};isObjectLike(args)&&!Array.isArray(args)||devAssert(!1,`@${config.name} args must be an object with argument names as keys.`),this.args=defineArguments(args)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:argsToArgsConfig(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}const GraphQLIncludeDirective=new GraphQLDirective({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[DirectiveLocation.FIELD,DirectiveLocation.FRAGMENT_SPREAD,DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new GraphQLNonNull(GraphQLBoolean),description:"Included when true."}}}),GraphQLSkipDirective=new GraphQLDirective({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[DirectiveLocation.FIELD,DirectiveLocation.FRAGMENT_SPREAD,DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new GraphQLNonNull(GraphQLBoolean),description:"Skipped when true."}}}),DEFAULT_DEPRECATION_REASON="No longer supported",GraphQLDeprecatedDirective=new GraphQLDirective({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[DirectiveLocation.FIELD_DEFINITION,DirectiveLocation.ARGUMENT_DEFINITION,DirectiveLocation.INPUT_FIELD_DEFINITION,DirectiveLocation.ENUM_VALUE],args:{reason:{type:GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:DEFAULT_DEPRECATION_REASON}}}),GraphQLSpecifiedByDirective=new GraphQLDirective({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[DirectiveLocation.SCALAR],args:{url:{type:new GraphQLNonNull(GraphQLString),description:"The URL that specifies the behavior of this scalar."}}}),GraphQLOneOfDirective=new GraphQLDirective({name:"oneOf",description:"Indicates exactly one field must be supplied and this field must not be `null`.",locations:[DirectiveLocation.INPUT_OBJECT],args:{}}),specifiedDirectives=Object.freeze([GraphQLIncludeDirective,GraphQLSkipDirective,GraphQLDeprecatedDirective,GraphQLSpecifiedByDirective,GraphQLOneOfDirective]);function isSpecifiedDirective(directive){return specifiedDirectives.some((({name})=>name===directive.name))}function isIterableObject(maybeIterable){return"object"==typeof maybeIterable&&"function"==typeof(null==maybeIterable?void 0:maybeIterable[Symbol.iterator])}function astFromValue(value,type){if(isNonNullType(type)){const astValue=astFromValue(value,type.ofType);return(null==astValue?void 0:astValue.kind)===Kind.NULL?null:astValue}if(null===value)return{kind:Kind.NULL};if(void 0===value)return null;if(isListType(type)){const itemType=type.ofType;if(isIterableObject(value)){const valuesNodes=[];for(const item of value){const itemNode=astFromValue(item,itemType);null!=itemNode&&valuesNodes.push(itemNode)}return{kind:Kind.LIST,values:valuesNodes}}return astFromValue(value,itemType)}if(isInputObjectType(type)){if(!isObjectLike(value))return null;const fieldNodes=[];for(const field of Object.values(type.getFields())){const fieldValue=astFromValue(value[field.name],field.type);fieldValue&&fieldNodes.push({kind:Kind.OBJECT_FIELD,name:{kind:Kind.NAME,value:field.name},value:fieldValue})}return{kind:Kind.OBJECT,fields:fieldNodes}}if(isLeafType(type)){const serialized=type.serialize(value);if(null==serialized)return null;if("boolean"==typeof serialized)return{kind:Kind.BOOLEAN,value:serialized};if("number"==typeof serialized&&Number.isFinite(serialized)){const stringNum=String(serialized);return integerStringRegExp.test(stringNum)?{kind:Kind.INT,value:stringNum}:{kind:Kind.FLOAT,value:stringNum}}if("string"==typeof serialized)return isEnumType(type)?{kind:Kind.ENUM,value:serialized}:type===GraphQLID&&integerStringRegExp.test(serialized)?{kind:Kind.INT,value:serialized}:{kind:Kind.STRING,value:serialized};throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`)}invariant(!1,"Unexpected input type: "+inspect(type))}const integerStringRegExp=/^-?(?:0|[1-9][0-9]*)$/,__Schema=new GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:GraphQLString,resolve:schema=>schema.description},types:{description:"A list of all types supported by this server.",type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),resolve:schema=>Object.values(schema.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new GraphQLNonNull(__Type),resolve:schema=>schema.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:__Type,resolve:schema=>schema.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:__Type,resolve:schema=>schema.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))),resolve:schema=>schema.getDirectives()}})}),__Directive=new GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:directive=>directive.name},description:{type:GraphQLString,resolve:directive=>directive.description},isRepeatable:{type:new GraphQLNonNull(GraphQLBoolean),resolve:directive=>directive.isRepeatable},locations:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__DirectiveLocation))),resolve:directive=>directive.locations},args:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve:(field,{includeDeprecated})=>includeDeprecated?field.args:field.args.filter((arg=>null==arg.deprecationReason))}})}),__DirectiveLocation=new GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),__Type=new GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new GraphQLNonNull(__TypeKind),resolve:type=>isScalarType(type)?TypeKind.SCALAR:isObjectType(type)?TypeKind.OBJECT:isInterfaceType(type)?TypeKind.INTERFACE:isUnionType(type)?TypeKind.UNION:isEnumType(type)?TypeKind.ENUM:isInputObjectType(type)?TypeKind.INPUT_OBJECT:isListType(type)?TypeKind.LIST:isNonNullType(type)?TypeKind.NON_NULL:void invariant(!1,`Unexpected type: "${inspect(type)}".`)},name:{type:GraphQLString,resolve:type=>"name"in type?type.name:void 0},description:{type:GraphQLString,resolve:type=>"description"in type?type.description:void 0},specifiedByURL:{type:GraphQLString,resolve:obj=>"specifiedByURL"in obj?obj.specifiedByURL:void 0},fields:{type:new GraphQLList(new GraphQLNonNull(__Field)),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve(type,{includeDeprecated}){if(isObjectType(type)||isInterfaceType(type)){const fields=Object.values(type.getFields());return includeDeprecated?fields:fields.filter((field=>null==field.deprecationReason))}}},interfaces:{type:new GraphQLList(new GraphQLNonNull(__Type)),resolve(type){if(isObjectType(type)||isInterfaceType(type))return type.getInterfaces()}},possibleTypes:{type:new GraphQLList(new GraphQLNonNull(__Type)),resolve(type,_args,_context,{schema}){if(isAbstractType(type))return schema.getPossibleTypes(type)}},enumValues:{type:new GraphQLList(new GraphQLNonNull(__EnumValue)),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve(type,{includeDeprecated}){if(isEnumType(type)){const values=type.getValues();return includeDeprecated?values:values.filter((field=>null==field.deprecationReason))}}},inputFields:{type:new GraphQLList(new GraphQLNonNull(__InputValue)),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve(type,{includeDeprecated}){if(isInputObjectType(type)){const values=Object.values(type.getFields());return includeDeprecated?values:values.filter((field=>null==field.deprecationReason))}}},ofType:{type:__Type,resolve:type=>"ofType"in type?type.ofType:void 0},isOneOf:{type:GraphQLBoolean,resolve:type=>{if(isInputObjectType(type))return type.isOneOf}}})}),__Field=new GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:field=>field.name},description:{type:GraphQLString,resolve:field=>field.description},args:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve:(field,{includeDeprecated})=>includeDeprecated?field.args:field.args.filter((arg=>null==arg.deprecationReason))},type:{type:new GraphQLNonNull(__Type),resolve:field=>field.type},isDeprecated:{type:new GraphQLNonNull(GraphQLBoolean),resolve:field=>null!=field.deprecationReason},deprecationReason:{type:GraphQLString,resolve:field=>field.deprecationReason}})}),__InputValue=new GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:inputValue=>inputValue.name},description:{type:GraphQLString,resolve:inputValue=>inputValue.description},type:{type:new GraphQLNonNull(__Type),resolve:inputValue=>inputValue.type},defaultValue:{type:GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(inputValue){const{type,defaultValue}=inputValue,valueAST=astFromValue(defaultValue,type);return valueAST?print(valueAST):null}},isDeprecated:{type:new GraphQLNonNull(GraphQLBoolean),resolve:field=>null!=field.deprecationReason},deprecationReason:{type:GraphQLString,resolve:obj=>obj.deprecationReason}})}),__EnumValue=new GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:enumValue=>enumValue.name},description:{type:GraphQLString,resolve:enumValue=>enumValue.description},isDeprecated:{type:new GraphQLNonNull(GraphQLBoolean),resolve:enumValue=>null!=enumValue.deprecationReason},deprecationReason:{type:GraphQLString,resolve:enumValue=>enumValue.deprecationReason}})});var TypeKind;!function(TypeKind){TypeKind.SCALAR="SCALAR",TypeKind.OBJECT="OBJECT",TypeKind.INTERFACE="INTERFACE",TypeKind.UNION="UNION",TypeKind.ENUM="ENUM",TypeKind.INPUT_OBJECT="INPUT_OBJECT",TypeKind.LIST="LIST",TypeKind.NON_NULL="NON_NULL"}(TypeKind||(TypeKind={}));const __TypeKind=new GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:TypeKind.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:TypeKind.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:TypeKind.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:TypeKind.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:TypeKind.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:TypeKind.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:TypeKind.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:TypeKind.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),SchemaMetaFieldDef={name:"__schema",type:new GraphQLNonNull(__Schema),description:"Access the current type schema of this server.",args:[],resolve:(_source,_args,_context,{schema})=>schema,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},TypeMetaFieldDef={name:"__type",type:__Type,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new GraphQLNonNull(GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(_source,{name},_context,{schema})=>schema.getType(name),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},TypeNameMetaFieldDef={name:"__typename",type:new GraphQLNonNull(GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:(_source,_args,_context,{parentType})=>parentType.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},introspectionTypes=Object.freeze([__Schema,__Directive,__DirectiveLocation,__Type,__Field,__InputValue,__EnumValue,__TypeKind]);function isIntrospectionType(type){return introspectionTypes.some((({name})=>type.name===name))}function isSchema(schema){return instanceOf(schema,GraphQLSchema)}function assertSchema(schema){if(!isSchema(schema))throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);return schema}class GraphQLSchema{constructor(config){var _config$extensionASTN,_config$directives;this.__validationErrors=!0===config.assumeValid?[]:void 0,isObjectLike(config)||devAssert(!1,"Must provide configuration object."),!config.types||Array.isArray(config.types)||devAssert(!1,`"types" must be Array if provided but got: ${inspect(config.types)}.`),!config.directives||Array.isArray(config.directives)||devAssert(!1,`"directives" must be Array if provided but got: ${inspect(config.directives)}.`),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN=config.extensionASTNodes)&&void 0!==_config$extensionASTN?_config$extensionASTN:[],this._queryType=config.query,this._mutationType=config.mutation,this._subscriptionType=config.subscription,this._directives=null!==(_config$directives=config.directives)&&void 0!==_config$directives?_config$directives:specifiedDirectives;const allReferencedTypes=new Set(config.types);if(null!=config.types)for(const type of config.types)allReferencedTypes.delete(type),collectReferencedTypes(type,allReferencedTypes);null!=this._queryType&&collectReferencedTypes(this._queryType,allReferencedTypes),null!=this._mutationType&&collectReferencedTypes(this._mutationType,allReferencedTypes),null!=this._subscriptionType&&collectReferencedTypes(this._subscriptionType,allReferencedTypes);for(const directive of this._directives)if(isDirective(directive))for(const arg of directive.args)collectReferencedTypes(arg.type,allReferencedTypes);collectReferencedTypes(__Schema,allReferencedTypes),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const namedType of allReferencedTypes){if(null==namedType)continue;const typeName=namedType.name;if(typeName||devAssert(!1,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[typeName])throw new Error(`Schema must contain uniquely named types but contains multiple types named "${typeName}".`);if(this._typeMap[typeName]=namedType,isInterfaceType(namedType)){for(const iface of namedType.getInterfaces())if(isInterfaceType(iface)){let implementations=this._implementationsMap[iface.name];void 0===implementations&&(implementations=this._implementationsMap[iface.name]={objects:[],interfaces:[]}),implementations.interfaces.push(namedType)}}else if(isObjectType(namedType))for(const iface of namedType.getInterfaces())if(isInterfaceType(iface)){let implementations=this._implementationsMap[iface.name];void 0===implementations&&(implementations=this._implementationsMap[iface.name]={objects:[],interfaces:[]}),implementations.objects.push(namedType)}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(operation){switch(operation){case OperationTypeNode.QUERY:return this.getQueryType();case OperationTypeNode.MUTATION:return this.getMutationType();case OperationTypeNode.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(name){return this.getTypeMap()[name]}getPossibleTypes(abstractType){return isUnionType(abstractType)?abstractType.getTypes():this.getImplementations(abstractType).objects}getImplementations(interfaceType){const implementations=this._implementationsMap[interfaceType.name];return null!=implementations?implementations:{objects:[],interfaces:[]}}isSubType(abstractType,maybeSubType){let map=this._subTypeMap[abstractType.name];if(void 0===map){if(map=Object.create(null),isUnionType(abstractType))for(const type of abstractType.getTypes())map[type.name]=!0;else{const implementations=this.getImplementations(abstractType);for(const type of implementations.objects)map[type.name]=!0;for(const type of implementations.interfaces)map[type.name]=!0}this._subTypeMap[abstractType.name]=map}return void 0!==map[maybeSubType.name]}getDirectives(){return this._directives}getDirective(name){return this.getDirectives().find((directive=>directive.name===name))}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:void 0!==this.__validationErrors}}}function collectReferencedTypes(type,typeSet){const namedType=getNamedType(type);if(!typeSet.has(namedType))if(typeSet.add(namedType),isUnionType(namedType))for(const memberType of namedType.getTypes())collectReferencedTypes(memberType,typeSet);else if(isObjectType(namedType)||isInterfaceType(namedType)){for(const interfaceType of namedType.getInterfaces())collectReferencedTypes(interfaceType,typeSet);for(const field of Object.values(namedType.getFields())){collectReferencedTypes(field.type,typeSet);for(const arg of field.args)collectReferencedTypes(arg.type,typeSet)}}else if(isInputObjectType(namedType))for(const field of Object.values(namedType.getFields()))collectReferencedTypes(field.type,typeSet);return typeSet}function validateSchema(schema){if(assertSchema(schema),schema.__validationErrors)return schema.__validationErrors;const context=new SchemaValidationContext(schema);!function validateRootTypes(context){const schema=context.schema,queryType=schema.getQueryType();if(queryType){if(!isObjectType(queryType)){var _getOperationTypeNode;context.reportError(`Query root type must be Object type, it cannot be ${inspect(queryType)}.`,null!==(_getOperationTypeNode=getOperationTypeNode(schema,OperationTypeNode.QUERY))&&void 0!==_getOperationTypeNode?_getOperationTypeNode:queryType.astNode)}}else context.reportError("Query root type must be provided.",schema.astNode);const mutationType=schema.getMutationType();var _getOperationTypeNode2;mutationType&&!isObjectType(mutationType)&&context.reportError(`Mutation root type must be Object type if provided, it cannot be ${inspect(mutationType)}.`,null!==(_getOperationTypeNode2=getOperationTypeNode(schema,OperationTypeNode.MUTATION))&&void 0!==_getOperationTypeNode2?_getOperationTypeNode2:mutationType.astNode);const subscriptionType=schema.getSubscriptionType();var _getOperationTypeNode3;subscriptionType&&!isObjectType(subscriptionType)&&context.reportError(`Subscription root type must be Object type if provided, it cannot be ${inspect(subscriptionType)}.`,null!==(_getOperationTypeNode3=getOperationTypeNode(schema,OperationTypeNode.SUBSCRIPTION))&&void 0!==_getOperationTypeNode3?_getOperationTypeNode3:subscriptionType.astNode)}(context),function validateDirectives(context){for(const directive of context.schema.getDirectives())if(isDirective(directive)){validateName(context,directive);for(const arg of directive.args){var _arg$astNode;if(validateName(context,arg),isInputType(arg.type)||context.reportError(`The type of @${directive.name}(${arg.name}:) must be Input Type but got: ${inspect(arg.type)}.`,arg.astNode),isRequiredArgument(arg)&&null!=arg.deprecationReason)context.reportError(`Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,[getDeprecatedDirectiveNode(arg.astNode),null===(_arg$astNode=arg.astNode)||void 0===_arg$astNode?void 0:_arg$astNode.type])}}else context.reportError(`Expected directive but got: ${inspect(directive)}.`,null==directive?void 0:directive.astNode)}(context),function validateTypes(context){const validateInputObjectCircularRefs=function createInputObjectCircularRefsValidator(context){const visitedTypes=Object.create(null),fieldPath=[],fieldPathIndexByTypeName=Object.create(null);return detectCycleRecursive;function detectCycleRecursive(inputObj){if(visitedTypes[inputObj.name])return;visitedTypes[inputObj.name]=!0,fieldPathIndexByTypeName[inputObj.name]=fieldPath.length;const fields=Object.values(inputObj.getFields());for(const field of fields)if(isNonNullType(field.type)&&isInputObjectType(field.type.ofType)){const fieldType=field.type.ofType,cycleIndex=fieldPathIndexByTypeName[fieldType.name];if(fieldPath.push(field),void 0===cycleIndex)detectCycleRecursive(fieldType);else{const cyclePath=fieldPath.slice(cycleIndex),pathStr=cyclePath.map((fieldObj=>fieldObj.name)).join(".");context.reportError(`Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`,cyclePath.map((fieldObj=>fieldObj.astNode)))}fieldPath.pop()}fieldPathIndexByTypeName[inputObj.name]=void 0}}(context),typeMap=context.schema.getTypeMap();for(const type of Object.values(typeMap))isNamedType(type)?(isIntrospectionType(type)||validateName(context,type),isObjectType(type)||isInterfaceType(type)?(validateFields(context,type),validateInterfaces(context,type)):isUnionType(type)?validateUnionMembers(context,type):isEnumType(type)?validateEnumValues(context,type):isInputObjectType(type)&&(validateInputFields(context,type),validateInputObjectCircularRefs(type))):context.reportError(`Expected GraphQL named type but got: ${inspect(type)}.`,type.astNode)}(context);const errors=context.getErrors();return schema.__validationErrors=errors,errors}function assertValidSchema(schema){const errors=validateSchema(schema);if(0!==errors.length)throw new Error(errors.map((error=>error.message)).join("\n\n"))}class SchemaValidationContext{constructor(schema){this._errors=[],this.schema=schema}reportError(message,nodes){const _nodes=Array.isArray(nodes)?nodes.filter(Boolean):nodes;this._errors.push(new GraphQLError(message,{nodes:_nodes}))}getErrors(){return this._errors}}function getOperationTypeNode(schema,operation){var _flatMap$find;return null===(_flatMap$find=[schema.astNode,...schema.extensionASTNodes].flatMap((schemaNode=>{var _schemaNode$operation;return null!==(_schemaNode$operation=null==schemaNode?void 0:schemaNode.operationTypes)&&void 0!==_schemaNode$operation?_schemaNode$operation:[]})).find((operationNode=>operationNode.operation===operation)))||void 0===_flatMap$find?void 0:_flatMap$find.type}function validateName(context,node){node.name.startsWith("__")&&context.reportError(`Name "${node.name}" must not begin with "__", which is reserved by GraphQL introspection.`,node.astNode)}function validateFields(context,type){const fields=Object.values(type.getFields());0===fields.length&&context.reportError(`Type ${type.name} must define one or more fields.`,[type.astNode,...type.extensionASTNodes]);for(const field of fields){var _field$astNode;if(validateName(context,field),!isOutputType(field.type))context.reportError(`The type of ${type.name}.${field.name} must be Output Type but got: ${inspect(field.type)}.`,null===(_field$astNode=field.astNode)||void 0===_field$astNode?void 0:_field$astNode.type);for(const arg of field.args){const argName=arg.name;var _arg$astNode2,_arg$astNode3;if(validateName(context,arg),!isInputType(arg.type))context.reportError(`The type of ${type.name}.${field.name}(${argName}:) must be Input Type but got: ${inspect(arg.type)}.`,null===(_arg$astNode2=arg.astNode)||void 0===_arg$astNode2?void 0:_arg$astNode2.type);if(isRequiredArgument(arg)&&null!=arg.deprecationReason)context.reportError(`Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,[getDeprecatedDirectiveNode(arg.astNode),null===(_arg$astNode3=arg.astNode)||void 0===_arg$astNode3?void 0:_arg$astNode3.type])}}}function validateInterfaces(context,type){const ifaceTypeNames=Object.create(null);for(const iface of type.getInterfaces())isInterfaceType(iface)?type!==iface?ifaceTypeNames[iface.name]?context.reportError(`Type ${type.name} can only implement ${iface.name} once.`,getAllImplementsInterfaceNodes(type,iface)):(ifaceTypeNames[iface.name]=!0,validateTypeImplementsAncestors(context,type,iface),validateTypeImplementsInterface(context,type,iface)):context.reportError(`Type ${type.name} cannot implement itself because it would create a circular reference.`,getAllImplementsInterfaceNodes(type,iface)):context.reportError(`Type ${inspect(type)} must only implement Interface types, it cannot implement ${inspect(iface)}.`,getAllImplementsInterfaceNodes(type,iface))}function validateTypeImplementsInterface(context,type,iface){const typeFieldMap=type.getFields();for(const ifaceField of Object.values(iface.getFields())){const fieldName=ifaceField.name,typeField=typeFieldMap[fieldName];if(typeField){var _ifaceField$astNode,_typeField$astNode;if(!isTypeSubTypeOf(context.schema,typeField.type,ifaceField.type))context.reportError(`Interface field ${iface.name}.${fieldName} expects type ${inspect(ifaceField.type)} but ${type.name}.${fieldName} is type ${inspect(typeField.type)}.`,[null===(_ifaceField$astNode=ifaceField.astNode)||void 0===_ifaceField$astNode?void 0:_ifaceField$astNode.type,null===(_typeField$astNode=typeField.astNode)||void 0===_typeField$astNode?void 0:_typeField$astNode.type]);for(const ifaceArg of ifaceField.args){const argName=ifaceArg.name,typeArg=typeField.args.find((arg=>arg.name===argName));var _ifaceArg$astNode,_typeArg$astNode;if(typeArg){if(!isEqualType(ifaceArg.type,typeArg.type))context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) expects type ${inspect(ifaceArg.type)} but ${type.name}.${fieldName}(${argName}:) is type ${inspect(typeArg.type)}.`,[null===(_ifaceArg$astNode=ifaceArg.astNode)||void 0===_ifaceArg$astNode?void 0:_ifaceArg$astNode.type,null===(_typeArg$astNode=typeArg.astNode)||void 0===_typeArg$astNode?void 0:_typeArg$astNode.type])}else context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,[ifaceArg.astNode,typeField.astNode])}for(const typeArg of typeField.args){const argName=typeArg.name;!ifaceField.args.find((arg=>arg.name===argName))&&isRequiredArgument(typeArg)&&context.reportError(`Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,[typeArg.astNode,ifaceField.astNode])}}else context.reportError(`Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,[ifaceField.astNode,type.astNode,...type.extensionASTNodes])}}function validateTypeImplementsAncestors(context,type,iface){const ifaceInterfaces=type.getInterfaces();for(const transitive of iface.getInterfaces())ifaceInterfaces.includes(transitive)||context.reportError(transitive===type?`Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`:`Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,[...getAllImplementsInterfaceNodes(iface,transitive),...getAllImplementsInterfaceNodes(type,iface)])}function validateUnionMembers(context,union){const memberTypes=union.getTypes();0===memberTypes.length&&context.reportError(`Union type ${union.name} must define one or more member types.`,[union.astNode,...union.extensionASTNodes]);const includedTypeNames=Object.create(null);for(const memberType of memberTypes)includedTypeNames[memberType.name]?context.reportError(`Union type ${union.name} can only include type ${memberType.name} once.`,getUnionMemberTypeNodes(union,memberType.name)):(includedTypeNames[memberType.name]=!0,isObjectType(memberType)||context.reportError(`Union type ${union.name} can only include Object types, it cannot include ${inspect(memberType)}.`,getUnionMemberTypeNodes(union,String(memberType))))}function validateEnumValues(context,enumType){const enumValues=enumType.getValues();0===enumValues.length&&context.reportError(`Enum type ${enumType.name} must define one or more values.`,[enumType.astNode,...enumType.extensionASTNodes]);for(const enumValue of enumValues)validateName(context,enumValue)}function validateInputFields(context,inputObj){const fields=Object.values(inputObj.getFields());0===fields.length&&context.reportError(`Input Object type ${inputObj.name} must define one or more fields.`,[inputObj.astNode,...inputObj.extensionASTNodes]);for(const field of fields){var _field$astNode2,_field$astNode3;if(validateName(context,field),!isInputType(field.type))context.reportError(`The type of ${inputObj.name}.${field.name} must be Input Type but got: ${inspect(field.type)}.`,null===(_field$astNode2=field.astNode)||void 0===_field$astNode2?void 0:_field$astNode2.type);if(isRequiredInputField(field)&&null!=field.deprecationReason)context.reportError(`Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,[getDeprecatedDirectiveNode(field.astNode),null===(_field$astNode3=field.astNode)||void 0===_field$astNode3?void 0:_field$astNode3.type]);inputObj.isOneOf&&validateOneOfInputObjectField(inputObj,field,context)}}function validateOneOfInputObjectField(type,field,context){var _field$astNode4;isNonNullType(field.type)&&context.reportError(`OneOf input field ${type.name}.${field.name} must be nullable.`,null===(_field$astNode4=field.astNode)||void 0===_field$astNode4?void 0:_field$astNode4.type);void 0!==field.defaultValue&&context.reportError(`OneOf input field ${type.name}.${field.name} cannot have a default value.`,field.astNode)}function getAllImplementsInterfaceNodes(type,iface){const{astNode,extensionASTNodes}=type;return(null!=astNode?[astNode,...extensionASTNodes]:extensionASTNodes).flatMap((typeNode=>{var _typeNode$interfaces;return null!==(_typeNode$interfaces=typeNode.interfaces)&&void 0!==_typeNode$interfaces?_typeNode$interfaces:[]})).filter((ifaceNode=>ifaceNode.name.value===iface.name))}function getUnionMemberTypeNodes(union,typeName){const{astNode,extensionASTNodes}=union;return(null!=astNode?[astNode,...extensionASTNodes]:extensionASTNodes).flatMap((unionNode=>{var _unionNode$types;return null!==(_unionNode$types=unionNode.types)&&void 0!==_unionNode$types?_unionNode$types:[]})).filter((typeNode=>typeNode.name.value===typeName))}function getDeprecatedDirectiveNode(definitionNode){var _definitionNode$direc;return null==definitionNode||null===(_definitionNode$direc=definitionNode.directives)||void 0===_definitionNode$direc?void 0:_definitionNode$direc.find((node=>node.name.value===GraphQLDeprecatedDirective.name))}function typeFromAST(schema,typeNode){switch(typeNode.kind){case Kind.LIST_TYPE:{const innerType=typeFromAST(schema,typeNode.type);return innerType&&new GraphQLList(innerType)}case Kind.NON_NULL_TYPE:{const innerType=typeFromAST(schema,typeNode.type);return innerType&&new GraphQLNonNull(innerType)}case Kind.NAMED_TYPE:return schema.getType(typeNode.name.value)}}class TypeInfo{constructor(schema,initialType,getFieldDefFn){this._schema=schema,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=getFieldDefFn?getFieldDefFn:getFieldDef,initialType&&(isInputType(initialType)&&this._inputTypeStack.push(initialType),isCompositeType(initialType)&&this._parentTypeStack.push(initialType),isOutputType(initialType)&&this._typeStack.push(initialType))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(node){const schema=this._schema;switch(node.kind){case Kind.SELECTION_SET:{const namedType=getNamedType(this.getType());this._parentTypeStack.push(isCompositeType(namedType)?namedType:void 0);break}case Kind.FIELD:{const parentType=this.getParentType();let fieldDef,fieldType;parentType&&(fieldDef=this._getFieldDef(schema,parentType,node),fieldDef&&(fieldType=fieldDef.type)),this._fieldDefStack.push(fieldDef),this._typeStack.push(isOutputType(fieldType)?fieldType:void 0);break}case Kind.DIRECTIVE:this._directive=schema.getDirective(node.name.value);break;case Kind.OPERATION_DEFINITION:{const rootType=schema.getRootType(node.operation);this._typeStack.push(isObjectType(rootType)?rootType:void 0);break}case Kind.INLINE_FRAGMENT:case Kind.FRAGMENT_DEFINITION:{const typeConditionAST=node.typeCondition,outputType=typeConditionAST?typeFromAST(schema,typeConditionAST):getNamedType(this.getType());this._typeStack.push(isOutputType(outputType)?outputType:void 0);break}case Kind.VARIABLE_DEFINITION:{const inputType=typeFromAST(schema,node.type);this._inputTypeStack.push(isInputType(inputType)?inputType:void 0);break}case Kind.ARGUMENT:{var _this$getDirective;let argDef,argType;const fieldOrDirective=null!==(_this$getDirective=this.getDirective())&&void 0!==_this$getDirective?_this$getDirective:this.getFieldDef();fieldOrDirective&&(argDef=fieldOrDirective.args.find((arg=>arg.name===node.name.value)),argDef&&(argType=argDef.type)),this._argument=argDef,this._defaultValueStack.push(argDef?argDef.defaultValue:void 0),this._inputTypeStack.push(isInputType(argType)?argType:void 0);break}case Kind.LIST:{const listType=getNullableType(this.getInputType()),itemType=isListType(listType)?listType.ofType:listType;this._defaultValueStack.push(void 0),this._inputTypeStack.push(isInputType(itemType)?itemType:void 0);break}case Kind.OBJECT_FIELD:{const objectType=getNamedType(this.getInputType());let inputFieldType,inputField;isInputObjectType(objectType)&&(inputField=objectType.getFields()[node.name.value],inputField&&(inputFieldType=inputField.type)),this._defaultValueStack.push(inputField?inputField.defaultValue:void 0),this._inputTypeStack.push(isInputType(inputFieldType)?inputFieldType:void 0);break}case Kind.ENUM:{const enumType=getNamedType(this.getInputType());let enumValue;isEnumType(enumType)&&(enumValue=enumType.getValue(node.value)),this._enumValue=enumValue;break}}}leave(node){switch(node.kind){case Kind.SELECTION_SET:this._parentTypeStack.pop();break;case Kind.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case Kind.DIRECTIVE:this._directive=null;break;case Kind.OPERATION_DEFINITION:case Kind.INLINE_FRAGMENT:case Kind.FRAGMENT_DEFINITION:this._typeStack.pop();break;case Kind.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case Kind.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case Kind.LIST:case Kind.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case Kind.ENUM:this._enumValue=null}}}function getFieldDef(schema,parentType,fieldNode){const name=fieldNode.name.value;return name===SchemaMetaFieldDef.name&&schema.getQueryType()===parentType?SchemaMetaFieldDef:name===TypeMetaFieldDef.name&&schema.getQueryType()===parentType?TypeMetaFieldDef:name===TypeNameMetaFieldDef.name&&isCompositeType(parentType)?TypeNameMetaFieldDef:isObjectType(parentType)||isInterfaceType(parentType)?parentType.getFields()[name]:void 0}function visitWithTypeInfo(typeInfo,visitor){return{enter(...args){const node=args[0];typeInfo.enter(node);const fn=getEnterLeaveForKind(visitor,node.kind).enter;if(fn){const result=fn.apply(visitor,args);return void 0!==result&&(typeInfo.leave(node),isNode(result)&&typeInfo.enter(result)),result}},leave(...args){const node=args[0],fn=getEnterLeaveForKind(visitor,node.kind).leave;let result;return fn&&(result=fn.apply(visitor,args)),typeInfo.leave(node),result}}}function isDefinitionNode(node){return isExecutableDefinitionNode(node)||isTypeSystemDefinitionNode(node)||isTypeSystemExtensionNode(node)}function isExecutableDefinitionNode(node){return node.kind===Kind.OPERATION_DEFINITION||node.kind===Kind.FRAGMENT_DEFINITION}function isSelectionNode(node){return node.kind===Kind.FIELD||node.kind===Kind.FRAGMENT_SPREAD||node.kind===Kind.INLINE_FRAGMENT}function isValueNode(node){return node.kind===Kind.VARIABLE||node.kind===Kind.INT||node.kind===Kind.FLOAT||node.kind===Kind.STRING||node.kind===Kind.BOOLEAN||node.kind===Kind.NULL||node.kind===Kind.ENUM||node.kind===Kind.LIST||node.kind===Kind.OBJECT}function isConstValueNode(node){return isValueNode(node)&&(node.kind===Kind.LIST?node.values.some(isConstValueNode):node.kind===Kind.OBJECT?node.fields.some((field=>isConstValueNode(field.value))):node.kind!==Kind.VARIABLE)}function isTypeNode(node){return node.kind===Kind.NAMED_TYPE||node.kind===Kind.LIST_TYPE||node.kind===Kind.NON_NULL_TYPE}function isTypeSystemDefinitionNode(node){return node.kind===Kind.SCHEMA_DEFINITION||isTypeDefinitionNode(node)||node.kind===Kind.DIRECTIVE_DEFINITION}function isTypeDefinitionNode(node){return node.kind===Kind.SCALAR_TYPE_DEFINITION||node.kind===Kind.OBJECT_TYPE_DEFINITION||node.kind===Kind.INTERFACE_TYPE_DEFINITION||node.kind===Kind.UNION_TYPE_DEFINITION||node.kind===Kind.ENUM_TYPE_DEFINITION||node.kind===Kind.INPUT_OBJECT_TYPE_DEFINITION}function isTypeSystemExtensionNode(node){return node.kind===Kind.SCHEMA_EXTENSION||isTypeExtensionNode(node)}function isTypeExtensionNode(node){return node.kind===Kind.SCALAR_TYPE_EXTENSION||node.kind===Kind.OBJECT_TYPE_EXTENSION||node.kind===Kind.INTERFACE_TYPE_EXTENSION||node.kind===Kind.UNION_TYPE_EXTENSION||node.kind===Kind.ENUM_TYPE_EXTENSION||node.kind===Kind.INPUT_OBJECT_TYPE_EXTENSION}function ExecutableDefinitionsRule(context){return{Document(node){for(const definition of node.definitions)if(!isExecutableDefinitionNode(definition)){const defName=definition.kind===Kind.SCHEMA_DEFINITION||definition.kind===Kind.SCHEMA_EXTENSION?"schema":'"'+definition.name.value+'"';context.reportError(new GraphQLError(`The ${defName} definition is not executable.`,{nodes:definition}))}return!1}}}function FieldsOnCorrectTypeRule(context){return{Field(node){const type=context.getParentType();if(type){if(!context.getFieldDef()){const schema=context.getSchema(),fieldName=node.name.value;let suggestion=didYouMean("to use an inline fragment on",function getSuggestedTypeNames(schema,type,fieldName){if(!isAbstractType(type))return[];const suggestedTypes=new Set,usageCount=Object.create(null);for(const possibleType of schema.getPossibleTypes(type))if(possibleType.getFields()[fieldName]){suggestedTypes.add(possibleType),usageCount[possibleType.name]=1;for(const possibleInterface of possibleType.getInterfaces()){var _usageCount$possibleI;possibleInterface.getFields()[fieldName]&&(suggestedTypes.add(possibleInterface),usageCount[possibleInterface.name]=(null!==(_usageCount$possibleI=usageCount[possibleInterface.name])&&void 0!==_usageCount$possibleI?_usageCount$possibleI:0)+1)}}return[...suggestedTypes].sort(((typeA,typeB)=>{const usageCountDiff=usageCount[typeB.name]-usageCount[typeA.name];return 0!==usageCountDiff?usageCountDiff:isInterfaceType(typeA)&&schema.isSubType(typeA,typeB)?-1:isInterfaceType(typeB)&&schema.isSubType(typeB,typeA)?1:naturalCompare(typeA.name,typeB.name)})).map((x=>x.name))}(schema,type,fieldName));""===suggestion&&(suggestion=didYouMean(function getSuggestedFieldNames(type,fieldName){if(isObjectType(type)||isInterfaceType(type)){return suggestionList(fieldName,Object.keys(type.getFields()))}return[]}(type,fieldName))),context.reportError(new GraphQLError(`Cannot query field "${fieldName}" on type "${type.name}".`+suggestion,{nodes:node}))}}}}}function FragmentsOnCompositeTypesRule(context){return{InlineFragment(node){const typeCondition=node.typeCondition;if(typeCondition){const type=typeFromAST(context.getSchema(),typeCondition);if(type&&!isCompositeType(type)){const typeStr=print(typeCondition);context.reportError(new GraphQLError(`Fragment cannot condition on non composite type "${typeStr}".`,{nodes:typeCondition}))}}},FragmentDefinition(node){const type=typeFromAST(context.getSchema(),node.typeCondition);if(type&&!isCompositeType(type)){const typeStr=print(node.typeCondition);context.reportError(new GraphQLError(`Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`,{nodes:node.typeCondition}))}}}}function KnownArgumentNamesRule(context){return{...KnownArgumentNamesOnDirectivesRule(context),Argument(argNode){const argDef=context.getArgument(),fieldDef=context.getFieldDef(),parentType=context.getParentType();if(!argDef&&fieldDef&&parentType){const argName=argNode.name.value,suggestions=suggestionList(argName,fieldDef.args.map((arg=>arg.name)));context.reportError(new GraphQLError(`Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".`+didYouMean(suggestions),{nodes:argNode}))}}}}function KnownArgumentNamesOnDirectivesRule(context){const directiveArgs=Object.create(null),schema=context.getSchema(),definedDirectives=schema?schema.getDirectives():specifiedDirectives;for(const directive of definedDirectives)directiveArgs[directive.name]=directive.args.map((arg=>arg.name));const astDefinitions=context.getDocument().definitions;for(const def of astDefinitions)if(def.kind===Kind.DIRECTIVE_DEFINITION){var _def$arguments;const argsNodes=null!==(_def$arguments=def.arguments)&&void 0!==_def$arguments?_def$arguments:[];directiveArgs[def.name.value]=argsNodes.map((arg=>arg.name.value))}return{Directive(directiveNode){const directiveName=directiveNode.name.value,knownArgs=directiveArgs[directiveName];if(directiveNode.arguments&&knownArgs)for(const argNode of directiveNode.arguments){const argName=argNode.name.value;if(!knownArgs.includes(argName)){const suggestions=suggestionList(argName,knownArgs);context.reportError(new GraphQLError(`Unknown argument "${argName}" on directive "@${directiveName}".`+didYouMean(suggestions),{nodes:argNode}))}}return!1}}}function KnownDirectivesRule(context){const locationsMap=Object.create(null),schema=context.getSchema(),definedDirectives=schema?schema.getDirectives():specifiedDirectives;for(const directive of definedDirectives)locationsMap[directive.name]=directive.locations;const astDefinitions=context.getDocument().definitions;for(const def of astDefinitions)def.kind===Kind.DIRECTIVE_DEFINITION&&(locationsMap[def.name.value]=def.locations.map((name=>name.value)));return{Directive(node,_key,_parent,_path,ancestors){const name=node.name.value,locations=locationsMap[name];if(!locations)return void context.reportError(new GraphQLError(`Unknown directive "@${name}".`,{nodes:node}));const candidateLocation=function getDirectiveLocationForASTPath(ancestors){const appliedTo=ancestors[ancestors.length-1];switch("kind"in appliedTo||invariant(!1),appliedTo.kind){case Kind.OPERATION_DEFINITION:return function getDirectiveLocationForOperation(operation){switch(operation){case OperationTypeNode.QUERY:return DirectiveLocation.QUERY;case OperationTypeNode.MUTATION:return DirectiveLocation.MUTATION;case OperationTypeNode.SUBSCRIPTION:return DirectiveLocation.SUBSCRIPTION}}(appliedTo.operation);case Kind.FIELD:return DirectiveLocation.FIELD;case Kind.FRAGMENT_SPREAD:return DirectiveLocation.FRAGMENT_SPREAD;case Kind.INLINE_FRAGMENT:return DirectiveLocation.INLINE_FRAGMENT;case Kind.FRAGMENT_DEFINITION:return DirectiveLocation.FRAGMENT_DEFINITION;case Kind.VARIABLE_DEFINITION:return DirectiveLocation.VARIABLE_DEFINITION;case Kind.SCHEMA_DEFINITION:case Kind.SCHEMA_EXTENSION:return DirectiveLocation.SCHEMA;case Kind.SCALAR_TYPE_DEFINITION:case Kind.SCALAR_TYPE_EXTENSION:return DirectiveLocation.SCALAR;case Kind.OBJECT_TYPE_DEFINITION:case Kind.OBJECT_TYPE_EXTENSION:return DirectiveLocation.OBJECT;case Kind.FIELD_DEFINITION:return DirectiveLocation.FIELD_DEFINITION;case Kind.INTERFACE_TYPE_DEFINITION:case Kind.INTERFACE_TYPE_EXTENSION:return DirectiveLocation.INTERFACE;case Kind.UNION_TYPE_DEFINITION:case Kind.UNION_TYPE_EXTENSION:return DirectiveLocation.UNION;case Kind.ENUM_TYPE_DEFINITION:case Kind.ENUM_TYPE_EXTENSION:return DirectiveLocation.ENUM;case Kind.ENUM_VALUE_DEFINITION:return DirectiveLocation.ENUM_VALUE;case Kind.INPUT_OBJECT_TYPE_DEFINITION:case Kind.INPUT_OBJECT_TYPE_EXTENSION:return DirectiveLocation.INPUT_OBJECT;case Kind.INPUT_VALUE_DEFINITION:{const parentNode=ancestors[ancestors.length-3];return"kind"in parentNode||invariant(!1),parentNode.kind===Kind.INPUT_OBJECT_TYPE_DEFINITION?DirectiveLocation.INPUT_FIELD_DEFINITION:DirectiveLocation.ARGUMENT_DEFINITION}default:invariant(!1,"Unexpected kind: "+inspect(appliedTo.kind))}}(ancestors);candidateLocation&&!locations.includes(candidateLocation)&&context.reportError(new GraphQLError(`Directive "@${name}" may not be used on ${candidateLocation}.`,{nodes:node}))}}}function KnownFragmentNamesRule(context){return{FragmentSpread(node){const fragmentName=node.name.value;context.getFragment(fragmentName)||context.reportError(new GraphQLError(`Unknown fragment "${fragmentName}".`,{nodes:node.name}))}}}function KnownTypeNamesRule(context){const schema=context.getSchema(),existingTypesMap=schema?schema.getTypeMap():Object.create(null),definedTypes=Object.create(null);for(const def of context.getDocument().definitions)isTypeDefinitionNode(def)&&(definedTypes[def.name.value]=!0);const typeNames=[...Object.keys(existingTypesMap),...Object.keys(definedTypes)];return{NamedType(node,_1,parent,_2,ancestors){const typeName=node.name.value;if(!existingTypesMap[typeName]&&!definedTypes[typeName]){var _ancestors$;const definitionNode=null!==(_ancestors$=ancestors[2])&&void 0!==_ancestors$?_ancestors$:parent,isSDL=null!=definitionNode&&function isSDLNode(value){return"kind"in value&&(isTypeSystemDefinitionNode(value)||isTypeSystemExtensionNode(value))}(definitionNode);if(isSDL&&standardTypeNames.includes(typeName))return;const suggestedTypes=suggestionList(typeName,isSDL?standardTypeNames.concat(typeNames):typeNames);context.reportError(new GraphQLError(`Unknown type "${typeName}".`+didYouMean(suggestedTypes),{nodes:node}))}}}}const standardTypeNames=[...specifiedScalarTypes,...introspectionTypes].map((type=>type.name));function LoneAnonymousOperationRule(context){let operationCount=0;return{Document(node){operationCount=node.definitions.filter((definition=>definition.kind===Kind.OPERATION_DEFINITION)).length},OperationDefinition(node){!node.name&&operationCount>1&&context.reportError(new GraphQLError("This anonymous operation must be the only defined operation.",{nodes:node}))}}}function LoneSchemaDefinitionRule(context){var _ref,_ref2,_oldSchema$astNode;const oldSchema=context.getSchema(),alreadyDefined=null!==(_ref=null!==(_ref2=null!==(_oldSchema$astNode=null==oldSchema?void 0:oldSchema.astNode)&&void 0!==_oldSchema$astNode?_oldSchema$astNode:null==oldSchema?void 0:oldSchema.getQueryType())&&void 0!==_ref2?_ref2:null==oldSchema?void 0:oldSchema.getMutationType())&&void 0!==_ref?_ref:null==oldSchema?void 0:oldSchema.getSubscriptionType();let schemaDefinitionsCount=0;return{SchemaDefinition(node){alreadyDefined?context.reportError(new GraphQLError("Cannot define a new schema within a schema extension.",{nodes:node})):(schemaDefinitionsCount>0&&context.reportError(new GraphQLError("Must provide only one schema definition.",{nodes:node})),++schemaDefinitionsCount)}}}const MAX_LISTS_DEPTH=3;function MaxIntrospectionDepthRule(context){function checkDepth(node,visitedFragments=Object.create(null),depth=0){if(node.kind===Kind.FRAGMENT_SPREAD){const fragmentName=node.name.value;if(!0===visitedFragments[fragmentName])return!1;const fragment=context.getFragment(fragmentName);if(!fragment)return!1;try{return visitedFragments[fragmentName]=!0,checkDepth(fragment,visitedFragments,depth)}finally{visitedFragments[fragmentName]=void 0}}if(node.kind===Kind.FIELD&&("fields"===node.name.value||"interfaces"===node.name.value||"possibleTypes"===node.name.value||"inputFields"===node.name.value)&&++depth>=MAX_LISTS_DEPTH)return!0;if("selectionSet"in node&&node.selectionSet)for(const child of node.selectionSet.selections)if(checkDepth(child,visitedFragments,depth))return!0;return!1}return{Field(node){if(("__schema"===node.name.value||"__type"===node.name.value)&&checkDepth(node))return context.reportError(new GraphQLError("Maximum introspection depth exceeded",{nodes:[node]})),!1}}}function NoFragmentCyclesRule(context){const visitedFrags=Object.create(null),spreadPath=[],spreadPathIndexByName=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition:node=>(detectCycleRecursive(node),!1)};function detectCycleRecursive(fragment){if(visitedFrags[fragment.name.value])return;const fragmentName=fragment.name.value;visitedFrags[fragmentName]=!0;const spreadNodes=context.getFragmentSpreads(fragment.selectionSet);if(0!==spreadNodes.length){spreadPathIndexByName[fragmentName]=spreadPath.length;for(const spreadNode of spreadNodes){const spreadName=spreadNode.name.value,cycleIndex=spreadPathIndexByName[spreadName];if(spreadPath.push(spreadNode),void 0===cycleIndex){const spreadFragment=context.getFragment(spreadName);spreadFragment&&detectCycleRecursive(spreadFragment)}else{const cyclePath=spreadPath.slice(cycleIndex),viaPath=cyclePath.slice(0,-1).map((s=>'"'+s.name.value+'"')).join(", ");context.reportError(new GraphQLError(`Cannot spread fragment "${spreadName}" within itself`+(""!==viaPath?` via ${viaPath}.`:"."),{nodes:cyclePath}))}spreadPath.pop()}spreadPathIndexByName[fragmentName]=void 0}}}function NoUndefinedVariablesRule(context){let variableNameDefined=Object.create(null);return{OperationDefinition:{enter(){variableNameDefined=Object.create(null)},leave(operation){const usages=context.getRecursiveVariableUsages(operation);for(const{node}of usages){const varName=node.name.value;!0!==variableNameDefined[varName]&&context.reportError(new GraphQLError(operation.name?`Variable "$${varName}" is not defined by operation "${operation.name.value}".`:`Variable "$${varName}" is not defined.`,{nodes:[node,operation]}))}}},VariableDefinition(node){variableNameDefined[node.variable.name.value]=!0}}}function NoUnusedFragmentsRule(context){const operationDefs=[],fragmentDefs=[];return{OperationDefinition:node=>(operationDefs.push(node),!1),FragmentDefinition:node=>(fragmentDefs.push(node),!1),Document:{leave(){const fragmentNameUsed=Object.create(null);for(const operation of operationDefs)for(const fragment of context.getRecursivelyReferencedFragments(operation))fragmentNameUsed[fragment.name.value]=!0;for(const fragmentDef of fragmentDefs){const fragName=fragmentDef.name.value;!0!==fragmentNameUsed[fragName]&&context.reportError(new GraphQLError(`Fragment "${fragName}" is never used.`,{nodes:fragmentDef}))}}}}}function NoUnusedVariablesRule(context){let variableDefs=[];return{OperationDefinition:{enter(){variableDefs=[]},leave(operation){const variableNameUsed=Object.create(null),usages=context.getRecursiveVariableUsages(operation);for(const{node}of usages)variableNameUsed[node.name.value]=!0;for(const variableDef of variableDefs){const variableName=variableDef.variable.name.value;!0!==variableNameUsed[variableName]&&context.reportError(new GraphQLError(operation.name?`Variable "$${variableName}" is never used in operation "${operation.name.value}".`:`Variable "$${variableName}" is never used.`,{nodes:variableDef}))}}},VariableDefinition(def){variableDefs.push(def)}}}function sortValueNode(valueNode){switch(valueNode.kind){case Kind.OBJECT:return{...valueNode,fields:(fields=valueNode.fields,fields.map((fieldNode=>({...fieldNode,value:sortValueNode(fieldNode.value)}))).sort(((fieldA,fieldB)=>naturalCompare(fieldA.name.value,fieldB.name.value))))};case Kind.LIST:return{...valueNode,values:valueNode.values.map(sortValueNode)};case Kind.INT:case Kind.FLOAT:case Kind.STRING:case Kind.BOOLEAN:case Kind.NULL:case Kind.ENUM:case Kind.VARIABLE:return valueNode}var fields}function reasonMessage(reason){return Array.isArray(reason)?reason.map((([responseName,subReason])=>`subfields "${responseName}" conflict because `+reasonMessage(subReason))).join(" and "):reason}function OverlappingFieldsCanBeMergedRule(context){const comparedFragmentPairs=new PairSet,cachedFieldsAndFragmentNames=new Map;return{SelectionSet(selectionSet){const conflicts=function findConflictsWithinSelectionSet(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,parentType,selectionSet){const conflicts=[],[fieldMap,fragmentNames]=getFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,parentType,selectionSet);if(function collectConflictsWithin(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,fieldMap){for(const[responseName,fields]of Object.entries(fieldMap))if(fields.length>1)for(let i=0;i<fields.length;i++)for(let j=i+1;j<fields.length;j++){const conflict=findConflict(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,!1,responseName,fields[i],fields[j]);conflict&&conflicts.push(conflict)}}(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,fieldMap),0!==fragmentNames.length)for(let i=0;i<fragmentNames.length;i++){collectConflictsBetweenFieldsAndFragment(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,!1,fieldMap,fragmentNames[i]);for(let j=i+1;j<fragmentNames.length;j++)collectConflictsBetweenFragments(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,!1,fragmentNames[i],fragmentNames[j])}return conflicts}(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,context.getParentType(),selectionSet);for(const[[responseName,reason],fields1,fields2]of conflicts){const reasonMsg=reasonMessage(reason);context.reportError(new GraphQLError(`Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:fields1.concat(fields2)}))}}}}function collectConflictsBetweenFieldsAndFragment(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap,fragmentName){const fragment=context.getFragment(fragmentName);if(!fragment)return;const[fieldMap2,referencedFragmentNames]=getReferencedFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,fragment);if(fieldMap!==fieldMap2){collectConflictsBetween(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap,fieldMap2);for(const referencedFragmentName of referencedFragmentNames)comparedFragmentPairs.has(referencedFragmentName,fragmentName,areMutuallyExclusive)||(comparedFragmentPairs.add(referencedFragmentName,fragmentName,areMutuallyExclusive),collectConflictsBetweenFieldsAndFragment(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap,referencedFragmentName))}}function collectConflictsBetweenFragments(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fragmentName1,fragmentName2){if(fragmentName1===fragmentName2)return;if(comparedFragmentPairs.has(fragmentName1,fragmentName2,areMutuallyExclusive))return;comparedFragmentPairs.add(fragmentName1,fragmentName2,areMutuallyExclusive);const fragment1=context.getFragment(fragmentName1),fragment2=context.getFragment(fragmentName2);if(!fragment1||!fragment2)return;const[fieldMap1,referencedFragmentNames1]=getReferencedFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,fragment1),[fieldMap2,referencedFragmentNames2]=getReferencedFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,fragment2);collectConflictsBetween(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap1,fieldMap2);for(const referencedFragmentName2 of referencedFragmentNames2)collectConflictsBetweenFragments(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fragmentName1,referencedFragmentName2);for(const referencedFragmentName1 of referencedFragmentNames1)collectConflictsBetweenFragments(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,referencedFragmentName1,fragmentName2)}function collectConflictsBetween(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,parentFieldsAreMutuallyExclusive,fieldMap1,fieldMap2){for(const[responseName,fields1]of Object.entries(fieldMap1)){const fields2=fieldMap2[responseName];if(fields2)for(const field1 of fields1)for(const field2 of fields2){const conflict=findConflict(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,parentFieldsAreMutuallyExclusive,responseName,field1,field2);conflict&&conflicts.push(conflict)}}}function findConflict(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,parentFieldsAreMutuallyExclusive,responseName,field1,field2){const[parentType1,node1,def1]=field1,[parentType2,node2,def2]=field2,areMutuallyExclusive=parentFieldsAreMutuallyExclusive||parentType1!==parentType2&&isObjectType(parentType1)&&isObjectType(parentType2);if(!areMutuallyExclusive){const name1=node1.name.value,name2=node2.name.value;if(name1!==name2)return[[responseName,`"${name1}" and "${name2}" are different fields`],[node1],[node2]];if(!function sameArguments(node1,node2){const args1=node1.arguments,args2=node2.arguments;if(void 0===args1||0===args1.length)return void 0===args2||0===args2.length;if(void 0===args2||0===args2.length)return!1;if(args1.length!==args2.length)return!1;const values2=new Map(args2.map((({name,value})=>[name.value,value])));return args1.every((arg1=>{const value1=arg1.value,value2=values2.get(arg1.name.value);return void 0!==value2&&stringifyValue(value1)===stringifyValue(value2)}))}(node1,node2))return[[responseName,"they have differing arguments"],[node1],[node2]]}const type1=null==def1?void 0:def1.type,type2=null==def2?void 0:def2.type;if(type1&&type2&&doTypesConflict(type1,type2))return[[responseName,`they return conflicting types "${inspect(type1)}" and "${inspect(type2)}"`],[node1],[node2]];const selectionSet1=node1.selectionSet,selectionSet2=node2.selectionSet;if(selectionSet1&&selectionSet2){const conflicts=function findConflictsBetweenSubSelectionSets(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,parentType1,selectionSet1,parentType2,selectionSet2){const conflicts=[],[fieldMap1,fragmentNames1]=getFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,parentType1,selectionSet1),[fieldMap2,fragmentNames2]=getFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,parentType2,selectionSet2);collectConflictsBetween(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap1,fieldMap2);for(const fragmentName2 of fragmentNames2)collectConflictsBetweenFieldsAndFragment(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap1,fragmentName2);for(const fragmentName1 of fragmentNames1)collectConflictsBetweenFieldsAndFragment(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fieldMap2,fragmentName1);for(const fragmentName1 of fragmentNames1)for(const fragmentName2 of fragmentNames2)collectConflictsBetweenFragments(context,conflicts,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,fragmentName1,fragmentName2);return conflicts}(context,cachedFieldsAndFragmentNames,comparedFragmentPairs,areMutuallyExclusive,getNamedType(type1),selectionSet1,getNamedType(type2),selectionSet2);return function subfieldConflicts(conflicts,responseName,node1,node2){if(conflicts.length>0)return[[responseName,conflicts.map((([reason])=>reason))],[node1,...conflicts.map((([,fields1])=>fields1)).flat()],[node2,...conflicts.map((([,,fields2])=>fields2)).flat()]]}(conflicts,responseName,node1,node2)}}function stringifyValue(value){return print(sortValueNode(value))}function doTypesConflict(type1,type2){return isListType(type1)?!isListType(type2)||doTypesConflict(type1.ofType,type2.ofType):!!isListType(type2)||(isNonNullType(type1)?!isNonNullType(type2)||doTypesConflict(type1.ofType,type2.ofType):!!isNonNullType(type2)||!(!isLeafType(type1)&&!isLeafType(type2))&&type1!==type2)}function getFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,parentType,selectionSet){const cached=cachedFieldsAndFragmentNames.get(selectionSet);if(cached)return cached;const nodeAndDefs=Object.create(null),fragmentNames=Object.create(null);_collectFieldsAndFragmentNames(context,parentType,selectionSet,nodeAndDefs,fragmentNames);const result=[nodeAndDefs,Object.keys(fragmentNames)];return cachedFieldsAndFragmentNames.set(selectionSet,result),result}function getReferencedFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,fragment){const cached=cachedFieldsAndFragmentNames.get(fragment.selectionSet);if(cached)return cached;const fragmentType=typeFromAST(context.getSchema(),fragment.typeCondition);return getFieldsAndFragmentNames(context,cachedFieldsAndFragmentNames,fragmentType,fragment.selectionSet)}function _collectFieldsAndFragmentNames(context,parentType,selectionSet,nodeAndDefs,fragmentNames){for(const selection of selectionSet.selections)switch(selection.kind){case Kind.FIELD:{const fieldName=selection.name.value;let fieldDef;(isObjectType(parentType)||isInterfaceType(parentType))&&(fieldDef=parentType.getFields()[fieldName]);const responseName=selection.alias?selection.alias.value:fieldName;nodeAndDefs[responseName]||(nodeAndDefs[responseName]=[]),nodeAndDefs[responseName].push([parentType,selection,fieldDef]);break}case Kind.FRAGMENT_SPREAD:fragmentNames[selection.name.value]=!0;break;case Kind.INLINE_FRAGMENT:{const typeCondition=selection.typeCondition,inlineFragmentType=typeCondition?typeFromAST(context.getSchema(),typeCondition):parentType;_collectFieldsAndFragmentNames(context,inlineFragmentType,selection.selectionSet,nodeAndDefs,fragmentNames);break}}}class PairSet{constructor(){this._data=new Map}has(a,b,areMutuallyExclusive){var _this$_data$get;const[key1,key2]=a<b?[a,b]:[b,a],result=null===(_this$_data$get=this._data.get(key1))||void 0===_this$_data$get?void 0:_this$_data$get.get(key2);return void 0!==result&&(!!areMutuallyExclusive||areMutuallyExclusive===result)}add(a,b,areMutuallyExclusive){const[key1,key2]=a<b?[a,b]:[b,a],map=this._data.get(key1);void 0===map?this._data.set(key1,new Map([[key2,areMutuallyExclusive]])):map.set(key2,areMutuallyExclusive)}}function PossibleFragmentSpreadsRule(context){return{InlineFragment(node){const fragType=context.getType(),parentType=context.getParentType();if(isCompositeType(fragType)&&isCompositeType(parentType)&&!doTypesOverlap(context.getSchema(),fragType,parentType)){const parentTypeStr=inspect(parentType),fragTypeStr=inspect(fragType);context.reportError(new GraphQLError(`Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,{nodes:node}))}},FragmentSpread(node){const fragName=node.name.value,fragType=function getFragmentType(context,name){const frag=context.getFragment(name);if(frag){const type=typeFromAST(context.getSchema(),frag.typeCondition);if(isCompositeType(type))return type}}(context,fragName),parentType=context.getParentType();if(fragType&&parentType&&!doTypesOverlap(context.getSchema(),fragType,parentType)){const parentTypeStr=inspect(parentType),fragTypeStr=inspect(fragType);context.reportError(new GraphQLError(`Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,{nodes:node}))}}}}function PossibleTypeExtensionsRule(context){const schema=context.getSchema(),definedTypes=Object.create(null);for(const def of context.getDocument().definitions)isTypeDefinitionNode(def)&&(definedTypes[def.name.value]=def);return{ScalarTypeExtension:checkExtension,ObjectTypeExtension:checkExtension,InterfaceTypeExtension:checkExtension,UnionTypeExtension:checkExtension,EnumTypeExtension:checkExtension,InputObjectTypeExtension:checkExtension};function checkExtension(node){const typeName=node.name.value,defNode=definedTypes[typeName],existingType=null==schema?void 0:schema.getType(typeName);let expectedKind;if(defNode?expectedKind=defKindToExtKind[defNode.kind]:existingType&&(expectedKind=function typeToExtKind(type){if(isScalarType(type))return Kind.SCALAR_TYPE_EXTENSION;if(isObjectType(type))return Kind.OBJECT_TYPE_EXTENSION;if(isInterfaceType(type))return Kind.INTERFACE_TYPE_EXTENSION;if(isUnionType(type))return Kind.UNION_TYPE_EXTENSION;if(isEnumType(type))return Kind.ENUM_TYPE_EXTENSION;if(isInputObjectType(type))return Kind.INPUT_OBJECT_TYPE_EXTENSION;invariant(!1,"Unexpected type: "+inspect(type))}(existingType)),expectedKind){if(expectedKind!==node.kind){const kindStr=function extensionKindToTypeName(kind){switch(kind){case Kind.SCALAR_TYPE_EXTENSION:return"scalar";case Kind.OBJECT_TYPE_EXTENSION:return"object";case Kind.INTERFACE_TYPE_EXTENSION:return"interface";case Kind.UNION_TYPE_EXTENSION:return"union";case Kind.ENUM_TYPE_EXTENSION:return"enum";case Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:invariant(!1,"Unexpected kind: "+inspect(kind))}}(node.kind);context.reportError(new GraphQLError(`Cannot extend non-${kindStr} type "${typeName}".`,{nodes:defNode?[defNode,node]:node}))}}else{const suggestedTypes=suggestionList(typeName,Object.keys({...definedTypes,...null==schema?void 0:schema.getTypeMap()}));context.reportError(new GraphQLError(`Cannot extend type "${typeName}" because it is not defined.`+didYouMean(suggestedTypes),{nodes:node.name}))}}}const defKindToExtKind={[Kind.SCALAR_TYPE_DEFINITION]:Kind.SCALAR_TYPE_EXTENSION,[Kind.OBJECT_TYPE_DEFINITION]:Kind.OBJECT_TYPE_EXTENSION,[Kind.INTERFACE_TYPE_DEFINITION]:Kind.INTERFACE_TYPE_EXTENSION,[Kind.UNION_TYPE_DEFINITION]:Kind.UNION_TYPE_EXTENSION,[Kind.ENUM_TYPE_DEFINITION]:Kind.ENUM_TYPE_EXTENSION,[Kind.INPUT_OBJECT_TYPE_DEFINITION]:Kind.INPUT_OBJECT_TYPE_EXTENSION};function ProvidedRequiredArgumentsRule(context){return{...ProvidedRequiredArgumentsOnDirectivesRule(context),Field:{leave(fieldNode){var _fieldNode$arguments;const fieldDef=context.getFieldDef();if(!fieldDef)return!1;const providedArgs=new Set(null===(_fieldNode$arguments=fieldNode.arguments)||void 0===_fieldNode$arguments?void 0:_fieldNode$arguments.map((arg=>arg.name.value)));for(const argDef of fieldDef.args)if(!providedArgs.has(argDef.name)&&isRequiredArgument(argDef)){const argTypeStr=inspect(argDef.type);context.reportError(new GraphQLError(`Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`,{nodes:fieldNode}))}}}}}function ProvidedRequiredArgumentsOnDirectivesRule(context){var _schema$getDirectives;const requiredArgsMap=Object.create(null),schema=context.getSchema(),definedDirectives=null!==(_schema$getDirectives=null==schema?void 0:schema.getDirectives())&&void 0!==_schema$getDirectives?_schema$getDirectives:specifiedDirectives;for(const directive of definedDirectives)requiredArgsMap[directive.name]=keyMap(directive.args.filter(isRequiredArgument),(arg=>arg.name));const astDefinitions=context.getDocument().definitions;for(const def of astDefinitions)if(def.kind===Kind.DIRECTIVE_DEFINITION){var _def$arguments;const argNodes=null!==(_def$arguments=def.arguments)&&void 0!==_def$arguments?_def$arguments:[];requiredArgsMap[def.name.value]=keyMap(argNodes.filter(isRequiredArgumentNode),(arg=>arg.name.value))}return{Directive:{leave(directiveNode){const directiveName=directiveNode.name.value,requiredArgs=requiredArgsMap[directiveName];if(requiredArgs){var _directiveNode$argume;const argNodes=null!==(_directiveNode$argume=directiveNode.arguments)&&void 0!==_directiveNode$argume?_directiveNode$argume:[],argNodeMap=new Set(argNodes.map((arg=>arg.name.value)));for(const[argName,argDef]of Object.entries(requiredArgs))if(!argNodeMap.has(argName)){const argType=isType(argDef.type)?inspect(argDef.type):print(argDef.type);context.reportError(new GraphQLError(`Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`,{nodes:directiveNode}))}}}}}}function isRequiredArgumentNode(arg){return arg.type.kind===Kind.NON_NULL_TYPE&&null==arg.defaultValue}function ScalarLeafsRule(context){return{Field(node){const type=context.getType(),selectionSet=node.selectionSet;if(type)if(isLeafType(getNamedType(type))){if(selectionSet){const fieldName=node.name.value,typeStr=inspect(type);context.reportError(new GraphQLError(`Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`,{nodes:selectionSet}))}}else if(!selectionSet){const fieldName=node.name.value,typeStr=inspect(type);context.reportError(new GraphQLError(`Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`,{nodes:node}))}}}}function printPathArray(path){return path.map((key=>"number"==typeof key?"["+key.toString()+"]":"."+key)).join("")}function addPath(prev,key,typename){return{prev,key,typename}}function pathToArray(path){const flattened=[];let curr=path;for(;curr;)flattened.push(curr.key),curr=curr.prev;return flattened.reverse()}function coerceInputValue(inputValue,type,onError=defaultOnError){return coerceInputValueImpl(inputValue,type,onError,void 0)}function defaultOnError(path,invalidValue,error){let errorPrefix="Invalid value "+inspect(invalidValue);throw path.length>0&&(errorPrefix+=` at "value${printPathArray(path)}"`),error.message=errorPrefix+": "+error.message,error}function coerceInputValueImpl(inputValue,type,onError,path){if(isNonNullType(type))return null!=inputValue?coerceInputValueImpl(inputValue,type.ofType,onError,path):void onError(pathToArray(path),inputValue,new GraphQLError(`Expected non-nullable type "${inspect(type)}" not to be null.`));if(null==inputValue)return null;if(isListType(type)){const itemType=type.ofType;return isIterableObject(inputValue)?Array.from(inputValue,((itemValue,index)=>{const itemPath=addPath(path,index,void 0);return coerceInputValueImpl(itemValue,itemType,onError,itemPath)})):[coerceInputValueImpl(inputValue,itemType,onError,path)]}if(isInputObjectType(type)){if(!isObjectLike(inputValue))return void onError(pathToArray(path),inputValue,new GraphQLError(`Expected type "${type.name}" to be an object.`));const coercedValue={},fieldDefs=type.getFields();for(const field of Object.values(fieldDefs)){const fieldValue=inputValue[field.name];if(void 0!==fieldValue)coercedValue[field.name]=coerceInputValueImpl(fieldValue,field.type,onError,addPath(path,field.name,type.name));else if(void 0!==field.defaultValue)coercedValue[field.name]=field.defaultValue;else if(isNonNullType(field.type)){const typeStr=inspect(field.type);onError(pathToArray(path),inputValue,new GraphQLError(`Field "${field.name}" of required type "${typeStr}" was not provided.`))}}for(const fieldName of Object.keys(inputValue))if(!fieldDefs[fieldName]){const suggestions=suggestionList(fieldName,Object.keys(type.getFields()));onError(pathToArray(path),inputValue,new GraphQLError(`Field "${fieldName}" is not defined by type "${type.name}".`+didYouMean(suggestions)))}if(type.isOneOf){const keys=Object.keys(coercedValue);1!==keys.length&&onError(pathToArray(path),inputValue,new GraphQLError(`Exactly one key must be specified for OneOf type "${type.name}".`));const key=keys[0],value=coercedValue[key];null===value&&onError(pathToArray(path).concat(key),value,new GraphQLError(`Field "${key}" must be non-null.`))}return coercedValue}if(isLeafType(type)){let parseResult;try{parseResult=type.parseValue(inputValue)}catch(error){return void onError(pathToArray(path),inputValue,error instanceof GraphQLError?error:new GraphQLError(`Expected type "${type.name}". `+error.message,{originalError:error}))}return void 0===parseResult&&onError(pathToArray(path),inputValue,new GraphQLError(`Expected type "${type.name}".`)),parseResult}invariant(!1,"Unexpected input type: "+inspect(type))}function valueFromAST(valueNode,type,variables){if(valueNode){if(valueNode.kind===Kind.VARIABLE){const variableName=valueNode.name.value;if(null==variables||void 0===variables[variableName])return;const variableValue=variables[variableName];if(null===variableValue&&isNonNullType(type))return;return variableValue}if(isNonNullType(type)){if(valueNode.kind===Kind.NULL)return;return valueFromAST(valueNode,type.ofType,variables)}if(valueNode.kind===Kind.NULL)return null;if(isListType(type)){const itemType=type.ofType;if(valueNode.kind===Kind.LIST){const coercedValues=[];for(const itemNode of valueNode.values)if(isMissingVariable(itemNode,variables)){if(isNonNullType(itemType))return;coercedValues.push(null)}else{const itemValue=valueFromAST(itemNode,itemType,variables);if(void 0===itemValue)return;coercedValues.push(itemValue)}return coercedValues}const coercedValue=valueFromAST(valueNode,itemType,variables);if(void 0===coercedValue)return;return[coercedValue]}if(isInputObjectType(type)){if(valueNode.kind!==Kind.OBJECT)return;const coercedObj=Object.create(null),fieldNodes=keyMap(valueNode.fields,(field=>field.name.value));for(const field of Object.values(type.getFields())){const fieldNode=fieldNodes[field.name];if(!fieldNode||isMissingVariable(fieldNode.value,variables)){if(void 0!==field.defaultValue)coercedObj[field.name]=field.defaultValue;else if(isNonNullType(field.type))return;continue}const fieldValue=valueFromAST(fieldNode.value,field.type,variables);if(void 0===fieldValue)return;coercedObj[field.name]=fieldValue}if(type.isOneOf){const keys=Object.keys(coercedObj);if(1!==keys.length)return;if(null===coercedObj[keys[0]])return}return coercedObj}if(isLeafType(type)){let result;try{result=type.parseLiteral(valueNode,variables)}catch(_error){return}if(void 0===result)return;return result}invariant(!1,"Unexpected input type: "+inspect(type))}}function isMissingVariable(valueNode,variables){return valueNode.kind===Kind.VARIABLE&&(null==variables||void 0===variables[valueNode.name.value])}function getVariableValues(schema,varDefNodes,inputs,options){const errors=[],maxErrors=null==options?void 0:options.maxErrors;try{const coerced=function coerceVariableValues(schema,varDefNodes,inputs,onError){const coercedValues={};for(const varDefNode of varDefNodes){const varName=varDefNode.variable.name.value,varType=typeFromAST(schema,varDefNode.type);if(!isInputType(varType)){const varTypeStr=print(varDefNode.type);onError(new GraphQLError(`Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`,{nodes:varDefNode.type}));continue}if(!values_hasOwnProperty(inputs,varName)){if(varDefNode.defaultValue)coercedValues[varName]=valueFromAST(varDefNode.defaultValue,varType);else if(isNonNullType(varType)){const varTypeStr=inspect(varType);onError(new GraphQLError(`Variable "$${varName}" of required type "${varTypeStr}" was not provided.`,{nodes:varDefNode}))}continue}const value=inputs[varName];if(null===value&&isNonNullType(varType)){const varTypeStr=inspect(varType);onError(new GraphQLError(`Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`,{nodes:varDefNode}))}else coercedValues[varName]=coerceInputValue(value,varType,((path,invalidValue,error)=>{let prefix=`Variable "$${varName}" got invalid value `+inspect(invalidValue);path.length>0&&(prefix+=` at "${varName}${printPathArray(path)}"`),onError(new GraphQLError(prefix+"; "+error.message,{nodes:varDefNode,originalError:error}))}))}return coercedValues}(schema,varDefNodes,inputs,(error=>{if(null!=maxErrors&&errors.length>=maxErrors)throw new GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");errors.push(error)}));if(0===errors.length)return{coerced}}catch(error){errors.push(error)}return{errors}}function getArgumentValues(def,node,variableValues){var _node$arguments;const coercedValues={},argNodeMap=keyMap(null!==(_node$arguments=node.arguments)&&void 0!==_node$arguments?_node$arguments:[],(arg=>arg.name.value));for(const argDef of def.args){const name=argDef.name,argType=argDef.type,argumentNode=argNodeMap[name];if(!argumentNode){if(void 0!==argDef.defaultValue)coercedValues[name]=argDef.defaultValue;else if(isNonNullType(argType))throw new GraphQLError(`Argument "${name}" of required type "${inspect(argType)}" was not provided.`,{nodes:node});continue}const valueNode=argumentNode.value;let isNull=valueNode.kind===Kind.NULL;if(valueNode.kind===Kind.VARIABLE){const variableName=valueNode.name.value;if(null==variableValues||!values_hasOwnProperty(variableValues,variableName)){if(void 0!==argDef.defaultValue)coercedValues[name]=argDef.defaultValue;else if(isNonNullType(argType))throw new GraphQLError(`Argument "${name}" of required type "${inspect(argType)}" was provided the variable "$${variableName}" which was not provided a runtime value.`,{nodes:valueNode});continue}isNull=null==variableValues[variableName]}if(isNull&&isNonNullType(argType))throw new GraphQLError(`Argument "${name}" of non-null type "${inspect(argType)}" must not be null.`,{nodes:valueNode});const coercedValue=valueFromAST(valueNode,argType,variableValues);if(void 0===coercedValue)throw new GraphQLError(`Argument "${name}" has invalid value ${print(valueNode)}.`,{nodes:valueNode});coercedValues[name]=coercedValue}return coercedValues}function getDirectiveValues(directiveDef,node,variableValues){var _node$directives;const directiveNode=null===(_node$directives=node.directives)||void 0===_node$directives?void 0:_node$directives.find((directive=>directive.name.value===directiveDef.name));if(directiveNode)return getArgumentValues(directiveDef,directiveNode,variableValues)}function values_hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)}function collectFields(schema,fragments,variableValues,runtimeType,selectionSet){const fields=new Map;return collectFieldsImpl(schema,fragments,variableValues,runtimeType,selectionSet,fields,new Set),fields}function collectFieldsImpl(schema,fragments,variableValues,runtimeType,selectionSet,fields,visitedFragmentNames){for(const selection of selectionSet.selections)switch(selection.kind){case Kind.FIELD:{if(!shouldIncludeNode(variableValues,selection))continue;const name=(node=selection).alias?node.alias.value:node.name.value,fieldList=fields.get(name);void 0!==fieldList?fieldList.push(selection):fields.set(name,[selection]);break}case Kind.INLINE_FRAGMENT:if(!shouldIncludeNode(variableValues,selection)||!doesFragmentConditionMatch(schema,selection,runtimeType))continue;collectFieldsImpl(schema,fragments,variableValues,runtimeType,selection.selectionSet,fields,visitedFragmentNames);break;case Kind.FRAGMENT_SPREAD:{const fragName=selection.name.value;if(visitedFragmentNames.has(fragName)||!shouldIncludeNode(variableValues,selection))continue;visitedFragmentNames.add(fragName);const fragment=fragments[fragName];if(!fragment||!doesFragmentConditionMatch(schema,fragment,runtimeType))continue;collectFieldsImpl(schema,fragments,variableValues,runtimeType,fragment.selectionSet,fields,visitedFragmentNames);break}}var node}function shouldIncludeNode(variableValues,node){const skip=getDirectiveValues(GraphQLSkipDirective,node,variableValues);if(!0===(null==skip?void 0:skip.if))return!1;const include=getDirectiveValues(GraphQLIncludeDirective,node,variableValues);return!1!==(null==include?void 0:include.if)}function doesFragmentConditionMatch(schema,fragment,type){const typeConditionNode=fragment.typeCondition;if(!typeConditionNode)return!0;const conditionalType=typeFromAST(schema,typeConditionNode);return conditionalType===type||!!isAbstractType(conditionalType)&&schema.isSubType(conditionalType,type)}function SingleFieldSubscriptionsRule(context){return{OperationDefinition(node){if("subscription"===node.operation){const schema=context.getSchema(),subscriptionType=schema.getSubscriptionType();if(subscriptionType){const operationName=node.name?node.name.value:null,variableValues=Object.create(null),document=context.getDocument(),fragments=Object.create(null);for(const definition of document.definitions)definition.kind===Kind.FRAGMENT_DEFINITION&&(fragments[definition.name.value]=definition);const fields=collectFields(schema,fragments,variableValues,subscriptionType,node.selectionSet);if(fields.size>1){const extraFieldSelections=[...fields.values()].slice(1).flat();context.reportError(new GraphQLError(null!=operationName?`Subscription "${operationName}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:extraFieldSelections}))}for(const fieldNodes of fields.values()){fieldNodes[0].name.value.startsWith("__")&&context.reportError(new GraphQLError(null!=operationName?`Subscription "${operationName}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:fieldNodes}))}}}}}}function groupBy(list,keyFn){const result=new Map;for(const item of list){const key=keyFn(item),group=result.get(key);void 0===group?result.set(key,[item]):group.push(item)}return result}function UniqueArgumentDefinitionNamesRule(context){return{DirectiveDefinition(directiveNode){var _directiveNode$argume;const argumentNodes=null!==(_directiveNode$argume=directiveNode.arguments)&&void 0!==_directiveNode$argume?_directiveNode$argume:[];return checkArgUniqueness(`@${directiveNode.name.value}`,argumentNodes)},InterfaceTypeDefinition:checkArgUniquenessPerField,InterfaceTypeExtension:checkArgUniquenessPerField,ObjectTypeDefinition:checkArgUniquenessPerField,ObjectTypeExtension:checkArgUniquenessPerField};function checkArgUniquenessPerField(typeNode){var _typeNode$fields;const typeName=typeNode.name.value,fieldNodes=null!==(_typeNode$fields=typeNode.fields)&&void 0!==_typeNode$fields?_typeNode$fields:[];for(const fieldDef of fieldNodes){var _fieldDef$arguments;checkArgUniqueness(`${typeName}.${fieldDef.name.value}`,null!==(_fieldDef$arguments=fieldDef.arguments)&&void 0!==_fieldDef$arguments?_fieldDef$arguments:[])}return!1}function checkArgUniqueness(parentName,argumentNodes){const seenArgs=groupBy(argumentNodes,(arg=>arg.name.value));for(const[argName,argNodes]of seenArgs)argNodes.length>1&&context.reportError(new GraphQLError(`Argument "${parentName}(${argName}:)" can only be defined once.`,{nodes:argNodes.map((node=>node.name))}));return!1}}function UniqueArgumentNamesRule(context){return{Field:checkArgUniqueness,Directive:checkArgUniqueness};function checkArgUniqueness(parentNode){var _parentNode$arguments;const seenArgs=groupBy(null!==(_parentNode$arguments=parentNode.arguments)&&void 0!==_parentNode$arguments?_parentNode$arguments:[],(arg=>arg.name.value));for(const[argName,argNodes]of seenArgs)argNodes.length>1&&context.reportError(new GraphQLError(`There can be only one argument named "${argName}".`,{nodes:argNodes.map((node=>node.name))}))}}function UniqueDirectiveNamesRule(context){const knownDirectiveNames=Object.create(null),schema=context.getSchema();return{DirectiveDefinition(node){const directiveName=node.name.value;if(null==schema||!schema.getDirective(directiveName))return knownDirectiveNames[directiveName]?context.reportError(new GraphQLError(`There can be only one directive named "@${directiveName}".`,{nodes:[knownDirectiveNames[directiveName],node.name]})):knownDirectiveNames[directiveName]=node.name,!1;context.reportError(new GraphQLError(`Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`,{nodes:node.name}))}}}function UniqueDirectivesPerLocationRule(context){const uniqueDirectiveMap=Object.create(null),schema=context.getSchema(),definedDirectives=schema?schema.getDirectives():specifiedDirectives;for(const directive of definedDirectives)uniqueDirectiveMap[directive.name]=!directive.isRepeatable;const astDefinitions=context.getDocument().definitions;for(const def of astDefinitions)def.kind===Kind.DIRECTIVE_DEFINITION&&(uniqueDirectiveMap[def.name.value]=!def.repeatable);const schemaDirectives=Object.create(null),typeDirectivesMap=Object.create(null);return{enter(node){if(!("directives"in node)||!node.directives)return;let seenDirectives;if(node.kind===Kind.SCHEMA_DEFINITION||node.kind===Kind.SCHEMA_EXTENSION)seenDirectives=schemaDirectives;else if(isTypeDefinitionNode(node)||isTypeExtensionNode(node)){const typeName=node.name.value;seenDirectives=typeDirectivesMap[typeName],void 0===seenDirectives&&(typeDirectivesMap[typeName]=seenDirectives=Object.create(null))}else seenDirectives=Object.create(null);for(const directive of node.directives){const directiveName=directive.name.value;uniqueDirectiveMap[directiveName]&&(seenDirectives[directiveName]?context.reportError(new GraphQLError(`The directive "@${directiveName}" can only be used once at this location.`,{nodes:[seenDirectives[directiveName],directive]})):seenDirectives[directiveName]=directive)}}}}function UniqueEnumValueNamesRule(context){const schema=context.getSchema(),existingTypeMap=schema?schema.getTypeMap():Object.create(null),knownValueNames=Object.create(null);return{EnumTypeDefinition:checkValueUniqueness,EnumTypeExtension:checkValueUniqueness};function checkValueUniqueness(node){var _node$values;const typeName=node.name.value;knownValueNames[typeName]||(knownValueNames[typeName]=Object.create(null));const valueNodes=null!==(_node$values=node.values)&&void 0!==_node$values?_node$values:[],valueNames=knownValueNames[typeName];for(const valueDef of valueNodes){const valueName=valueDef.name.value,existingType=existingTypeMap[typeName];isEnumType(existingType)&&existingType.getValue(valueName)?context.reportError(new GraphQLError(`Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:valueDef.name})):valueNames[valueName]?context.reportError(new GraphQLError(`Enum value "${typeName}.${valueName}" can only be defined once.`,{nodes:[valueNames[valueName],valueDef.name]})):valueNames[valueName]=valueDef.name}return!1}}function UniqueFieldDefinitionNamesRule(context){const schema=context.getSchema(),existingTypeMap=schema?schema.getTypeMap():Object.create(null),knownFieldNames=Object.create(null);return{InputObjectTypeDefinition:checkFieldUniqueness,InputObjectTypeExtension:checkFieldUniqueness,InterfaceTypeDefinition:checkFieldUniqueness,InterfaceTypeExtension:checkFieldUniqueness,ObjectTypeDefinition:checkFieldUniqueness,ObjectTypeExtension:checkFieldUniqueness};function checkFieldUniqueness(node){var _node$fields;const typeName=node.name.value;knownFieldNames[typeName]||(knownFieldNames[typeName]=Object.create(null));const fieldNodes=null!==(_node$fields=node.fields)&&void 0!==_node$fields?_node$fields:[],fieldNames=knownFieldNames[typeName];for(const fieldDef of fieldNodes){const fieldName=fieldDef.name.value;hasField(existingTypeMap[typeName],fieldName)?context.reportError(new GraphQLError(`Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:fieldDef.name})):fieldNames[fieldName]?context.reportError(new GraphQLError(`Field "${typeName}.${fieldName}" can only be defined once.`,{nodes:[fieldNames[fieldName],fieldDef.name]})):fieldNames[fieldName]=fieldDef.name}return!1}}function hasField(type,fieldName){return!!(isObjectType(type)||isInterfaceType(type)||isInputObjectType(type))&&null!=type.getFields()[fieldName]}function UniqueFragmentNamesRule(context){const knownFragmentNames=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(node){const fragmentName=node.name.value;return knownFragmentNames[fragmentName]?context.reportError(new GraphQLError(`There can be only one fragment named "${fragmentName}".`,{nodes:[knownFragmentNames[fragmentName],node.name]})):knownFragmentNames[fragmentName]=node.name,!1}}}function UniqueInputFieldNamesRule(context){const knownNameStack=[];let knownNames=Object.create(null);return{ObjectValue:{enter(){knownNameStack.push(knownNames),knownNames=Object.create(null)},leave(){const prevKnownNames=knownNameStack.pop();prevKnownNames||invariant(!1),knownNames=prevKnownNames}},ObjectField(node){const fieldName=node.name.value;knownNames[fieldName]?context.reportError(new GraphQLError(`There can be only one input field named "${fieldName}".`,{nodes:[knownNames[fieldName],node.name]})):knownNames[fieldName]=node.name}}}function UniqueOperationNamesRule(context){const knownOperationNames=Object.create(null);return{OperationDefinition(node){const operationName=node.name;return operationName&&(knownOperationNames[operationName.value]?context.reportError(new GraphQLError(`There can be only one operation named "${operationName.value}".`,{nodes:[knownOperationNames[operationName.value],operationName]})):knownOperationNames[operationName.value]=operationName),!1},FragmentDefinition:()=>!1}}function UniqueOperationTypesRule(context){const schema=context.getSchema(),definedOperationTypes=Object.create(null),existingOperationTypes=schema?{query:schema.getQueryType(),mutation:schema.getMutationType(),subscription:schema.getSubscriptionType()}:{};return{SchemaDefinition:checkOperationTypes,SchemaExtension:checkOperationTypes};function checkOperationTypes(node){var _node$operationTypes;const operationTypesNodes=null!==(_node$operationTypes=node.operationTypes)&&void 0!==_node$operationTypes?_node$operationTypes:[];for(const operationType of operationTypesNodes){const operation=operationType.operation,alreadyDefinedOperationType=definedOperationTypes[operation];existingOperationTypes[operation]?context.reportError(new GraphQLError(`Type for ${operation} already defined in the schema. It cannot be redefined.`,{nodes:operationType})):alreadyDefinedOperationType?context.reportError(new GraphQLError(`There can be only one ${operation} type in schema.`,{nodes:[alreadyDefinedOperationType,operationType]})):definedOperationTypes[operation]=operationType}return!1}}function UniqueTypeNamesRule(context){const knownTypeNames=Object.create(null),schema=context.getSchema();return{ScalarTypeDefinition:checkTypeName,ObjectTypeDefinition:checkTypeName,InterfaceTypeDefinition:checkTypeName,UnionTypeDefinition:checkTypeName,EnumTypeDefinition:checkTypeName,InputObjectTypeDefinition:checkTypeName};function checkTypeName(node){const typeName=node.name.value;if(null==schema||!schema.getType(typeName))return knownTypeNames[typeName]?context.reportError(new GraphQLError(`There can be only one type named "${typeName}".`,{nodes:[knownTypeNames[typeName],node.name]})):knownTypeNames[typeName]=node.name,!1;context.reportError(new GraphQLError(`Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:node.name}))}}function UniqueVariableNamesRule(context){return{OperationDefinition(operationNode){var _operationNode$variab;const seenVariableDefinitions=groupBy(null!==(_operationNode$variab=operationNode.variableDefinitions)&&void 0!==_operationNode$variab?_operationNode$variab:[],(node=>node.variable.name.value));for(const[variableName,variableNodes]of seenVariableDefinitions)variableNodes.length>1&&context.reportError(new GraphQLError(`There can be only one variable named "$${variableName}".`,{nodes:variableNodes.map((node=>node.variable.name))}))}}}function ValuesOfCorrectTypeRule(context){let variableDefinitions={};return{OperationDefinition:{enter(){variableDefinitions={}}},VariableDefinition(definition){variableDefinitions[definition.variable.name.value]=definition},ListValue(node){if(!isListType(getNullableType(context.getParentInputType())))return isValidValueNode(context,node),!1},ObjectValue(node){const type=getNamedType(context.getInputType());if(!isInputObjectType(type))return isValidValueNode(context,node),!1;const fieldNodeMap=keyMap(node.fields,(field=>field.name.value));for(const fieldDef of Object.values(type.getFields())){if(!fieldNodeMap[fieldDef.name]&&isRequiredInputField(fieldDef)){const typeStr=inspect(fieldDef.type);context.reportError(new GraphQLError(`Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,{nodes:node}))}}type.isOneOf&&function validateOneOfInputObject(context,node,type,fieldNodeMap,variableDefinitions){var _fieldNodeMap$keys$;const keys=Object.keys(fieldNodeMap);if(1!==keys.length)return void context.reportError(new GraphQLError(`OneOf Input Object "${type.name}" must specify exactly one key.`,{nodes:[node]}));const value=null===(_fieldNodeMap$keys$=fieldNodeMap[keys[0]])||void 0===_fieldNodeMap$keys$?void 0:_fieldNodeMap$keys$.value,isNullLiteral=!value||value.kind===Kind.NULL,isVariable=(null==value?void 0:value.kind)===Kind.VARIABLE;if(isNullLiteral)return void context.reportError(new GraphQLError(`Field "${type.name}.${keys[0]}" must be non-null.`,{nodes:[node]}));if(isVariable){const variableName=value.name.value;variableDefinitions[variableName].type.kind!==Kind.NON_NULL_TYPE&&context.reportError(new GraphQLError(`Variable "${variableName}" must be non-nullable to be used for OneOf Input Object "${type.name}".`,{nodes:[node]}))}}(context,node,type,fieldNodeMap,variableDefinitions)},ObjectField(node){const parentType=getNamedType(context.getParentInputType());if(!context.getInputType()&&isInputObjectType(parentType)){const suggestions=suggestionList(node.name.value,Object.keys(parentType.getFields()));context.reportError(new GraphQLError(`Field "${node.name.value}" is not defined by type "${parentType.name}".`+didYouMean(suggestions),{nodes:node}))}},NullValue(node){const type=context.getInputType();isNonNullType(type)&&context.reportError(new GraphQLError(`Expected value of type "${inspect(type)}", found ${print(node)}.`,{nodes:node}))},EnumValue:node=>isValidValueNode(context,node),IntValue:node=>isValidValueNode(context,node),FloatValue:node=>isValidValueNode(context,node),StringValue:node=>isValidValueNode(context,node),BooleanValue:node=>isValidValueNode(context,node)}}function isValidValueNode(context,node){const locationType=context.getInputType();if(!locationType)return;const type=getNamedType(locationType);if(isLeafType(type))try{if(void 0===type.parseLiteral(node,void 0)){const typeStr=inspect(locationType);context.reportError(new GraphQLError(`Expected value of type "${typeStr}", found ${print(node)}.`,{nodes:node}))}}catch(error){const typeStr=inspect(locationType);error instanceof GraphQLError?context.reportError(error):context.reportError(new GraphQLError(`Expected value of type "${typeStr}", found ${print(node)}; `+error.message,{nodes:node,originalError:error}))}else{const typeStr=inspect(locationType);context.reportError(new GraphQLError(`Expected value of type "${typeStr}", found ${print(node)}.`,{nodes:node}))}}function VariablesAreInputTypesRule(context){return{VariableDefinition(node){const type=typeFromAST(context.getSchema(),node.type);if(void 0!==type&&!isInputType(type)){const variableName=node.variable.name.value,typeName=print(node.type);context.reportError(new GraphQLError(`Variable "$${variableName}" cannot be non-input type "${typeName}".`,{nodes:node.type}))}}}}function VariablesInAllowedPositionRule(context){let varDefMap=Object.create(null);return{OperationDefinition:{enter(){varDefMap=Object.create(null)},leave(operation){const usages=context.getRecursiveVariableUsages(operation);for(const{node,type,defaultValue}of usages){const varName=node.name.value,varDef=varDefMap[varName];if(varDef&&type){const schema=context.getSchema(),varType=typeFromAST(schema,varDef.type);if(varType&&!allowedVariableUsage(schema,varType,varDef.defaultValue,type,defaultValue)){const varTypeStr=inspect(varType),typeStr=inspect(type);context.reportError(new GraphQLError(`Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`,{nodes:[varDef,node]}))}}}}},VariableDefinition(node){varDefMap[node.variable.name.value]=node}}}function allowedVariableUsage(schema,varType,varDefaultValue,locationType,locationDefaultValue){if(isNonNullType(locationType)&&!isNonNullType(varType)){if(!(null!=varDefaultValue&&varDefaultValue.kind!==Kind.NULL)&&!(void 0!==locationDefaultValue))return!1;return isTypeSubTypeOf(schema,varType,locationType.ofType)}return isTypeSubTypeOf(schema,varType,locationType)}const recommendedRules=Object.freeze([MaxIntrospectionDepthRule]),specifiedRules=Object.freeze([ExecutableDefinitionsRule,UniqueOperationNamesRule,LoneAnonymousOperationRule,SingleFieldSubscriptionsRule,KnownTypeNamesRule,FragmentsOnCompositeTypesRule,VariablesAreInputTypesRule,ScalarLeafsRule,FieldsOnCorrectTypeRule,UniqueFragmentNamesRule,KnownFragmentNamesRule,NoUnusedFragmentsRule,PossibleFragmentSpreadsRule,NoFragmentCyclesRule,UniqueVariableNamesRule,NoUndefinedVariablesRule,NoUnusedVariablesRule,KnownDirectivesRule,UniqueDirectivesPerLocationRule,KnownArgumentNamesRule,UniqueArgumentNamesRule,ValuesOfCorrectTypeRule,ProvidedRequiredArgumentsRule,VariablesInAllowedPositionRule,OverlappingFieldsCanBeMergedRule,UniqueInputFieldNamesRule,...recommendedRules]),specifiedSDLRules=Object.freeze([LoneSchemaDefinitionRule,UniqueOperationTypesRule,UniqueTypeNamesRule,UniqueEnumValueNamesRule,UniqueFieldDefinitionNamesRule,UniqueArgumentDefinitionNamesRule,UniqueDirectiveNamesRule,KnownTypeNamesRule,KnownDirectivesRule,UniqueDirectivesPerLocationRule,PossibleTypeExtensionsRule,KnownArgumentNamesOnDirectivesRule,UniqueArgumentNamesRule,UniqueInputFieldNamesRule,ProvidedRequiredArgumentsOnDirectivesRule]);class ASTValidationContext{constructor(ast,onError){this._ast=ast,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=onError}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(error){this._onError(error)}getDocument(){return this._ast}getFragment(name){let fragments;if(this._fragments)fragments=this._fragments;else{fragments=Object.create(null);for(const defNode of this.getDocument().definitions)defNode.kind===Kind.FRAGMENT_DEFINITION&&(fragments[defNode.name.value]=defNode);this._fragments=fragments}return fragments[name]}getFragmentSpreads(node){let spreads=this._fragmentSpreads.get(node);if(!spreads){spreads=[];const setsToVisit=[node];let set;for(;set=setsToVisit.pop();)for(const selection of set.selections)selection.kind===Kind.FRAGMENT_SPREAD?spreads.push(selection):selection.selectionSet&&setsToVisit.push(selection.selectionSet);this._fragmentSpreads.set(node,spreads)}return spreads}getRecursivelyReferencedFragments(operation){let fragments=this._recursivelyReferencedFragments.get(operation);if(!fragments){fragments=[];const collectedNames=Object.create(null),nodesToVisit=[operation.selectionSet];let node;for(;node=nodesToVisit.pop();)for(const spread of this.getFragmentSpreads(node)){const fragName=spread.name.value;if(!0!==collectedNames[fragName]){collectedNames[fragName]=!0;const fragment=this.getFragment(fragName);fragment&&(fragments.push(fragment),nodesToVisit.push(fragment.selectionSet))}}this._recursivelyReferencedFragments.set(operation,fragments)}return fragments}}class SDLValidationContext extends ASTValidationContext{constructor(ast,schema,onError){super(ast,onError),this._schema=schema}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}class ValidationContext extends ASTValidationContext{constructor(schema,ast,typeInfo,onError){super(ast,onError),this._schema=schema,this._typeInfo=typeInfo,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(node){let usages=this._variableUsages.get(node);if(!usages){const newUsages=[],typeInfo=new TypeInfo(this._schema);visit(node,visitWithTypeInfo(typeInfo,{VariableDefinition:()=>!1,Variable(variable){newUsages.push({node:variable,type:typeInfo.getInputType(),defaultValue:typeInfo.getDefaultValue()})}})),usages=newUsages,this._variableUsages.set(node,usages)}return usages}getRecursiveVariableUsages(operation){let usages=this._recursiveVariableUsages.get(operation);if(!usages){usages=this.getVariableUsages(operation);for(const frag of this.getRecursivelyReferencedFragments(operation))usages=usages.concat(this.getVariableUsages(frag));this._recursiveVariableUsages.set(operation,usages)}return usages}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}function validate(schema,documentAST,rules=specifiedRules,options,typeInfo=new TypeInfo(schema)){var _options$maxErrors;const maxErrors=null!==(_options$maxErrors=null==options?void 0:options.maxErrors)&&void 0!==_options$maxErrors?_options$maxErrors:100;documentAST||devAssert(!1,"Must provide document."),assertValidSchema(schema);const abortObj=Object.freeze({}),errors=[],context=new ValidationContext(schema,documentAST,typeInfo,(error=>{if(errors.length>=maxErrors)throw errors.push(new GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),abortObj;errors.push(error)})),visitor=visitInParallel(rules.map((rule=>rule(context))));try{visit(documentAST,visitWithTypeInfo(typeInfo,visitor))}catch(e){if(e!==abortObj)throw e}return errors}function validateSDL(documentAST,schemaToExtend,rules=specifiedSDLRules){const errors=[],context=new SDLValidationContext(documentAST,schemaToExtend,(error=>{errors.push(error)}));return visit(documentAST,visitInParallel(rules.map((rule=>rule(context))))),errors}function promiseForObject(object){return Promise.all(Object.values(object)).then((resolvedValues=>{const resolvedObject=Object.create(null);for(const[i,key]of Object.keys(object).entries())resolvedObject[key]=resolvedValues[i];return resolvedObject}))}class NonErrorThrown extends Error{constructor(thrownValue){super("Unexpected error value: "+inspect(thrownValue)),this.name="NonErrorThrown",this.thrownValue=thrownValue}}function locatedError(rawOriginalError,nodes,path){var _nodes;const originalError=function toError(thrownValue){return thrownValue instanceof Error?thrownValue:new NonErrorThrown(thrownValue)}(rawOriginalError);return function isLocatedGraphQLError(error){return Array.isArray(error.path)}(originalError)?originalError:new GraphQLError(originalError.message,{nodes:null!==(_nodes=originalError.nodes)&&void 0!==_nodes?_nodes:nodes,source:originalError.source,positions:originalError.positions,path,originalError})}const execute_collectSubfields=function memoize3(fn){let cache0;return function memoized(a1,a2,a3){void 0===cache0&&(cache0=new WeakMap);let cache1=cache0.get(a1);void 0===cache1&&(cache1=new WeakMap,cache0.set(a1,cache1));let cache2=cache1.get(a2);void 0===cache2&&(cache2=new WeakMap,cache1.set(a2,cache2));let fnResult=cache2.get(a3);return void 0===fnResult&&(fnResult=fn(a1,a2,a3),cache2.set(a3,fnResult)),fnResult}}(((exeContext,returnType,fieldNodes)=>function collectSubfields(schema,fragments,variableValues,returnType,fieldNodes){const subFieldNodes=new Map,visitedFragmentNames=new Set;for(const node of fieldNodes)node.selectionSet&&collectFieldsImpl(schema,fragments,variableValues,returnType,node.selectionSet,subFieldNodes,visitedFragmentNames);return subFieldNodes}(exeContext.schema,exeContext.fragments,exeContext.variableValues,returnType,fieldNodes)));function execute(args){arguments.length<2||devAssert(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema,document,variableValues,rootValue}=args;assertValidExecutionArguments(schema,document,variableValues);const exeContext=buildExecutionContext(args);if(!("schema"in exeContext))return{errors:exeContext};try{const{operation}=exeContext,result=function executeOperation(exeContext,operation,rootValue){const rootType=exeContext.schema.getRootType(operation.operation);if(null==rootType)throw new GraphQLError(`Schema is not configured to execute ${operation.operation} operation.`,{nodes:operation});const rootFields=collectFields(exeContext.schema,exeContext.fragments,exeContext.variableValues,rootType,operation.selectionSet),path=void 0;switch(operation.operation){case OperationTypeNode.QUERY:return executeFields(exeContext,rootType,rootValue,path,rootFields);case OperationTypeNode.MUTATION:return function executeFieldsSerially(exeContext,parentType,sourceValue,path,fields){return function promiseReduce(values,callbackFn,initialValue){let accumulator=initialValue;for(const value of values)accumulator=isPromise(accumulator)?accumulator.then((resolved=>callbackFn(resolved,value))):callbackFn(accumulator,value);return accumulator}(fields.entries(),((results,[responseName,fieldNodes])=>{const fieldPath=addPath(path,responseName,parentType.name),result=executeField(exeContext,parentType,sourceValue,fieldNodes,fieldPath);return void 0===result?results:isPromise(result)?result.then((resolvedResult=>(results[responseName]=resolvedResult,results))):(results[responseName]=result,results)}),Object.create(null))}(exeContext,rootType,rootValue,path,rootFields);case OperationTypeNode.SUBSCRIPTION:return executeFields(exeContext,rootType,rootValue,path,rootFields)}}(exeContext,operation,rootValue);return isPromise(result)?result.then((data=>buildResponse(data,exeContext.errors)),(error=>(exeContext.errors.push(error),buildResponse(null,exeContext.errors)))):buildResponse(result,exeContext.errors)}catch(error){return exeContext.errors.push(error),buildResponse(null,exeContext.errors)}}function executeSync(args){const result=execute(args);if(isPromise(result))throw new Error("GraphQL execution failed to complete synchronously.");return result}function buildResponse(data,errors){return 0===errors.length?{data}:{errors,data}}function assertValidExecutionArguments(schema,document,rawVariableValues){document||devAssert(!1,"Must provide document."),assertValidSchema(schema),null==rawVariableValues||isObjectLike(rawVariableValues)||devAssert(!1,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function buildExecutionContext(args){var _definition$name,_operation$variableDe;const{schema,document,rootValue,contextValue,variableValues:rawVariableValues,operationName,fieldResolver,typeResolver,subscribeFieldResolver}=args;let operation;const fragments=Object.create(null);for(const definition of document.definitions)switch(definition.kind){case Kind.OPERATION_DEFINITION:if(null==operationName){if(void 0!==operation)return[new GraphQLError("Must provide operation name if query contains multiple operations.")];operation=definition}else(null===(_definition$name=definition.name)||void 0===_definition$name?void 0:_definition$name.value)===operationName&&(operation=definition);break;case Kind.FRAGMENT_DEFINITION:fragments[definition.name.value]=definition}if(!operation)return null!=operationName?[new GraphQLError(`Unknown operation named "${operationName}".`)]:[new GraphQLError("Must provide an operation.")];const coercedVariableValues=getVariableValues(schema,null!==(_operation$variableDe=operation.variableDefinitions)&&void 0!==_operation$variableDe?_operation$variableDe:[],null!=rawVariableValues?rawVariableValues:{},{maxErrors:50});return coercedVariableValues.errors?coercedVariableValues.errors:{schema,fragments,rootValue,contextValue,operation,variableValues:coercedVariableValues.coerced,fieldResolver:null!=fieldResolver?fieldResolver:defaultFieldResolver,typeResolver:null!=typeResolver?typeResolver:defaultTypeResolver,subscribeFieldResolver:null!=subscribeFieldResolver?subscribeFieldResolver:defaultFieldResolver,errors:[]}}function executeFields(exeContext,parentType,sourceValue,path,fields){const results=Object.create(null);let containsPromise=!1;try{for(const[responseName,fieldNodes]of fields.entries()){const result=executeField(exeContext,parentType,sourceValue,fieldNodes,addPath(path,responseName,parentType.name));void 0!==result&&(results[responseName]=result,isPromise(result)&&(containsPromise=!0))}}catch(error){if(containsPromise)return promiseForObject(results).finally((()=>{throw error}));throw error}return containsPromise?promiseForObject(results):results}function executeField(exeContext,parentType,source,fieldNodes,path){var _fieldDef$resolve;const fieldDef=execute_getFieldDef(exeContext.schema,parentType,fieldNodes[0]);if(!fieldDef)return;const returnType=fieldDef.type,resolveFn=null!==(_fieldDef$resolve=fieldDef.resolve)&&void 0!==_fieldDef$resolve?_fieldDef$resolve:exeContext.fieldResolver,info=buildResolveInfo(exeContext,fieldDef,fieldNodes,parentType,path);try{const args=getArgumentValues(fieldDef,fieldNodes[0],exeContext.variableValues),result=resolveFn(source,args,exeContext.contextValue,info);let completed;return completed=isPromise(result)?result.then((resolved=>completeValue(exeContext,returnType,fieldNodes,info,path,resolved))):completeValue(exeContext,returnType,fieldNodes,info,path,result),isPromise(completed)?completed.then(void 0,(rawError=>handleFieldError(locatedError(rawError,fieldNodes,pathToArray(path)),returnType,exeContext))):completed}catch(rawError){return handleFieldError(locatedError(rawError,fieldNodes,pathToArray(path)),returnType,exeContext)}}function buildResolveInfo(exeContext,fieldDef,fieldNodes,parentType,path){return{fieldName:fieldDef.name,fieldNodes,returnType:fieldDef.type,parentType,path,schema:exeContext.schema,fragments:exeContext.fragments,rootValue:exeContext.rootValue,operation:exeContext.operation,variableValues:exeContext.variableValues}}function handleFieldError(error,returnType,exeContext){if(isNonNullType(returnType))throw error;return exeContext.errors.push(error),null}function completeValue(exeContext,returnType,fieldNodes,info,path,result){if(result instanceof Error)throw result;if(isNonNullType(returnType)){const completed=completeValue(exeContext,returnType.ofType,fieldNodes,info,path,result);if(null===completed)throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);return completed}return null==result?null:isListType(returnType)?function completeListValue(exeContext,returnType,fieldNodes,info,path,result){if(!isIterableObject(result))throw new GraphQLError(`Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`);const itemType=returnType.ofType;let containsPromise=!1;const completedResults=Array.from(result,((item,index)=>{const itemPath=addPath(path,index,void 0);try{let completedItem;return completedItem=isPromise(item)?item.then((resolved=>completeValue(exeContext,itemType,fieldNodes,info,itemPath,resolved))):completeValue(exeContext,itemType,fieldNodes,info,itemPath,item),isPromise(completedItem)?(containsPromise=!0,completedItem.then(void 0,(rawError=>handleFieldError(locatedError(rawError,fieldNodes,pathToArray(itemPath)),itemType,exeContext)))):completedItem}catch(rawError){return handleFieldError(locatedError(rawError,fieldNodes,pathToArray(itemPath)),itemType,exeContext)}}));return containsPromise?Promise.all(completedResults):completedResults}(exeContext,returnType,fieldNodes,info,path,result):isLeafType(returnType)?function completeLeafValue(returnType,result){const serializedResult=returnType.serialize(result);if(null==serializedResult)throw new Error(`Expected \`${inspect(returnType)}.serialize(${inspect(result)})\` to return non-nullable value, returned: ${inspect(serializedResult)}`);return serializedResult}(returnType,result):isAbstractType(returnType)?function completeAbstractValue(exeContext,returnType,fieldNodes,info,path,result){var _returnType$resolveTy;const resolveTypeFn=null!==(_returnType$resolveTy=returnType.resolveType)&&void 0!==_returnType$resolveTy?_returnType$resolveTy:exeContext.typeResolver,contextValue=exeContext.contextValue,runtimeType=resolveTypeFn(result,contextValue,info,returnType);if(isPromise(runtimeType))return runtimeType.then((resolvedRuntimeType=>completeObjectValue(exeContext,ensureValidRuntimeType(resolvedRuntimeType,exeContext,returnType,fieldNodes,info,result),fieldNodes,info,path,result)));return completeObjectValue(exeContext,ensureValidRuntimeType(runtimeType,exeContext,returnType,fieldNodes,info,result),fieldNodes,info,path,result)}(exeContext,returnType,fieldNodes,info,path,result):isObjectType(returnType)?completeObjectValue(exeContext,returnType,fieldNodes,info,path,result):void invariant(!1,"Cannot complete value of unexpected output type: "+inspect(returnType))}function ensureValidRuntimeType(runtimeTypeName,exeContext,returnType,fieldNodes,info,result){if(null==runtimeTypeName)throw new GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,fieldNodes);if(isObjectType(runtimeTypeName))throw new GraphQLError("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");if("string"!=typeof runtimeTypeName)throw new GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with value ${inspect(result)}, received "${inspect(runtimeTypeName)}".`);const runtimeType=exeContext.schema.getType(runtimeTypeName);if(null==runtimeType)throw new GraphQLError(`Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`,{nodes:fieldNodes});if(!isObjectType(runtimeType))throw new GraphQLError(`Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`,{nodes:fieldNodes});if(!exeContext.schema.isSubType(returnType,runtimeType))throw new GraphQLError(`Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`,{nodes:fieldNodes});return runtimeType}function completeObjectValue(exeContext,returnType,fieldNodes,info,path,result){const subFieldNodes=execute_collectSubfields(exeContext,returnType,fieldNodes);if(returnType.isTypeOf){const isTypeOf=returnType.isTypeOf(result,exeContext.contextValue,info);if(isPromise(isTypeOf))return isTypeOf.then((resolvedIsTypeOf=>{if(!resolvedIsTypeOf)throw invalidReturnTypeError(returnType,result,fieldNodes);return executeFields(exeContext,returnType,result,path,subFieldNodes)}));if(!isTypeOf)throw invalidReturnTypeError(returnType,result,fieldNodes)}return executeFields(exeContext,returnType,result,path,subFieldNodes)}function invalidReturnTypeError(returnType,result,fieldNodes){return new GraphQLError(`Expected value of type "${returnType.name}" but got: ${inspect(result)}.`,{nodes:fieldNodes})}const defaultTypeResolver=function(value,contextValue,info,abstractType){if(isObjectLike(value)&&"string"==typeof value.__typename)return value.__typename;const possibleTypes=info.schema.getPossibleTypes(abstractType),promisedIsTypeOfResults=[];for(let i=0;i<possibleTypes.length;i++){const type=possibleTypes[i];if(type.isTypeOf){const isTypeOfResult=type.isTypeOf(value,contextValue,info);if(isPromise(isTypeOfResult))promisedIsTypeOfResults[i]=isTypeOfResult;else if(isTypeOfResult)return type.name}}return promisedIsTypeOfResults.length?Promise.all(promisedIsTypeOfResults).then((isTypeOfResults=>{for(let i=0;i<isTypeOfResults.length;i++)if(isTypeOfResults[i])return possibleTypes[i].name})):void 0},defaultFieldResolver=function(source,args,contextValue,info){if(isObjectLike(source)||"function"==typeof source){const property=source[info.fieldName];return"function"==typeof property?source[info.fieldName](args,contextValue,info):property}};function execute_getFieldDef(schema,parentType,fieldNode){const fieldName=fieldNode.name.value;return fieldName===SchemaMetaFieldDef.name&&schema.getQueryType()===parentType?SchemaMetaFieldDef:fieldName===TypeMetaFieldDef.name&&schema.getQueryType()===parentType?TypeMetaFieldDef:fieldName===TypeNameMetaFieldDef.name?TypeNameMetaFieldDef:parentType.getFields()[fieldName]}function graphql(args){return new Promise((resolve=>resolve(graphqlImpl(args))))}function graphqlSync(args){const result=graphqlImpl(args);if(isPromise(result))throw new Error("GraphQL execution failed to complete synchronously.");return result}function graphqlImpl(args){arguments.length<2||devAssert(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const{schema,source,rootValue,contextValue,variableValues,operationName,fieldResolver,typeResolver}=args,schemaValidationErrors=validateSchema(schema);if(schemaValidationErrors.length>0)return{errors:schemaValidationErrors};let document;try{document=parse(source)}catch(syntaxError){return{errors:[syntaxError]}}const validationErrors=validate(schema,document);return validationErrors.length>0?{errors:validationErrors}:execute({schema,document,rootValue,contextValue,variableValues,operationName,fieldResolver,typeResolver})}function isAsyncIterable(maybeAsyncIterable){return"function"==typeof(null==maybeAsyncIterable?void 0:maybeAsyncIterable[Symbol.asyncIterator])}async function subscribe(args){arguments.length<2||devAssert(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const resultOrStream=await createSourceEventStream(args);if(!isAsyncIterable(resultOrStream))return resultOrStream;return function mapAsyncIterator(iterable,callback){const iterator=iterable[Symbol.asyncIterator]();async function mapResult(result){if(result.done)return result;try{return{value:await callback(result.value),done:!1}}catch(error){if("function"==typeof iterator.return)try{await iterator.return()}catch(_e){}throw error}}return{next:async()=>mapResult(await iterator.next()),return:async()=>"function"==typeof iterator.return?mapResult(await iterator.return()):{value:void 0,done:!0},async throw(error){if("function"==typeof iterator.throw)return mapResult(await iterator.throw(error));throw error},[Symbol.asyncIterator](){return this}}}(resultOrStream,(payload=>execute({...args,rootValue:payload})))}async function createSourceEventStream(...rawArgs){const args=function toNormalizedArgs(args){const firstArg=args[0];return firstArg&&"document"in firstArg?firstArg:{schema:firstArg,document:args[1],rootValue:args[2],contextValue:args[3],variableValues:args[4],operationName:args[5],subscribeFieldResolver:args[6]}}(rawArgs),{schema,document,variableValues}=args;assertValidExecutionArguments(schema,document,variableValues);const exeContext=buildExecutionContext(args);if(!("schema"in exeContext))return{errors:exeContext};try{const eventStream=await async function executeSubscription(exeContext){const{schema,fragments,operation,variableValues,rootValue}=exeContext,rootType=schema.getSubscriptionType();if(null==rootType)throw new GraphQLError("Schema is not configured to execute subscription operation.",{nodes:operation});const rootFields=collectFields(schema,fragments,variableValues,rootType,operation.selectionSet),[responseName,fieldNodes]=[...rootFields.entries()][0],fieldDef=execute_getFieldDef(schema,rootType,fieldNodes[0]);if(!fieldDef){const fieldName=fieldNodes[0].name.value;throw new GraphQLError(`The subscription field "${fieldName}" is not defined.`,{nodes:fieldNodes})}const path=addPath(void 0,responseName,rootType.name),info=buildResolveInfo(exeContext,fieldDef,fieldNodes,rootType,path);try{var _fieldDef$subscribe;const args=getArgumentValues(fieldDef,fieldNodes[0],variableValues),contextValue=exeContext.contextValue,resolveFn=null!==(_fieldDef$subscribe=fieldDef.subscribe)&&void 0!==_fieldDef$subscribe?_fieldDef$subscribe:exeContext.subscribeFieldResolver,eventStream=await resolveFn(rootValue,args,contextValue,info);if(eventStream instanceof Error)throw eventStream;return eventStream}catch(error){throw locatedError(error,fieldNodes,pathToArray(path))}}(exeContext);if(!isAsyncIterable(eventStream))throw new Error(`Subscription field must return Async Iterable. Received: ${inspect(eventStream)}.`);return eventStream}catch(error){if(error instanceof GraphQLError)return{errors:[error]};throw error}}function NoDeprecatedCustomRule(context){return{Field(node){const fieldDef=context.getFieldDef(),deprecationReason=null==fieldDef?void 0:fieldDef.deprecationReason;if(fieldDef&&null!=deprecationReason){const parentType=context.getParentType();null!=parentType||invariant(!1),context.reportError(new GraphQLError(`The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,{nodes:node}))}},Argument(node){const argDef=context.getArgument(),deprecationReason=null==argDef?void 0:argDef.deprecationReason;if(argDef&&null!=deprecationReason){const directiveDef=context.getDirective();if(null!=directiveDef)context.reportError(new GraphQLError(`Directive "@${directiveDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,{nodes:node}));else{const parentType=context.getParentType(),fieldDef=context.getFieldDef();null!=parentType&&null!=fieldDef||invariant(!1),context.reportError(new GraphQLError(`Field "${parentType.name}.${fieldDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,{nodes:node}))}}},ObjectField(node){const inputObjectDef=getNamedType(context.getParentInputType());if(isInputObjectType(inputObjectDef)){const inputFieldDef=inputObjectDef.getFields()[node.name.value],deprecationReason=null==inputFieldDef?void 0:inputFieldDef.deprecationReason;null!=deprecationReason&&context.reportError(new GraphQLError(`The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,{nodes:node}))}},EnumValue(node){const enumValueDef=context.getEnumValue(),deprecationReason=null==enumValueDef?void 0:enumValueDef.deprecationReason;if(enumValueDef&&null!=deprecationReason){const enumTypeDef=getNamedType(context.getInputType());null!=enumTypeDef||invariant(!1),context.reportError(new GraphQLError(`The enum value "${enumTypeDef.name}.${enumValueDef.name}" is deprecated. ${deprecationReason}`,{nodes:node}))}}}}function NoSchemaIntrospectionCustomRule(context){return{Field(node){const type=getNamedType(context.getType());type&&isIntrospectionType(type)&&context.reportError(new GraphQLError(`GraphQL introspection has been disabled, but the requested query contained the field "${node.name.value}".`,{nodes:node}))}}}function getIntrospectionQuery(options){const optionsWithDefault={descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1,oneOf:!1,...options},descriptions=optionsWithDefault.descriptions?"description":"",specifiedByUrl=optionsWithDefault.specifiedByUrl?"specifiedByURL":"",directiveIsRepeatable=optionsWithDefault.directiveIsRepeatable?"isRepeatable":"",schemaDescription=optionsWithDefault.schemaDescription?descriptions:"";function inputDeprecation(str){return optionsWithDefault.inputValueDeprecation?str:""}const oneOf=optionsWithDefault.oneOf?"isOneOf":"";return`\n    query IntrospectionQuery {\n      __schema {\n        ${schemaDescription}\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${descriptions}\n          ${directiveIsRepeatable}\n          locations\n          args${inputDeprecation("(includeDeprecated: true)")} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${descriptions}\n      ${specifiedByUrl}\n      ${oneOf}\n      fields(includeDeprecated: true) {\n        name\n        ${descriptions}\n        args${inputDeprecation("(includeDeprecated: true)")} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${inputDeprecation("(includeDeprecated: true)")} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${descriptions}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${descriptions}\n      type { ...TypeRef }\n      defaultValue\n      ${inputDeprecation("isDeprecated")}\n      ${inputDeprecation("deprecationReason")}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `}function getOperationAST(documentAST,operationName){let operation=null;for(const definition of documentAST.definitions){var _definition$name;if(definition.kind===Kind.OPERATION_DEFINITION)if(null==operationName){if(operation)return null;operation=definition}else if((null===(_definition$name=definition.name)||void 0===_definition$name?void 0:_definition$name.value)===operationName)return definition}return operation}function getOperationRootType(schema,operation){if("query"===operation.operation){const queryType=schema.getQueryType();if(!queryType)throw new GraphQLError("Schema does not define the required query root type.",{nodes:operation});return queryType}if("mutation"===operation.operation){const mutationType=schema.getMutationType();if(!mutationType)throw new GraphQLError("Schema is not configured for mutations.",{nodes:operation});return mutationType}if("subscription"===operation.operation){const subscriptionType=schema.getSubscriptionType();if(!subscriptionType)throw new GraphQLError("Schema is not configured for subscriptions.",{nodes:operation});return subscriptionType}throw new GraphQLError("Can only have query, mutation and subscription operations.",{nodes:operation})}function introspectionFromSchema(schema,options){const result=executeSync({schema,document:parse(getIntrospectionQuery({specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0,oneOf:!0,...options}))});return!result.errors&&result.data||invariant(!1),result.data}function buildClientSchema(introspection,options){isObjectLike(introspection)&&isObjectLike(introspection.__schema)||devAssert(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${inspect(introspection)}.`);const schemaIntrospection=introspection.__schema,typeMap=keyValMap(schemaIntrospection.types,(typeIntrospection=>typeIntrospection.name),(typeIntrospection=>function buildType(type){if(null!=type&&null!=type.name&&null!=type.kind)switch(type.kind){case TypeKind.SCALAR:return function buildScalarDef(scalarIntrospection){return new GraphQLScalarType({name:scalarIntrospection.name,description:scalarIntrospection.description,specifiedByURL:scalarIntrospection.specifiedByURL})}(type);case TypeKind.OBJECT:return function buildObjectDef(objectIntrospection){return new GraphQLObjectType({name:objectIntrospection.name,description:objectIntrospection.description,interfaces:()=>buildImplementationsList(objectIntrospection),fields:()=>buildFieldDefMap(objectIntrospection)})}(type);case TypeKind.INTERFACE:return function buildInterfaceDef(interfaceIntrospection){return new GraphQLInterfaceType({name:interfaceIntrospection.name,description:interfaceIntrospection.description,interfaces:()=>buildImplementationsList(interfaceIntrospection),fields:()=>buildFieldDefMap(interfaceIntrospection)})}(type);case TypeKind.UNION:return function buildUnionDef(unionIntrospection){if(!unionIntrospection.possibleTypes){const unionIntrospectionStr=inspect(unionIntrospection);throw new Error(`Introspection result missing possibleTypes: ${unionIntrospectionStr}.`)}return new GraphQLUnionType({name:unionIntrospection.name,description:unionIntrospection.description,types:()=>unionIntrospection.possibleTypes.map(getObjectType)})}(type);case TypeKind.ENUM:return function buildEnumDef(enumIntrospection){if(!enumIntrospection.enumValues){const enumIntrospectionStr=inspect(enumIntrospection);throw new Error(`Introspection result missing enumValues: ${enumIntrospectionStr}.`)}return new GraphQLEnumType({name:enumIntrospection.name,description:enumIntrospection.description,values:keyValMap(enumIntrospection.enumValues,(valueIntrospection=>valueIntrospection.name),(valueIntrospection=>({description:valueIntrospection.description,deprecationReason:valueIntrospection.deprecationReason})))})}(type);case TypeKind.INPUT_OBJECT:return function buildInputObjectDef(inputObjectIntrospection){if(!inputObjectIntrospection.inputFields){const inputObjectIntrospectionStr=inspect(inputObjectIntrospection);throw new Error(`Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`)}return new GraphQLInputObjectType({name:inputObjectIntrospection.name,description:inputObjectIntrospection.description,fields:()=>buildInputValueDefMap(inputObjectIntrospection.inputFields),isOneOf:inputObjectIntrospection.isOneOf})}(type)}const typeStr=inspect(type);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`)}(typeIntrospection)));for(const stdType of[...specifiedScalarTypes,...introspectionTypes])typeMap[stdType.name]&&(typeMap[stdType.name]=stdType);const queryType=schemaIntrospection.queryType?getObjectType(schemaIntrospection.queryType):null,mutationType=schemaIntrospection.mutationType?getObjectType(schemaIntrospection.mutationType):null,subscriptionType=schemaIntrospection.subscriptionType?getObjectType(schemaIntrospection.subscriptionType):null,directives=schemaIntrospection.directives?schemaIntrospection.directives.map((function buildDirective(directiveIntrospection){if(!directiveIntrospection.args){const directiveIntrospectionStr=inspect(directiveIntrospection);throw new Error(`Introspection result missing directive args: ${directiveIntrospectionStr}.`)}if(!directiveIntrospection.locations){const directiveIntrospectionStr=inspect(directiveIntrospection);throw new Error(`Introspection result missing directive locations: ${directiveIntrospectionStr}.`)}return new GraphQLDirective({name:directiveIntrospection.name,description:directiveIntrospection.description,isRepeatable:directiveIntrospection.isRepeatable,locations:directiveIntrospection.locations.slice(),args:buildInputValueDefMap(directiveIntrospection.args)})})):[];return new GraphQLSchema({description:schemaIntrospection.description,query:queryType,mutation:mutationType,subscription:subscriptionType,types:Object.values(typeMap),directives,assumeValid:null==options?void 0:options.assumeValid});function getType(typeRef){if(typeRef.kind===TypeKind.LIST){const itemRef=typeRef.ofType;if(!itemRef)throw new Error("Decorated type deeper than introspection query.");return new GraphQLList(getType(itemRef))}if(typeRef.kind===TypeKind.NON_NULL){const nullableRef=typeRef.ofType;if(!nullableRef)throw new Error("Decorated type deeper than introspection query.");const nullableType=getType(nullableRef);return new GraphQLNonNull(assertNullableType(nullableType))}return getNamedType(typeRef)}function getNamedType(typeRef){const typeName=typeRef.name;if(!typeName)throw new Error(`Unknown type reference: ${inspect(typeRef)}.`);const type=typeMap[typeName];if(!type)throw new Error(`Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`);return type}function getObjectType(typeRef){return assertObjectType(getNamedType(typeRef))}function getInterfaceType(typeRef){return assertInterfaceType(getNamedType(typeRef))}function buildImplementationsList(implementingIntrospection){if(null===implementingIntrospection.interfaces&&implementingIntrospection.kind===TypeKind.INTERFACE)return[];if(!implementingIntrospection.interfaces){const implementingIntrospectionStr=inspect(implementingIntrospection);throw new Error(`Introspection result missing interfaces: ${implementingIntrospectionStr}.`)}return implementingIntrospection.interfaces.map(getInterfaceType)}function buildFieldDefMap(typeIntrospection){if(!typeIntrospection.fields)throw new Error(`Introspection result missing fields: ${inspect(typeIntrospection)}.`);return keyValMap(typeIntrospection.fields,(fieldIntrospection=>fieldIntrospection.name),buildField)}function buildField(fieldIntrospection){const type=getType(fieldIntrospection.type);if(!isOutputType(type)){const typeStr=inspect(type);throw new Error(`Introspection must provide output type for fields, but received: ${typeStr}.`)}if(!fieldIntrospection.args){const fieldIntrospectionStr=inspect(fieldIntrospection);throw new Error(`Introspection result missing field args: ${fieldIntrospectionStr}.`)}return{description:fieldIntrospection.description,deprecationReason:fieldIntrospection.deprecationReason,type,args:buildInputValueDefMap(fieldIntrospection.args)}}function buildInputValueDefMap(inputValueIntrospections){return keyValMap(inputValueIntrospections,(inputValue=>inputValue.name),buildInputValue)}function buildInputValue(inputValueIntrospection){const type=getType(inputValueIntrospection.type);if(!isInputType(type)){const typeStr=inspect(type);throw new Error(`Introspection must provide input type for arguments, but received: ${typeStr}.`)}const defaultValue=null!=inputValueIntrospection.defaultValue?valueFromAST(parseValue(inputValueIntrospection.defaultValue),type):void 0;return{description:inputValueIntrospection.description,type,defaultValue,deprecationReason:inputValueIntrospection.deprecationReason}}}function extendSchema(schema,documentAST,options){assertSchema(schema),null!=documentAST&&documentAST.kind===Kind.DOCUMENT||devAssert(!1,"Must provide valid Document AST."),!0!==(null==options?void 0:options.assumeValid)&&!0!==(null==options?void 0:options.assumeValidSDL)&&function assertValidSDLExtension(documentAST,schema){const errors=validateSDL(documentAST,schema);if(0!==errors.length)throw new Error(errors.map((error=>error.message)).join("\n\n"))}(documentAST,schema);const schemaConfig=schema.toConfig(),extendedConfig=extendSchemaImpl(schemaConfig,documentAST,options);return schemaConfig===extendedConfig?schema:new GraphQLSchema(extendedConfig)}function extendSchemaImpl(schemaConfig,documentAST,options){var _schemaDef,_schemaDef$descriptio,_schemaDef2,_options$assumeValid;const typeDefs=[],typeExtensionsMap=Object.create(null),directiveDefs=[];let schemaDef;const schemaExtensions=[];for(const def of documentAST.definitions)if(def.kind===Kind.SCHEMA_DEFINITION)schemaDef=def;else if(def.kind===Kind.SCHEMA_EXTENSION)schemaExtensions.push(def);else if(isTypeDefinitionNode(def))typeDefs.push(def);else if(isTypeExtensionNode(def)){const extendedTypeName=def.name.value,existingTypeExtensions=typeExtensionsMap[extendedTypeName];typeExtensionsMap[extendedTypeName]=existingTypeExtensions?existingTypeExtensions.concat([def]):[def]}else def.kind===Kind.DIRECTIVE_DEFINITION&&directiveDefs.push(def);if(0===Object.keys(typeExtensionsMap).length&&0===typeDefs.length&&0===directiveDefs.length&&0===schemaExtensions.length&&null==schemaDef)return schemaConfig;const typeMap=Object.create(null);for(const existingType of schemaConfig.types)typeMap[existingType.name]=extendNamedType(existingType);for(const typeNode of typeDefs){var _stdTypeMap$name;const name=typeNode.name.value;typeMap[name]=null!==(_stdTypeMap$name=stdTypeMap[name])&&void 0!==_stdTypeMap$name?_stdTypeMap$name:buildType(typeNode)}const operationTypes={query:schemaConfig.query&&replaceNamedType(schemaConfig.query),mutation:schemaConfig.mutation&&replaceNamedType(schemaConfig.mutation),subscription:schemaConfig.subscription&&replaceNamedType(schemaConfig.subscription),...schemaDef&&getOperationTypes([schemaDef]),...getOperationTypes(schemaExtensions)};return{description:null===(_schemaDef=schemaDef)||void 0===_schemaDef||null===(_schemaDef$descriptio=_schemaDef.description)||void 0===_schemaDef$descriptio?void 0:_schemaDef$descriptio.value,...operationTypes,types:Object.values(typeMap),directives:[...schemaConfig.directives.map((function replaceDirective(directive){const config=directive.toConfig();return new GraphQLDirective({...config,args:mapValue(config.args,extendArg)})})),...directiveDefs.map((function buildDirective(node){var _node$description;return new GraphQLDirective({name:node.name.value,description:null===(_node$description=node.description)||void 0===_node$description?void 0:_node$description.value,locations:node.locations.map((({value})=>value)),isRepeatable:node.repeatable,args:buildArgumentMap(node.arguments),astNode:node})}))],extensions:Object.create(null),astNode:null!==(_schemaDef2=schemaDef)&&void 0!==_schemaDef2?_schemaDef2:schemaConfig.astNode,extensionASTNodes:schemaConfig.extensionASTNodes.concat(schemaExtensions),assumeValid:null!==(_options$assumeValid=null==options?void 0:options.assumeValid)&&void 0!==_options$assumeValid&&_options$assumeValid};function replaceType(type){return isListType(type)?new GraphQLList(replaceType(type.ofType)):isNonNullType(type)?new GraphQLNonNull(replaceType(type.ofType)):replaceNamedType(type)}function replaceNamedType(type){return typeMap[type.name]}function extendNamedType(type){return isIntrospectionType(type)||isSpecifiedScalarType(type)?type:isScalarType(type)?function extendScalarType(type){var _typeExtensionsMap$co2;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co2=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co2?_typeExtensionsMap$co2:[];let specifiedByURL=config.specifiedByURL;for(const extensionNode of extensions){var _getSpecifiedByURL;specifiedByURL=null!==(_getSpecifiedByURL=getSpecifiedByURL(extensionNode))&&void 0!==_getSpecifiedByURL?_getSpecifiedByURL:specifiedByURL}return new GraphQLScalarType({...config,specifiedByURL,extensionASTNodes:config.extensionASTNodes.concat(extensions)})}(type):isObjectType(type)?function extendObjectType(type){var _typeExtensionsMap$co3;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co3=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co3?_typeExtensionsMap$co3:[];return new GraphQLObjectType({...config,interfaces:()=>[...type.getInterfaces().map(replaceNamedType),...buildInterfaces(extensions)],fields:()=>({...mapValue(config.fields,extendField),...buildFieldMap(extensions)}),extensionASTNodes:config.extensionASTNodes.concat(extensions)})}(type):isInterfaceType(type)?function extendInterfaceType(type){var _typeExtensionsMap$co4;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co4=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co4?_typeExtensionsMap$co4:[];return new GraphQLInterfaceType({...config,interfaces:()=>[...type.getInterfaces().map(replaceNamedType),...buildInterfaces(extensions)],fields:()=>({...mapValue(config.fields,extendField),...buildFieldMap(extensions)}),extensionASTNodes:config.extensionASTNodes.concat(extensions)})}(type):isUnionType(type)?function extendUnionType(type){var _typeExtensionsMap$co5;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co5=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co5?_typeExtensionsMap$co5:[];return new GraphQLUnionType({...config,types:()=>[...type.getTypes().map(replaceNamedType),...buildUnionTypes(extensions)],extensionASTNodes:config.extensionASTNodes.concat(extensions)})}(type):isEnumType(type)?function extendEnumType(type){var _typeExtensionsMap$ty;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$ty=typeExtensionsMap[type.name])&&void 0!==_typeExtensionsMap$ty?_typeExtensionsMap$ty:[];return new GraphQLEnumType({...config,values:{...config.values,...buildEnumValueMap(extensions)},extensionASTNodes:config.extensionASTNodes.concat(extensions)})}(type):isInputObjectType(type)?function extendInputObjectType(type){var _typeExtensionsMap$co;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co?_typeExtensionsMap$co:[];return new GraphQLInputObjectType({...config,fields:()=>({...mapValue(config.fields,(field=>({...field,type:replaceType(field.type)}))),...buildInputFieldMap(extensions)}),extensionASTNodes:config.extensionASTNodes.concat(extensions)})}(type):void invariant(!1,"Unexpected type: "+inspect(type))}function extendField(field){return{...field,type:replaceType(field.type),args:field.args&&mapValue(field.args,extendArg)}}function extendArg(arg){return{...arg,type:replaceType(arg.type)}}function getOperationTypes(nodes){const opTypes={};for(const node of nodes){var _node$operationTypes;const operationTypesNodes=null!==(_node$operationTypes=node.operationTypes)&&void 0!==_node$operationTypes?_node$operationTypes:[];for(const operationType of operationTypesNodes)opTypes[operationType.operation]=getNamedType(operationType.type)}return opTypes}function getNamedType(node){var _stdTypeMap$name2;const name=node.name.value,type=null!==(_stdTypeMap$name2=stdTypeMap[name])&&void 0!==_stdTypeMap$name2?_stdTypeMap$name2:typeMap[name];if(void 0===type)throw new Error(`Unknown type: "${name}".`);return type}function getWrappedType(node){return node.kind===Kind.LIST_TYPE?new GraphQLList(getWrappedType(node.type)):node.kind===Kind.NON_NULL_TYPE?new GraphQLNonNull(getWrappedType(node.type)):getNamedType(node)}function buildFieldMap(nodes){const fieldConfigMap=Object.create(null);for(const node of nodes){var _node$fields;const nodeFields=null!==(_node$fields=node.fields)&&void 0!==_node$fields?_node$fields:[];for(const field of nodeFields){var _field$description;fieldConfigMap[field.name.value]={type:getWrappedType(field.type),description:null===(_field$description=field.description)||void 0===_field$description?void 0:_field$description.value,args:buildArgumentMap(field.arguments),deprecationReason:getDeprecationReason(field),astNode:field}}}return fieldConfigMap}function buildArgumentMap(args){const argsNodes=null!=args?args:[],argConfigMap=Object.create(null);for(const arg of argsNodes){var _arg$description;const type=getWrappedType(arg.type);argConfigMap[arg.name.value]={type,description:null===(_arg$description=arg.description)||void 0===_arg$description?void 0:_arg$description.value,defaultValue:valueFromAST(arg.defaultValue,type),deprecationReason:getDeprecationReason(arg),astNode:arg}}return argConfigMap}function buildInputFieldMap(nodes){const inputFieldMap=Object.create(null);for(const node of nodes){var _node$fields2;const fieldsNodes=null!==(_node$fields2=node.fields)&&void 0!==_node$fields2?_node$fields2:[];for(const field of fieldsNodes){var _field$description2;const type=getWrappedType(field.type);inputFieldMap[field.name.value]={type,description:null===(_field$description2=field.description)||void 0===_field$description2?void 0:_field$description2.value,defaultValue:valueFromAST(field.defaultValue,type),deprecationReason:getDeprecationReason(field),astNode:field}}}return inputFieldMap}function buildEnumValueMap(nodes){const enumValueMap=Object.create(null);for(const node of nodes){var _node$values;const valuesNodes=null!==(_node$values=node.values)&&void 0!==_node$values?_node$values:[];for(const value of valuesNodes){var _value$description;enumValueMap[value.name.value]={description:null===(_value$description=value.description)||void 0===_value$description?void 0:_value$description.value,deprecationReason:getDeprecationReason(value),astNode:value}}}return enumValueMap}function buildInterfaces(nodes){return nodes.flatMap((node=>{var _node$interfaces$map,_node$interfaces;return null!==(_node$interfaces$map=null===(_node$interfaces=node.interfaces)||void 0===_node$interfaces?void 0:_node$interfaces.map(getNamedType))&&void 0!==_node$interfaces$map?_node$interfaces$map:[]}))}function buildUnionTypes(nodes){return nodes.flatMap((node=>{var _node$types$map,_node$types;return null!==(_node$types$map=null===(_node$types=node.types)||void 0===_node$types?void 0:_node$types.map(getNamedType))&&void 0!==_node$types$map?_node$types$map:[]}))}function buildType(astNode){var _typeExtensionsMap$na;const name=astNode.name.value,extensionASTNodes=null!==(_typeExtensionsMap$na=typeExtensionsMap[name])&&void 0!==_typeExtensionsMap$na?_typeExtensionsMap$na:[];switch(astNode.kind){case Kind.OBJECT_TYPE_DEFINITION:{var _astNode$description;const allNodes=[astNode,...extensionASTNodes];return new GraphQLObjectType({name,description:null===(_astNode$description=astNode.description)||void 0===_astNode$description?void 0:_astNode$description.value,interfaces:()=>buildInterfaces(allNodes),fields:()=>buildFieldMap(allNodes),astNode,extensionASTNodes})}case Kind.INTERFACE_TYPE_DEFINITION:{var _astNode$description2;const allNodes=[astNode,...extensionASTNodes];return new GraphQLInterfaceType({name,description:null===(_astNode$description2=astNode.description)||void 0===_astNode$description2?void 0:_astNode$description2.value,interfaces:()=>buildInterfaces(allNodes),fields:()=>buildFieldMap(allNodes),astNode,extensionASTNodes})}case Kind.ENUM_TYPE_DEFINITION:{var _astNode$description3;const allNodes=[astNode,...extensionASTNodes];return new GraphQLEnumType({name,description:null===(_astNode$description3=astNode.description)||void 0===_astNode$description3?void 0:_astNode$description3.value,values:buildEnumValueMap(allNodes),astNode,extensionASTNodes})}case Kind.UNION_TYPE_DEFINITION:{var _astNode$description4;const allNodes=[astNode,...extensionASTNodes];return new GraphQLUnionType({name,description:null===(_astNode$description4=astNode.description)||void 0===_astNode$description4?void 0:_astNode$description4.value,types:()=>buildUnionTypes(allNodes),astNode,extensionASTNodes})}case Kind.SCALAR_TYPE_DEFINITION:var _astNode$description5;return new GraphQLScalarType({name,description:null===(_astNode$description5=astNode.description)||void 0===_astNode$description5?void 0:_astNode$description5.value,specifiedByURL:getSpecifiedByURL(astNode),astNode,extensionASTNodes});case Kind.INPUT_OBJECT_TYPE_DEFINITION:{var _astNode$description6;const allNodes=[astNode,...extensionASTNodes];return new GraphQLInputObjectType({name,description:null===(_astNode$description6=astNode.description)||void 0===_astNode$description6?void 0:_astNode$description6.value,fields:()=>buildInputFieldMap(allNodes),astNode,extensionASTNodes,isOneOf:(node=astNode,Boolean(getDirectiveValues(GraphQLOneOfDirective,node)))})}}var node}}const stdTypeMap=keyMap([...specifiedScalarTypes,...introspectionTypes],(type=>type.name));function getDeprecationReason(node){const deprecated=getDirectiveValues(GraphQLDeprecatedDirective,node);return null==deprecated?void 0:deprecated.reason}function getSpecifiedByURL(node){const specifiedBy=getDirectiveValues(GraphQLSpecifiedByDirective,node);return null==specifiedBy?void 0:specifiedBy.url}function buildASTSchema(documentAST,options){null!=documentAST&&documentAST.kind===Kind.DOCUMENT||devAssert(!1,"Must provide valid Document AST."),!0!==(null==options?void 0:options.assumeValid)&&!0!==(null==options?void 0:options.assumeValidSDL)&&function assertValidSDL(documentAST){const errors=validateSDL(documentAST);if(0!==errors.length)throw new Error(errors.map((error=>error.message)).join("\n\n"))}(documentAST);const config=extendSchemaImpl({description:void 0,types:[],directives:[],extensions:Object.create(null),extensionASTNodes:[],assumeValid:!1},documentAST,options);if(null==config.astNode)for(const type of config.types)switch(type.name){case"Query":config.query=type;break;case"Mutation":config.mutation=type;break;case"Subscription":config.subscription=type}const directives=[...config.directives,...specifiedDirectives.filter((stdDirective=>config.directives.every((directive=>directive.name!==stdDirective.name))))];return new GraphQLSchema({...config,directives})}function buildSchema(source,options){return buildASTSchema(parse(source,{noLocation:null==options?void 0:options.noLocation,allowLegacyFragmentVariables:null==options?void 0:options.allowLegacyFragmentVariables}),{assumeValidSDL:null==options?void 0:options.assumeValidSDL,assumeValid:null==options?void 0:options.assumeValid})}function lexicographicSortSchema(schema){const schemaConfig=schema.toConfig(),typeMap=keyValMap(sortByName(schemaConfig.types),(type=>type.name),(function sortNamedType(type){if(isScalarType(type)||isIntrospectionType(type))return type;if(isObjectType(type)){const config=type.toConfig();return new GraphQLObjectType({...config,interfaces:()=>sortTypes(config.interfaces),fields:()=>sortFields(config.fields)})}if(isInterfaceType(type)){const config=type.toConfig();return new GraphQLInterfaceType({...config,interfaces:()=>sortTypes(config.interfaces),fields:()=>sortFields(config.fields)})}if(isUnionType(type)){const config=type.toConfig();return new GraphQLUnionType({...config,types:()=>sortTypes(config.types)})}if(isEnumType(type)){const config=type.toConfig();return new GraphQLEnumType({...config,values:sortObjMap(config.values,(value=>value))})}if(isInputObjectType(type)){const config=type.toConfig();return new GraphQLInputObjectType({...config,fields:()=>function sortInputFields(fieldsMap){return sortObjMap(fieldsMap,(field=>({...field,type:replaceType(field.type)})))}(config.fields)})}invariant(!1,"Unexpected type: "+inspect(type))}));return new GraphQLSchema({...schemaConfig,types:Object.values(typeMap),directives:sortByName(schemaConfig.directives).map((function sortDirective(directive){const config=directive.toConfig();return new GraphQLDirective({...config,locations:sortBy(config.locations,(x=>x)),args:sortArgs(config.args)})})),query:replaceMaybeType(schemaConfig.query),mutation:replaceMaybeType(schemaConfig.mutation),subscription:replaceMaybeType(schemaConfig.subscription)});function replaceType(type){return isListType(type)?new GraphQLList(replaceType(type.ofType)):isNonNullType(type)?new GraphQLNonNull(replaceType(type.ofType)):replaceNamedType(type)}function replaceNamedType(type){return typeMap[type.name]}function replaceMaybeType(maybeType){return maybeType&&replaceNamedType(maybeType)}function sortArgs(args){return sortObjMap(args,(arg=>({...arg,type:replaceType(arg.type)})))}function sortFields(fieldsMap){return sortObjMap(fieldsMap,(field=>({...field,type:replaceType(field.type),args:field.args&&sortArgs(field.args)})))}function sortTypes(array){return sortByName(array).map(replaceNamedType)}}function sortObjMap(map,sortValueFn){const sortedMap=Object.create(null);for(const key of Object.keys(map).sort(naturalCompare))sortedMap[key]=sortValueFn(map[key]);return sortedMap}function sortByName(array){return sortBy(array,(obj=>obj.name))}function sortBy(array,mapToKey){return array.slice().sort(((obj1,obj2)=>naturalCompare(mapToKey(obj1),mapToKey(obj2))))}function printSchema(schema){return printFilteredSchema(schema,(n=>!isSpecifiedDirective(n)),isDefinedType)}function printIntrospectionSchema(schema){return printFilteredSchema(schema,isSpecifiedDirective,isIntrospectionType)}function isDefinedType(type){return!isSpecifiedScalarType(type)&&!isIntrospectionType(type)}function printFilteredSchema(schema,directiveFilter,typeFilter){const directives=schema.getDirectives().filter(directiveFilter),types=Object.values(schema.getTypeMap()).filter(typeFilter);return[printSchemaDefinition(schema),...directives.map((directive=>function printDirective(directive){return printDescription(directive)+"directive @"+directive.name+printArgs(directive.args)+(directive.isRepeatable?" repeatable":"")+" on "+directive.locations.join(" | ")}(directive))),...types.map((type=>printType(type)))].filter(Boolean).join("\n\n")}function printSchemaDefinition(schema){if(null==schema.description&&function isSchemaOfCommonNames(schema){const queryType=schema.getQueryType();if(queryType&&"Query"!==queryType.name)return!1;const mutationType=schema.getMutationType();if(mutationType&&"Mutation"!==mutationType.name)return!1;const subscriptionType=schema.getSubscriptionType();if(subscriptionType&&"Subscription"!==subscriptionType.name)return!1;return!0}(schema))return;const operationTypes=[],queryType=schema.getQueryType();queryType&&operationTypes.push(`  query: ${queryType.name}`);const mutationType=schema.getMutationType();mutationType&&operationTypes.push(`  mutation: ${mutationType.name}`);const subscriptionType=schema.getSubscriptionType();return subscriptionType&&operationTypes.push(`  subscription: ${subscriptionType.name}`),printDescription(schema)+`schema {\n${operationTypes.join("\n")}\n}`}function printType(type){return isScalarType(type)?function printScalar(type){return printDescription(type)+`scalar ${type.name}`+function printSpecifiedByURL(scalar){if(null==scalar.specifiedByURL)return"";return` @specifiedBy(url: ${print({kind:Kind.STRING,value:scalar.specifiedByURL})})`}(type)}(type):isObjectType(type)?function printObject(type){return printDescription(type)+`type ${type.name}`+printImplementedInterfaces(type)+printFields(type)}(type):isInterfaceType(type)?function printInterface(type){return printDescription(type)+`interface ${type.name}`+printImplementedInterfaces(type)+printFields(type)}(type):isUnionType(type)?function printUnion(type){const types=type.getTypes(),possibleTypes=types.length?" = "+types.join(" | "):"";return printDescription(type)+"union "+type.name+possibleTypes}(type):isEnumType(type)?function printEnum(type){const values=type.getValues().map(((value,i)=>printDescription(value,"  ",!i)+"  "+value.name+printDeprecated(value.deprecationReason)));return printDescription(type)+`enum ${type.name}`+printBlock(values)}(type):isInputObjectType(type)?function printInputObject(type){const fields=Object.values(type.getFields()).map(((f,i)=>printDescription(f,"  ",!i)+"  "+printInputValue(f)));return printDescription(type)+`input ${type.name}`+(type.isOneOf?" @oneOf":"")+printBlock(fields)}(type):void invariant(!1,"Unexpected type: "+inspect(type))}function printImplementedInterfaces(type){const interfaces=type.getInterfaces();return interfaces.length?" implements "+interfaces.map((i=>i.name)).join(" & "):""}function printFields(type){return printBlock(Object.values(type.getFields()).map(((f,i)=>printDescription(f,"  ",!i)+"  "+f.name+printArgs(f.args,"  ")+": "+String(f.type)+printDeprecated(f.deprecationReason))))}function printBlock(items){return 0!==items.length?" {\n"+items.join("\n")+"\n}":""}function printArgs(args,indentation=""){return 0===args.length?"":args.every((arg=>!arg.description))?"("+args.map(printInputValue).join(", ")+")":"(\n"+args.map(((arg,i)=>printDescription(arg,"  "+indentation,!i)+"  "+indentation+printInputValue(arg))).join("\n")+"\n"+indentation+")"}function printInputValue(arg){const defaultAST=astFromValue(arg.defaultValue,arg.type);let argDecl=arg.name+": "+String(arg.type);return defaultAST&&(argDecl+=` = ${print(defaultAST)}`),argDecl+printDeprecated(arg.deprecationReason)}function printDeprecated(reason){if(null==reason)return"";if(reason!==DEFAULT_DEPRECATION_REASON){return` @deprecated(reason: ${print({kind:Kind.STRING,value:reason})})`}return" @deprecated"}function printDescription(def,indentation="",firstInBlock=!0){const{description}=def;if(null==description)return"";return(indentation&&!firstInBlock?"\n"+indentation:indentation)+print({kind:Kind.STRING,value:description,block:isPrintableAsBlockString(description)}).replace(/\n/g,"\n"+indentation)+"\n"}function concatAST(documents){const definitions=[];for(const doc of documents)definitions.push(...doc.definitions);return{kind:Kind.DOCUMENT,definitions}}function separateOperations(documentAST){const operations=[],depGraph=Object.create(null);for(const definitionNode of documentAST.definitions)switch(definitionNode.kind){case Kind.OPERATION_DEFINITION:operations.push(definitionNode);break;case Kind.FRAGMENT_DEFINITION:depGraph[definitionNode.name.value]=collectDependencies(definitionNode.selectionSet)}const separatedDocumentASTs=Object.create(null);for(const operation of operations){const dependencies=new Set;for(const fragmentName of collectDependencies(operation.selectionSet))collectTransitiveDependencies(dependencies,depGraph,fragmentName);separatedDocumentASTs[operation.name?operation.name.value:""]={kind:Kind.DOCUMENT,definitions:documentAST.definitions.filter((node=>node===operation||node.kind===Kind.FRAGMENT_DEFINITION&&dependencies.has(node.name.value)))}}return separatedDocumentASTs}function collectTransitiveDependencies(collected,depGraph,fromName){if(!collected.has(fromName)){collected.add(fromName);const immediateDeps=depGraph[fromName];if(void 0!==immediateDeps)for(const toName of immediateDeps)collectTransitiveDependencies(collected,depGraph,toName)}}function collectDependencies(selectionSet){const dependencies=[];return visit(selectionSet,{FragmentSpread(node){dependencies.push(node.name.value)}}),dependencies}function stripIgnoredCharacters(source){const sourceObj=isSource(source)?source:new Source(source),body=sourceObj.body,lexer=new Lexer(sourceObj);let strippedBody="",wasLastAddedTokenNonPunctuator=!1;for(;lexer.advance().kind!==TokenKind.EOF;){const currentToken=lexer.token,tokenKind=currentToken.kind,isNonPunctuator=!isPunctuatorTokenKind(currentToken.kind);wasLastAddedTokenNonPunctuator&&(isNonPunctuator||currentToken.kind===TokenKind.SPREAD)&&(strippedBody+=" ");const tokenBody=body.slice(currentToken.start,currentToken.end);tokenKind===TokenKind.BLOCK_STRING?strippedBody+=printBlockString(currentToken.value,{minimize:!0}):strippedBody+=tokenBody,wasLastAddedTokenNonPunctuator=isNonPunctuator}return strippedBody}function assertValidName(name){const error=isValidNameError(name);if(error)throw error;return name}function isValidNameError(name){if("string"==typeof name||devAssert(!1,"Expected name to be a string."),name.startsWith("__"))return new GraphQLError(`Name "${name}" must not begin with "__", which is reserved by GraphQL introspection.`);try{assertName(name)}catch(error){return error}}var BreakingChangeType,DangerousChangeType;function findBreakingChanges(oldSchema,newSchema){return findSchemaChanges(oldSchema,newSchema).filter((change=>change.type in BreakingChangeType))}function findDangerousChanges(oldSchema,newSchema){return findSchemaChanges(oldSchema,newSchema).filter((change=>change.type in DangerousChangeType))}function findSchemaChanges(oldSchema,newSchema){return[...findTypeChanges(oldSchema,newSchema),...findDirectiveChanges(oldSchema,newSchema)]}function findDirectiveChanges(oldSchema,newSchema){const schemaChanges=[],directivesDiff=diff(oldSchema.getDirectives(),newSchema.getDirectives());for(const oldDirective of directivesDiff.removed)schemaChanges.push({type:BreakingChangeType.DIRECTIVE_REMOVED,description:`${oldDirective.name} was removed.`});for(const[oldDirective,newDirective]of directivesDiff.persisted){const argsDiff=diff(oldDirective.args,newDirective.args);for(const newArg of argsDiff.added)isRequiredArgument(newArg)&&schemaChanges.push({type:BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,description:`A required arg ${newArg.name} on directive ${oldDirective.name} was added.`});for(const oldArg of argsDiff.removed)schemaChanges.push({type:BreakingChangeType.DIRECTIVE_ARG_REMOVED,description:`${oldArg.name} was removed from ${oldDirective.name}.`});oldDirective.isRepeatable&&!newDirective.isRepeatable&&schemaChanges.push({type:BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,description:`Repeatable flag was removed from ${oldDirective.name}.`});for(const location of oldDirective.locations)newDirective.locations.includes(location)||schemaChanges.push({type:BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,description:`${location} was removed from ${oldDirective.name}.`})}return schemaChanges}function findTypeChanges(oldSchema,newSchema){const schemaChanges=[],typesDiff=diff(Object.values(oldSchema.getTypeMap()),Object.values(newSchema.getTypeMap()));for(const oldType of typesDiff.removed)schemaChanges.push({type:BreakingChangeType.TYPE_REMOVED,description:isSpecifiedScalarType(oldType)?`Standard scalar ${oldType.name} was removed because it is not referenced anymore.`:`${oldType.name} was removed.`});for(const[oldType,newType]of typesDiff.persisted)isEnumType(oldType)&&isEnumType(newType)?schemaChanges.push(...findEnumTypeChanges(oldType,newType)):isUnionType(oldType)&&isUnionType(newType)?schemaChanges.push(...findUnionTypeChanges(oldType,newType)):isInputObjectType(oldType)&&isInputObjectType(newType)?schemaChanges.push(...findInputObjectTypeChanges(oldType,newType)):isObjectType(oldType)&&isObjectType(newType)||isInterfaceType(oldType)&&isInterfaceType(newType)?schemaChanges.push(...findFieldChanges(oldType,newType),...findImplementedInterfacesChanges(oldType,newType)):oldType.constructor!==newType.constructor&&schemaChanges.push({type:BreakingChangeType.TYPE_CHANGED_KIND,description:`${oldType.name} changed from ${typeKindName(oldType)} to ${typeKindName(newType)}.`});return schemaChanges}function findInputObjectTypeChanges(oldType,newType){const schemaChanges=[],fieldsDiff=diff(Object.values(oldType.getFields()),Object.values(newType.getFields()));for(const newField of fieldsDiff.added)isRequiredInputField(newField)?schemaChanges.push({type:BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,description:`A required field ${newField.name} on input type ${oldType.name} was added.`}):schemaChanges.push({type:DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,description:`An optional field ${newField.name} on input type ${oldType.name} was added.`});for(const oldField of fieldsDiff.removed)schemaChanges.push({type:BreakingChangeType.FIELD_REMOVED,description:`${oldType.name}.${oldField.name} was removed.`});for(const[oldField,newField]of fieldsDiff.persisted){isChangeSafeForInputObjectFieldOrFieldArg(oldField.type,newField.type)||schemaChanges.push({type:BreakingChangeType.FIELD_CHANGED_KIND,description:`${oldType.name}.${oldField.name} changed type from ${String(oldField.type)} to ${String(newField.type)}.`})}return schemaChanges}function findUnionTypeChanges(oldType,newType){const schemaChanges=[],possibleTypesDiff=diff(oldType.getTypes(),newType.getTypes());for(const newPossibleType of possibleTypesDiff.added)schemaChanges.push({type:DangerousChangeType.TYPE_ADDED_TO_UNION,description:`${newPossibleType.name} was added to union type ${oldType.name}.`});for(const oldPossibleType of possibleTypesDiff.removed)schemaChanges.push({type:BreakingChangeType.TYPE_REMOVED_FROM_UNION,description:`${oldPossibleType.name} was removed from union type ${oldType.name}.`});return schemaChanges}function findEnumTypeChanges(oldType,newType){const schemaChanges=[],valuesDiff=diff(oldType.getValues(),newType.getValues());for(const newValue of valuesDiff.added)schemaChanges.push({type:DangerousChangeType.VALUE_ADDED_TO_ENUM,description:`${newValue.name} was added to enum type ${oldType.name}.`});for(const oldValue of valuesDiff.removed)schemaChanges.push({type:BreakingChangeType.VALUE_REMOVED_FROM_ENUM,description:`${oldValue.name} was removed from enum type ${oldType.name}.`});return schemaChanges}function findImplementedInterfacesChanges(oldType,newType){const schemaChanges=[],interfacesDiff=diff(oldType.getInterfaces(),newType.getInterfaces());for(const newInterface of interfacesDiff.added)schemaChanges.push({type:DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,description:`${newInterface.name} added to interfaces implemented by ${oldType.name}.`});for(const oldInterface of interfacesDiff.removed)schemaChanges.push({type:BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,description:`${oldType.name} no longer implements interface ${oldInterface.name}.`});return schemaChanges}function findFieldChanges(oldType,newType){const schemaChanges=[],fieldsDiff=diff(Object.values(oldType.getFields()),Object.values(newType.getFields()));for(const oldField of fieldsDiff.removed)schemaChanges.push({type:BreakingChangeType.FIELD_REMOVED,description:`${oldType.name}.${oldField.name} was removed.`});for(const[oldField,newField]of fieldsDiff.persisted){schemaChanges.push(...findArgChanges(oldType,oldField,newField));isChangeSafeForObjectOrInterfaceField(oldField.type,newField.type)||schemaChanges.push({type:BreakingChangeType.FIELD_CHANGED_KIND,description:`${oldType.name}.${oldField.name} changed type from ${String(oldField.type)} to ${String(newField.type)}.`})}return schemaChanges}function findArgChanges(oldType,oldField,newField){const schemaChanges=[],argsDiff=diff(oldField.args,newField.args);for(const oldArg of argsDiff.removed)schemaChanges.push({type:BreakingChangeType.ARG_REMOVED,description:`${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`});for(const[oldArg,newArg]of argsDiff.persisted){if(isChangeSafeForInputObjectFieldOrFieldArg(oldArg.type,newArg.type)){if(void 0!==oldArg.defaultValue)if(void 0===newArg.defaultValue)schemaChanges.push({type:DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,description:`${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`});else{const oldValueStr=findBreakingChanges_stringifyValue(oldArg.defaultValue,oldArg.type),newValueStr=findBreakingChanges_stringifyValue(newArg.defaultValue,newArg.type);oldValueStr!==newValueStr&&schemaChanges.push({type:DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,description:`${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`})}}else schemaChanges.push({type:BreakingChangeType.ARG_CHANGED_KIND,description:`${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ${String(oldArg.type)} to ${String(newArg.type)}.`})}for(const newArg of argsDiff.added)isRequiredArgument(newArg)?schemaChanges.push({type:BreakingChangeType.REQUIRED_ARG_ADDED,description:`A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`}):schemaChanges.push({type:DangerousChangeType.OPTIONAL_ARG_ADDED,description:`An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`});return schemaChanges}function isChangeSafeForObjectOrInterfaceField(oldType,newType){return isListType(oldType)?isListType(newType)&&isChangeSafeForObjectOrInterfaceField(oldType.ofType,newType.ofType)||isNonNullType(newType)&&isChangeSafeForObjectOrInterfaceField(oldType,newType.ofType):isNonNullType(oldType)?isNonNullType(newType)&&isChangeSafeForObjectOrInterfaceField(oldType.ofType,newType.ofType):isNamedType(newType)&&oldType.name===newType.name||isNonNullType(newType)&&isChangeSafeForObjectOrInterfaceField(oldType,newType.ofType)}function isChangeSafeForInputObjectFieldOrFieldArg(oldType,newType){return isListType(oldType)?isListType(newType)&&isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType,newType.ofType):isNonNullType(oldType)?isNonNullType(newType)&&isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType,newType.ofType)||!isNonNullType(newType)&&isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType,newType):isNamedType(newType)&&oldType.name===newType.name}function typeKindName(type){return isScalarType(type)?"a Scalar type":isObjectType(type)?"an Object type":isInterfaceType(type)?"an Interface type":isUnionType(type)?"a Union type":isEnumType(type)?"an Enum type":isInputObjectType(type)?"an Input type":void invariant(!1,"Unexpected type: "+inspect(type))}function findBreakingChanges_stringifyValue(value,type){const ast=astFromValue(value,type);return null!=ast||invariant(!1),print(sortValueNode(ast))}function diff(oldArray,newArray){const added=[],removed=[],persisted=[],oldMap=keyMap(oldArray,(({name})=>name)),newMap=keyMap(newArray,(({name})=>name));for(const oldItem of oldArray){const newItem=newMap[oldItem.name];void 0===newItem?removed.push(oldItem):persisted.push([oldItem,newItem])}for(const newItem of newArray)void 0===oldMap[newItem.name]&&added.push(newItem);return{added,persisted,removed}}!function(BreakingChangeType){BreakingChangeType.TYPE_REMOVED="TYPE_REMOVED",BreakingChangeType.TYPE_CHANGED_KIND="TYPE_CHANGED_KIND",BreakingChangeType.TYPE_REMOVED_FROM_UNION="TYPE_REMOVED_FROM_UNION",BreakingChangeType.VALUE_REMOVED_FROM_ENUM="VALUE_REMOVED_FROM_ENUM",BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED="REQUIRED_INPUT_FIELD_ADDED",BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED="IMPLEMENTED_INTERFACE_REMOVED",BreakingChangeType.FIELD_REMOVED="FIELD_REMOVED",BreakingChangeType.FIELD_CHANGED_KIND="FIELD_CHANGED_KIND",BreakingChangeType.REQUIRED_ARG_ADDED="REQUIRED_ARG_ADDED",BreakingChangeType.ARG_REMOVED="ARG_REMOVED",BreakingChangeType.ARG_CHANGED_KIND="ARG_CHANGED_KIND",BreakingChangeType.DIRECTIVE_REMOVED="DIRECTIVE_REMOVED",BreakingChangeType.DIRECTIVE_ARG_REMOVED="DIRECTIVE_ARG_REMOVED",BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED="REQUIRED_DIRECTIVE_ARG_ADDED",BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED="DIRECTIVE_REPEATABLE_REMOVED",BreakingChangeType.DIRECTIVE_LOCATION_REMOVED="DIRECTIVE_LOCATION_REMOVED"}(BreakingChangeType||(BreakingChangeType={})),function(DangerousChangeType){DangerousChangeType.VALUE_ADDED_TO_ENUM="VALUE_ADDED_TO_ENUM",DangerousChangeType.TYPE_ADDED_TO_UNION="TYPE_ADDED_TO_UNION",DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED="OPTIONAL_INPUT_FIELD_ADDED",DangerousChangeType.OPTIONAL_ARG_ADDED="OPTIONAL_ARG_ADDED",DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED="IMPLEMENTED_INTERFACE_ADDED",DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE="ARG_DEFAULT_VALUE_CHANGE"}(DangerousChangeType||(DangerousChangeType={}))}}]);